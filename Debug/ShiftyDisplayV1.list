
ShiftyDisplayV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008698  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08008878  08008878  00009878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de0  08008de0  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008de0  08008de0  00009de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de8  08008de8  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de8  08008de8  00009de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dec  08008dec  00009dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08008df0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200001e8  08008fd8  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08008fd8  0000a4c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001528f  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c30  00000000  00000000  0001f4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  000220d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f14  00000000  00000000  00023458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022daf  00000000  00000000  0002436c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fc3  00000000  00000000  0004711b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5725  00000000  00000000  0005f0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144803  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062dc  00000000  00000000  00144848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0014ab24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008860 	.word	0x08008860

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08008860 	.word	0x08008860

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2220      	movs	r2, #32
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f005 fd90 	bl	8006a1a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000efa:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000efc:	4a2b      	ldr	r2, [pc, #172]	@ (8000fac <MX_ADC2_Init+0xc4>)
 8000efe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f00:	4b29      	ldr	r3, [pc, #164]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f02:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f06:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f08:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0e:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000f14:	4b24      	ldr	r3, [pc, #144]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f20:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f22:	2204      	movs	r2, #4
 8000f24:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f40:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f54:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f62:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f64:	f001 f9ce 	bl	8002304 <HAL_ADC_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f6e:	f000 fb8c 	bl	800168a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f72:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb0 <MX_ADC2_Init+0xc8>)
 8000f74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f76:	2306      	movs	r3, #6
 8000f78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7e:	237f      	movs	r3, #127	@ 0x7f
 8000f80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f82:	2304      	movs	r3, #4
 8000f84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <MX_ADC2_Init+0xc0>)
 8000f90:	f001 fb66 	bl	8002660 <HAL_ADC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f9a:	f000 fb76 	bl	800168a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000204 	.word	0x20000204
 8000fac:	50000100 	.word	0x50000100
 8000fb0:	14f00020 	.word	0x14f00020

08000fb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b09e      	sub	sp, #120	@ 0x78
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2250      	movs	r2, #80	@ 0x50
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f005 fd20 	bl	8006a1a <memset>
  if(adcHandle->Instance==ADC2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <HAL_ADC_MspInit+0xa0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d133      	bne.n	800104c <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fe4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fe8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f003 f863 	bl	80040c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001000:	f000 fb43 	bl	800168a <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_ADC_MspInit+0xa4>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001008:	4a13      	ldr	r2, [pc, #76]	@ (8001058 <HAL_ADC_MspInit+0xa4>)
 800100a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800100e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001010:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <HAL_ADC_MspInit+0xa4>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101c:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_ADC_MspInit+0xa4>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <HAL_ADC_MspInit+0xa4>)
 8001022:	f043 0304 	orr.w	r3, r3, #4
 8001026:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001028:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <HAL_ADC_MspInit+0xa4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = ADC_potentiometer_Pin;
 8001034:	2310      	movs	r3, #16
 8001036:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001038:	2303      	movs	r3, #3
 800103a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(ADC_potentiometer_GPIO_Port, &GPIO_InitStruct);
 8001040:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	@ (800105c <HAL_ADC_MspInit+0xa8>)
 8001048:	f002 f8a6 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800104c:	bf00      	nop
 800104e:	3778      	adds	r7, #120	@ 0x78
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	50000100 	.word	0x50000100
 8001058:	40021000 	.word	0x40021000
 800105c:	48000800 	.word	0x48000800

08001060 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	4b39      	ldr	r3, [pc, #228]	@ (800115c <MX_GPIO_Init+0xfc>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a38      	ldr	r2, [pc, #224]	@ (800115c <MX_GPIO_Init+0xfc>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b36      	ldr	r3, [pc, #216]	@ (800115c <MX_GPIO_Init+0xfc>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108e:	4b33      	ldr	r3, [pc, #204]	@ (800115c <MX_GPIO_Init+0xfc>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a32      	ldr	r2, [pc, #200]	@ (800115c <MX_GPIO_Init+0xfc>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b30      	ldr	r3, [pc, #192]	@ (800115c <MX_GPIO_Init+0xfc>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	4b2d      	ldr	r3, [pc, #180]	@ (800115c <MX_GPIO_Init+0xfc>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <MX_GPIO_Init+0xfc>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <MX_GPIO_Init+0xfc>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b27      	ldr	r3, [pc, #156]	@ (800115c <MX_GPIO_Init+0xfc>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a26      	ldr	r2, [pc, #152]	@ (800115c <MX_GPIO_Init+0xfc>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b24      	ldr	r3, [pc, #144]	@ (800115c <MX_GPIO_Init+0xfc>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, row_SR_nOE_Pin|row_SR_nSRCLR_Pin|row_SR_SRCLK_Pin|row_SR_RCLK_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	210f      	movs	r1, #15
 80010da:	4821      	ldr	r0, [pc, #132]	@ (8001160 <MX_GPIO_Init+0x100>)
 80010dc:	f002 f9f6 	bl	80034cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, row_SR_SER_Pin|col_SR_RCLK_Pin|col_SR_nOE_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f641 0101 	movw	r1, #6145	@ 0x1801
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ea:	f002 f9ef 	bl	80034cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, col_SR_SER6_Pin|col_SR_SER5_Pin|col_SR_nSRCLR_Pin|col_SR_SRCLK_Pin
 80010ee:	2200      	movs	r2, #0
 80010f0:	f64f 4132 	movw	r1, #64562	@ 0xfc32
 80010f4:	481b      	ldr	r0, [pc, #108]	@ (8001164 <MX_GPIO_Init+0x104>)
 80010f6:	f002 f9e9 	bl	80034cc <HAL_GPIO_WritePin>
                          |col_SR_SER0_Pin|col_SR_SER2_Pin|col_SR_SER4_Pin|col_SR_SER3_Pin
                          |col_SR_SER1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = row_SR_nOE_Pin|row_SR_nSRCLR_Pin|row_SR_SRCLK_Pin|row_SR_RCLK_Pin;
 80010fa:	230f      	movs	r3, #15
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4813      	ldr	r0, [pc, #76]	@ (8001160 <MX_GPIO_Init+0x100>)
 8001112:	f002 f841 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = row_SR_SER_Pin|col_SR_RCLK_Pin|col_SR_nOE_Pin;
 8001116:	f641 0301 	movw	r3, #6145	@ 0x1801
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001132:	f002 f831 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = col_SR_SER6_Pin|col_SR_SER5_Pin|col_SR_nSRCLR_Pin|col_SR_SRCLK_Pin
 8001136:	f64f 4332 	movw	r3, #64562	@ 0xfc32
 800113a:	617b      	str	r3, [r7, #20]
                          |col_SR_SER0_Pin|col_SR_SER2_Pin|col_SR_SER4_Pin|col_SR_SER3_Pin
                          |col_SR_SER1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_GPIO_Init+0x104>)
 8001150:	f002 f822 	bl	8003198 <HAL_GPIO_Init>

}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	@ 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	48000800 	.word	0x48000800
 8001164:	48000400 	.word	0x48000400

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0ea      	sub	sp, #424	@ 0x1a8
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fe61 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 fa41 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f7ff ff73 	bl	8001060 <MX_GPIO_Init>
  MX_TIM3_Init();
 800117a:	f000 fbbf 	bl	80018fc <MX_TIM3_Init>
  MX_ADC2_Init();
 800117e:	f7ff feb3 	bl	8000ee8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8001182:	2000      	movs	r0, #0
 8001184:	f000 fc96 	bl	8001ab4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001188:	2101      	movs	r1, #1
 800118a:	2000      	movs	r0, #0
 800118c:	f000 fcde 	bl	8001b4c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001190:	4b7c      	ldr	r3, [pc, #496]	@ (8001384 <main+0x21c>)
 8001192:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001196:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001198:	4b7a      	ldr	r3, [pc, #488]	@ (8001384 <main+0x21c>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800119e:	4b79      	ldr	r3, [pc, #484]	@ (8001384 <main+0x21c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80011a4:	4b77      	ldr	r3, [pc, #476]	@ (8001384 <main+0x21c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80011aa:	4b76      	ldr	r3, [pc, #472]	@ (8001384 <main+0x21c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80011b0:	4974      	ldr	r1, [pc, #464]	@ (8001384 <main+0x21c>)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 fd6c 	bl	8001c90 <BSP_COM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <main+0x5a>
  {
    Error_Handler();
 80011be:	f000 fa64 	bl	800168a <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("\n\rStarting NUCLEO-STM32G491RE...\n\n\r");
 80011c2:	4871      	ldr	r0, [pc, #452]	@ (8001388 <main+0x220>)
 80011c4:	f005 fbd4 	bl	8006970 <iprintf>

  const uint32_t MIN_TIM_PERIOD = 65535;
 80011c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  const uint32_t MAX_TIM_PERIOD = 2360;
 80011d0:	f640 1338 	movw	r3, #2360	@ 0x938
 80011d4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	486c      	ldr	r0, [pc, #432]	@ (800138c <main+0x224>)
 80011dc:	f003 fa04 	bl	80045e8 <HAL_TIM_PWM_Start>

  /*
   * Initialize Shift Register Outputs
   */
  // Initialize control registers as appropriate
  HAL_GPIO_WritePin(row_SR_nOE_GPIO_Port, row_SR_nOE_Pin, 0); // Row is disabled to start, will be enabled when column values are set
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	486a      	ldr	r0, [pc, #424]	@ (8001390 <main+0x228>)
 80011e6:	f002 f971 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(row_SR_RCLK_GPIO_Port, row_SR_RCLK_Pin, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2108      	movs	r1, #8
 80011ee:	4868      	ldr	r0, [pc, #416]	@ (8001390 <main+0x228>)
 80011f0:	f002 f96c 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(row_SR_SRCLK_GPIO_Port, row_SR_SRCLK_Pin, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2104      	movs	r1, #4
 80011f8:	4865      	ldr	r0, [pc, #404]	@ (8001390 <main+0x228>)
 80011fa:	f002 f967 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(row_SR_nSRCLR_GPIO_Port, row_SR_nSRCLR_Pin, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2102      	movs	r1, #2
 8001202:	4863      	ldr	r0, [pc, #396]	@ (8001390 <main+0x228>)
 8001204:	f002 f962 	bl	80034cc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(col_SR_nOE_GPIO_Port, col_SR_nOE_Pin, 1);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800120e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001212:	f002 f95b 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_RCLK_GPIO_Port, col_SR_RCLK_Pin, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f002 f954 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_SRCLK_GPIO_Port, col_SR_SRCLK_Pin, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800122a:	485a      	ldr	r0, [pc, #360]	@ (8001394 <main+0x22c>)
 800122c:	f002 f94e 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_nSRCLR_GPIO_Port, col_SR_nSRCLR_Pin, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001236:	4857      	ldr	r0, [pc, #348]	@ (8001394 <main+0x22c>)
 8001238:	f002 f948 	bl	80034cc <HAL_GPIO_WritePin>

  // Remove shift register clear
  HAL_GPIO_WritePin(row_SR_nSRCLR_GPIO_Port, row_SR_nSRCLR_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	2102      	movs	r1, #2
 8001240:	4853      	ldr	r0, [pc, #332]	@ (8001390 <main+0x228>)
 8001242:	f002 f943 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_nSRCLR_GPIO_Port, col_SR_nSRCLR_Pin, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800124c:	4851      	ldr	r0, [pc, #324]	@ (8001394 <main+0x22c>)
 800124e:	f002 f93d 	bl	80034cc <HAL_GPIO_WritePin>

  // Set all shift register serial outputs to 0
  HAL_GPIO_WritePin(row_SR_SER_GPIO_Port, row_SR_SER_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2101      	movs	r1, #1
 8001256:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800125a:	f002 f937 	bl	80034cc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(col_SR_SER0_GPIO_Port, col_SR_SER0_Pin, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001264:	484b      	ldr	r0, [pc, #300]	@ (8001394 <main+0x22c>)
 8001266:	f002 f931 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_SER1_GPIO_Port, col_SR_SER1_Pin, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2120      	movs	r1, #32
 800126e:	4849      	ldr	r0, [pc, #292]	@ (8001394 <main+0x22c>)
 8001270:	f002 f92c 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_SER2_GPIO_Port, col_SR_SER2_Pin, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800127a:	4846      	ldr	r0, [pc, #280]	@ (8001394 <main+0x22c>)
 800127c:	f002 f926 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_SER3_GPIO_Port, col_SR_SER3_Pin, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2110      	movs	r1, #16
 8001284:	4843      	ldr	r0, [pc, #268]	@ (8001394 <main+0x22c>)
 8001286:	f002 f921 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_SER4_GPIO_Port, col_SR_SER4_Pin, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001290:	4840      	ldr	r0, [pc, #256]	@ (8001394 <main+0x22c>)
 8001292:	f002 f91b 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_SER5_GPIO_Port, col_SR_SER5_Pin, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800129c:	483d      	ldr	r0, [pc, #244]	@ (8001394 <main+0x22c>)
 800129e:	f002 f915 	bl	80034cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(col_SR_SER6_GPIO_Port, col_SR_SER6_Pin, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2102      	movs	r1, #2
 80012a6:	483b      	ldr	r0, [pc, #236]	@ (8001394 <main+0x22c>)
 80012a8:	f002 f910 	bl	80034cc <HAL_GPIO_WritePin>



  const uint8_t CLK_DELAY = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f
  uint8_t row = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7

//  typedef struct frame {
//	  uint8_t row[ROW_COUNT][SR_COUNT];
//  } Frame;

  const uint8_t frame_hello_world[ROW_COUNT][SR_COUNT] = {
 80012b8:	4a37      	ldr	r2, [pc, #220]	@ (8001398 <main+0x230>)
 80012ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012be:	4611      	mov	r1, r2
 80012c0:	227e      	movs	r2, #126	@ 0x7e
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fc29 	bl	8006b1a <memcpy>
	  {9, 40, 162, 130, 32, 0, 0},
	  {6, 199, 34, 251, 192, 0, 0},
	  {0, 0, 0, 0, 0, 0, 0},
	  };

  const uint8_t frame_all_on[ROW_COUNT][SR_COUNT] = {
 80012c8:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80012cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012d0:	4a32      	ldr	r2, [pc, #200]	@ (800139c <main+0x234>)
 80012d2:	4618      	mov	r0, r3
 80012d4:	4611      	mov	r1, r2
 80012d6:	237e      	movs	r3, #126	@ 0x7e
 80012d8:	461a      	mov	r2, r3
 80012da:	f005 fc1e 	bl	8006b1a <memcpy>
	  {255,	255, 255, 255, 255,	255, 255},
	  {255,	255, 255, 255, 255,	255, 255},
	  {255,	255, 255, 255, 255,	255, 255}
  	  };

  const uint8_t frame_list_of_numbers[ROW_COUNT][SR_COUNT] = {
 80012de:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80012e2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80012e6:	4a2e      	ldr	r2, [pc, #184]	@ (80013a0 <main+0x238>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	4611      	mov	r1, r2
 80012ec:	237e      	movs	r3, #126	@ 0x7e
 80012ee:	461a      	mov	r2, r3
 80012f0:	f005 fc13 	bl	8006b1a <memcpy>
//  uint8_t currentFrame[ROW_COUNT][SR_COUNT];
//  memcpy(currentFrame, frame_helloWorld, ROW_COUNT*SR_COUNT);

  uint8_t (*current_frame)[SR_COUNT];
  uint8_t (*next_frame)[SR_COUNT];
  current_frame = frame_hello_world;
 80012f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012f8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  next_frame = NULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  // Array of different frames and index to track
  uint8_t frame_index = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
  #define FRAME_ARRAY_COUNT 3
  uint8_t *frame_array[] = {
 8001308:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800130c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001310:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800131a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001328:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800132c:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8001330:	609a      	str	r2, [r3, #8]
  };

  while (1)
  {
	  // Check if the bottom row has been displayed
	  if(row >= ROW_COUNT - 1) {
 8001332:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8001336:	2b10      	cmp	r3, #16
 8001338:	d914      	bls.n	8001364 <main+0x1fc>
		  // Reset row index to the top row
		  row = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
		  HAL_GPIO_WritePin(row_SR_SER_GPIO_Port, row_SR_SER_Pin, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	2101      	movs	r1, #1
 8001344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001348:	f002 f8c0 	bl	80034cc <HAL_GPIO_WritePin>
		  // Check if a new frame is available, and if so, update current_frame
		  if(next_frame != NULL) {
 800134c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <main+0x212>
			  current_frame = next_frame;
 8001354:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001358:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
			  next_frame = NULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001362:	e00a      	b.n	800137a <main+0x212>
		  }
	  } else {
		  // Increment row
		  row++;
 8001364:	f897 31a7 	ldrb.w	r3, [r7, #423]	@ 0x1a7
 8001368:	3301      	adds	r3, #1
 800136a:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
		  HAL_GPIO_WritePin(row_SR_SER_GPIO_Port, row_SR_SER_Pin, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2101      	movs	r1, #1
 8001372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001376:	f002 f8a9 	bl	80034cc <HAL_GPIO_WritePin>
	  }

	  /*
	   * Shift each LED value  into the column shift registers
	   */
	  for(uint8_t bit = 0; bit < 8; bit ++) {
 800137a:	2300      	movs	r3, #0
 800137c:	f887 319a 	strb.w	r3, [r7, #410]	@ 0x19a
 8001380:	e0c6      	b.n	8001510 <main+0x3a8>
 8001382:	bf00      	nop
 8001384:	20000270 	.word	0x20000270
 8001388:	08008878 	.word	0x08008878
 800138c:	20000284 	.word	0x20000284
 8001390:	48000800 	.word	0x48000800
 8001394:	48000400 	.word	0x48000400
 8001398:	080088bc 	.word	0x080088bc
 800139c:	0800893c 	.word	0x0800893c
 80013a0:	080089bc 	.word	0x080089bc
		  // Set serial output to each shift register
		  HAL_GPIO_WritePin(col_SR_SER0_GPIO_Port, col_SR_SER0_Pin, (current_frame[row][0] >> bit) & 0x01);
 80013a4:	f897 21a7 	ldrb.w	r2, [r7, #423]	@ 0x1a7
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 80013bc:	fa42 f303 	asr.w	r3, r2, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ce:	4887      	ldr	r0, [pc, #540]	@ (80015ec <main+0x484>)
 80013d0:	f002 f87c 	bl	80034cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(col_SR_SER1_GPIO_Port, col_SR_SER1_Pin, (current_frame[row][1] >> bit) & 0x01);
 80013d4:	f897 21a7 	ldrb.w	r2, [r7, #423]	@ 0x1a7
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80013e2:	4413      	add	r3, r2
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	461a      	mov	r2, r3
 80013e8:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 80013ec:	fa42 f303 	asr.w	r3, r2, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	2120      	movs	r1, #32
 80013fc:	487b      	ldr	r0, [pc, #492]	@ (80015ec <main+0x484>)
 80013fe:	f002 f865 	bl	80034cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(col_SR_SER2_GPIO_Port, col_SR_SER2_Pin, (current_frame[row][2] >> bit) & 0x01);
 8001402:	f897 21a7 	ldrb.w	r2, [r7, #423]	@ 0x1a7
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8001410:	4413      	add	r3, r2
 8001412:	789b      	ldrb	r3, [r3, #2]
 8001414:	461a      	mov	r2, r3
 8001416:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 800141a:	fa42 f303 	asr.w	r3, r2, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800142c:	486f      	ldr	r0, [pc, #444]	@ (80015ec <main+0x484>)
 800142e:	f002 f84d 	bl	80034cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(col_SR_SER3_GPIO_Port, col_SR_SER3_Pin, (current_frame[row][3] >> bit) & 0x01);
 8001432:	f897 21a7 	ldrb.w	r2, [r7, #423]	@ 0x1a7
 8001436:	4613      	mov	r3, r2
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8001440:	4413      	add	r3, r2
 8001442:	78db      	ldrb	r3, [r3, #3]
 8001444:	461a      	mov	r2, r3
 8001446:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 800144a:	fa42 f303 	asr.w	r3, r2, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	2110      	movs	r1, #16
 800145a:	4864      	ldr	r0, [pc, #400]	@ (80015ec <main+0x484>)
 800145c:	f002 f836 	bl	80034cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(col_SR_SER4_GPIO_Port, col_SR_SER4_Pin, (current_frame[row][4] >> bit) & 0x01);
 8001460:	f897 21a7 	ldrb.w	r2, [r7, #423]	@ 0x1a7
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800146e:	4413      	add	r3, r2
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	461a      	mov	r2, r3
 8001474:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 8001478:	fa42 f303 	asr.w	r3, r2, r3
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800148a:	4858      	ldr	r0, [pc, #352]	@ (80015ec <main+0x484>)
 800148c:	f002 f81e 	bl	80034cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(col_SR_SER5_GPIO_Port, col_SR_SER5_Pin, (current_frame[row][5] >> bit) & 0x01);
 8001490:	f897 21a7 	ldrb.w	r2, [r7, #423]	@ 0x1a7
 8001494:	4613      	mov	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	1a9b      	subs	r3, r3, r2
 800149a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800149e:	4413      	add	r3, r2
 80014a0:	795b      	ldrb	r3, [r3, #5]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 80014a8:	fa42 f303 	asr.w	r3, r2, r3
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ba:	484c      	ldr	r0, [pc, #304]	@ (80015ec <main+0x484>)
 80014bc:	f002 f806 	bl	80034cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(col_SR_SER6_GPIO_Port, col_SR_SER6_Pin, (current_frame[row][6] >> bit) & 0x01);
 80014c0:	f897 21a7 	ldrb.w	r2, [r7, #423]	@ 0x1a7
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80014ce:	4413      	add	r3, r2
 80014d0:	799b      	ldrb	r3, [r3, #6]
 80014d2:	461a      	mov	r2, r3
 80014d4:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 80014d8:	fa42 f303 	asr.w	r3, r2, r3
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	2102      	movs	r1, #2
 80014e8:	4840      	ldr	r0, [pc, #256]	@ (80015ec <main+0x484>)
 80014ea:	f001 ffef 	bl	80034cc <HAL_GPIO_WritePin>

		  // Increment shift register storage location
		  HAL_GPIO_WritePin(col_SR_SRCLK_GPIO_Port, col_SR_SRCLK_Pin, 1);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f4:	483d      	ldr	r0, [pc, #244]	@ (80015ec <main+0x484>)
 80014f6:	f001 ffe9 	bl	80034cc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(col_SR_SRCLK_GPIO_Port, col_SR_SRCLK_Pin, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001500:	483a      	ldr	r0, [pc, #232]	@ (80015ec <main+0x484>)
 8001502:	f001 ffe3 	bl	80034cc <HAL_GPIO_WritePin>
	  for(uint8_t bit = 0; bit < 8; bit ++) {
 8001506:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 800150a:	3301      	adds	r3, #1
 800150c:	f887 319a 	strb.w	r3, [r7, #410]	@ 0x19a
 8001510:	f897 319a 	ldrb.w	r3, [r7, #410]	@ 0x19a
 8001514:	2b07      	cmp	r3, #7
 8001516:	f67f af45 	bls.w	80013a4 <main+0x23c>
	  }
	  // Disable row so output is off while transitioning to the next row
	  HAL_GPIO_WritePin(col_SR_nOE_GPIO_Port, col_SR_nOE_Pin, 1);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001524:	f001 ffd2 	bl	80034cc <HAL_GPIO_WritePin>

	  // Latch shift registers
	  HAL_GPIO_WritePin(col_SR_RCLK_GPIO_Port, col_SR_RCLK_Pin, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001532:	f001 ffcb 	bl	80034cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(col_SR_RCLK_GPIO_Port, col_SR_RCLK_Pin, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800153c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001540:	f001 ffc4 	bl	80034cc <HAL_GPIO_WritePin>

	  // Increment row shift registers
	  HAL_GPIO_WritePin(row_SR_SRCLK_GPIO_Port, row_SR_SRCLK_Pin, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2104      	movs	r1, #4
 8001548:	4829      	ldr	r0, [pc, #164]	@ (80015f0 <main+0x488>)
 800154a:	f001 ffbf 	bl	80034cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(row_SR_RCLK_GPIO_Port, row_SR_RCLK_Pin, 1);
 800154e:	2201      	movs	r2, #1
 8001550:	2108      	movs	r1, #8
 8001552:	4827      	ldr	r0, [pc, #156]	@ (80015f0 <main+0x488>)
 8001554:	f001 ffba 	bl	80034cc <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(row_SR_SRCLK_GPIO_Port, row_SR_SRCLK_Pin, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2104      	movs	r1, #4
 800155c:	4824      	ldr	r0, [pc, #144]	@ (80015f0 <main+0x488>)
 800155e:	f001 ffb5 	bl	80034cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(row_SR_RCLK_GPIO_Port, row_SR_RCLK_Pin, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2108      	movs	r1, #8
 8001566:	4822      	ldr	r0, [pc, #136]	@ (80015f0 <main+0x488>)
 8001568:	f001 ffb0 	bl	80034cc <HAL_GPIO_WritePin>

	  // Enable row
	  HAL_GPIO_WritePin(col_SR_nOE_GPIO_Port, col_SR_nOE_Pin, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001576:	f001 ffa9 	bl	80034cc <HAL_GPIO_WritePin>


	  /*
	   *  Enter config mode if button pressed
	   */
	  if(BSP_PB_GetState(BUTTON_USER) == BUTTON_PRESSED) {
 800157a:	2000      	movs	r0, #0
 800157c:	f000 fb54 	bl	8001c28 <BSP_PB_GetState>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	f47f aed5 	bne.w	8001332 <main+0x1ca>
		  // Wait for button to be released
		  HAL_Delay(50); // De-bounce
 8001588:	2032      	movs	r0, #50	@ 0x32
 800158a:	f000 fcc3 	bl	8001f14 <HAL_Delay>
		  BSP_LED_On(LED_GREEN);
 800158e:	2000      	movs	r0, #0
 8001590:	f000 fac6 	bl	8001b20 <BSP_LED_On>
		  HAL_GPIO_WritePin(col_SR_nOE_GPIO_Port, col_SR_nOE_Pin, 1);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800159a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800159e:	f001 ff95 	bl	80034cc <HAL_GPIO_WritePin>
		  printf("Entering configuration mode\n\r");
 80015a2:	4814      	ldr	r0, [pc, #80]	@ (80015f4 <main+0x48c>)
 80015a4:	f005 f9e4 	bl	8006970 <iprintf>
		  while(BSP_PB_GetState(BUTTON_USER) == BUTTON_PRESSED);
 80015a8:	bf00      	nop
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 fb3c 	bl	8001c28 <BSP_PB_GetState>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d0f9      	beq.n	80015aa <main+0x442>
		  HAL_Delay(50); // De-bounce
 80015b6:	2032      	movs	r0, #50	@ 0x32
 80015b8:	f000 fcac 	bl	8001f14 <HAL_Delay>

		  // Increment frame
		  if(frame_index < FRAME_ARRAY_COUNT - 1 ) {
 80015bc:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d805      	bhi.n	80015d0 <main+0x468>
			  frame_index ++;
 80015c4:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 80015c8:	3301      	adds	r3, #1
 80015ca:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 80015ce:	e002      	b.n	80015d6 <main+0x46e>
		  } else {
			  frame_index = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
		  }

		  next_frame = frame_array[frame_index];
 80015d6:	f897 219b 	ldrb.w	r2, [r7, #411]	@ 0x19b
 80015da:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80015de:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80015e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015e6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	  if(row >= ROW_COUNT - 1) {
 80015ea:	e6a2      	b.n	8001332 <main+0x1ca>
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48000800 	.word	0x48000800
 80015f4:	0800889c 	.word	0x0800889c

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	@ 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0318 	add.w	r3, r7, #24
 8001602:	2238      	movs	r2, #56	@ 0x38
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f005 fa07 	bl	8006a1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800161a:	2000      	movs	r0, #0
 800161c:	f001 ff6e 	bl	80034fc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001628:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800162a:	2302      	movs	r3, #2
 800162c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800162e:	2303      	movs	r3, #3
 8001630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001632:	2306      	movs	r3, #6
 8001634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001636:	2355      	movs	r3, #85	@ 0x55
 8001638:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800163e:	2302      	movs	r3, #2
 8001640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001642:	2302      	movs	r3, #2
 8001644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	4618      	mov	r0, r3
 800164c:	f002 f80a 	bl	8003664 <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001656:	f000 f818 	bl	800168a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165a:	230f      	movs	r3, #15
 800165c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800165e:	2303      	movs	r3, #3
 8001660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2104      	movs	r1, #4
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fb08 	bl	8003c88 <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800167e:	f000 f804 	bl	800168a <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3750      	adds	r7, #80	@ 0x50
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168e:	b672      	cpsid	i
}
 8001690:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001692:	bf00      	nop
 8001694:	e7fd      	b.n	8001692 <Error_Handler+0x8>
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_MspInit+0x44>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a2:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <HAL_MspInit+0x44>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <HAL_MspInit+0x44>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <HAL_MspInit+0x44>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <HAL_MspInit+0x44>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_MspInit+0x44>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016ce:	f001 ffb9 	bl	8003644 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <NMI_Handler+0x4>

080016e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <MemManage_Handler+0x4>

080016f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	bf00      	nop
 8001706:	e7fd      	b.n	8001704 <UsageFault_Handler+0x4>

08001708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001736:	f000 fbcf 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}

0800173e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001742:	2000      	movs	r0, #0
 8001744:	f000 fa86 	bl	8001c54 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_kill>:

int _kill(int pid, int sig)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001766:	f005 f9ab 	bl	8006ac0 <__errno>
 800176a:	4603      	mov	r3, r0
 800176c:	2216      	movs	r2, #22
 800176e:	601a      	str	r2, [r3, #0]
  return -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_exit>:

void _exit (int status)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe7 	bl	800175c <_kill>
  while (1) {}    /* Make sure we hang here */
 800178e:	bf00      	nop
 8001790:	e7fd      	b.n	800178e <_exit+0x12>

08001792 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e00a      	b.n	80017ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017a4:	f3af 8000 	nop.w
 80017a8:	4601      	mov	r1, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	60ba      	str	r2, [r7, #8]
 80017b0:	b2ca      	uxtb	r2, r1
 80017b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3301      	adds	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbf0      	blt.n	80017a4 <_read+0x12>
  }

  return len;
 80017c2:	687b      	ldr	r3, [r7, #4]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e009      	b.n	80017f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	60ba      	str	r2, [r7, #8]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fab4 	bl	8001d54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dbf1      	blt.n	80017de <_write+0x12>
  }
  return len;
 80017fa:	687b      	ldr	r3, [r7, #4]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_close>:

int _close(int file)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800180c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800182c:	605a      	str	r2, [r3, #4]
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_isatty>:

int _isatty(int file)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	@ (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	@ (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f005 f910 	bl	8006ac0 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2001c000 	.word	0x2001c000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20000280 	.word	0x20000280
 80018d4:	200004c0 	.word	0x200004c0

080018d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	@ 0x28
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001920:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <MX_TIM3_Init+0xb0>)
 8001922:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <MX_TIM3_Init+0xb4>)
 8001924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <MX_TIM3_Init+0xb0>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_TIM3_Init+0xb0>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2361;
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <MX_TIM3_Init+0xb0>)
 8001934:	f640 1239 	movw	r2, #2361	@ 0x939
 8001938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_TIM3_Init+0xb0>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_TIM3_Init+0xb0>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001946:	4819      	ldr	r0, [pc, #100]	@ (80019ac <MX_TIM3_Init+0xb0>)
 8001948:	f002 fdf6 	bl	8004538 <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001952:	f7ff fe9a 	bl	800168a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	4811      	ldr	r0, [pc, #68]	@ (80019ac <MX_TIM3_Init+0xb0>)
 8001966:	f003 fc59 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001970:	f7ff fe8b 	bl	800168a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001974:	2360      	movs	r3, #96	@ 0x60
 8001976:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1180;
 8001978:	f240 439c 	movw	r3, #1180	@ 0x49c
 800197c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	4807      	ldr	r0, [pc, #28]	@ (80019ac <MX_TIM3_Init+0xb0>)
 800198e:	f002 ff37 	bl	8004800 <HAL_TIM_PWM_ConfigChannel>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001998:	f7ff fe77 	bl	800168a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800199c:	4803      	ldr	r0, [pc, #12]	@ (80019ac <MX_TIM3_Init+0xb0>)
 800199e:	f000 f829 	bl	80019f4 <HAL_TIM_MspPostInit>

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	@ 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000284 	.word	0x20000284
 80019b0:	40000400 	.word	0x40000400

080019b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_TIM_PWM_MspInit+0x38>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10b      	bne.n	80019de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40021000 	.word	0x40021000

080019f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a11      	ldr	r2, [pc, #68]	@ (8001a58 <HAL_TIM_MspPostInit+0x64>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d11c      	bne.n	8001a50 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_TIM_MspPostInit+0x68>)
 8001a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1a:	4a10      	ldr	r2, [pc, #64]	@ (8001a5c <HAL_TIM_MspPostInit+0x68>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_TIM_MspPostInit+0x68>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a2e:	2340      	movs	r3, #64	@ 0x40
 8001a30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a4c:	f001 fba4 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40021000 	.word	0x40021000

08001a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a60:	480d      	ldr	r0, [pc, #52]	@ (8001a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a62:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a64:	f7ff ff38 	bl	80018d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a68:	480c      	ldr	r0, [pc, #48]	@ (8001a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a6a:	490d      	ldr	r1, [pc, #52]	@ (8001aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <LoopForever+0xe>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a80:	4c0a      	ldr	r4, [pc, #40]	@ (8001aac <LoopForever+0x16>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8e:	f005 f81d 	bl	8006acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a92:	f7ff fb69 	bl	8001168 <main>

08001a96 <LoopForever>:

LoopForever:
    b LoopForever
 8001a96:	e7fe      	b.n	8001a96 <LoopForever>
  ldr   r0, =_estack
 8001a98:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001aa4:	08008df0 	.word	0x08008df0
  ldr r2, =_sbss
 8001aa8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001aac:	200004c0 	.word	0x200004c0

08001ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ab0:	e7fe      	b.n	8001ab0 <ADC1_2_IRQHandler>
	...

08001ab4 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8001abe:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <BSP_LED_Init+0x64>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac2:	4a15      	ldr	r2, [pc, #84]	@ (8001b18 <BSP_LED_Init+0x64>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aca:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <BSP_LED_Init+0x64>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b1c <BSP_LED_Init+0x68>)
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	f107 020c 	add.w	r2, r7, #12
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fb4f 	bl	8003198 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4a07      	ldr	r2, [pc, #28]	@ (8001b1c <BSP_LED_Init+0x68>)
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	2120      	movs	r1, #32
 8001b04:	2200      	movs	r2, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 fce0 	bl	80034cc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	20000004 	.word	0x20000004

08001b20 <BSP_LED_On>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	4a06      	ldr	r2, [pc, #24]	@ (8001b48 <BSP_LED_On+0x28>)
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	2120      	movs	r1, #32
 8001b34:	2201      	movs	r2, #1
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 fcc8 	bl	80034cc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000004 	.word	0x20000004

08001b4c <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	460a      	mov	r2, r1
 8001b56:	71fb      	strb	r3, [r7, #7]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <BSP_PB_Init+0xc4>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b60:	4a2b      	ldr	r2, [pc, #172]	@ (8001c10 <BSP_PB_Init+0xc4>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b68:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <BSP_PB_Init+0xc4>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001b74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b78:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001b82:	79bb      	ldrb	r3, [r7, #6]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10c      	bne.n	8001ba2 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	@ (8001c14 <BSP_PB_Init+0xc8>)
 8001b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b94:	f107 020c 	add.w	r2, r7, #12
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f001 fafc 	bl	8003198 <HAL_GPIO_Init>
 8001ba0:	e031      	b.n	8001c06 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001ba2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ba6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4a1a      	ldr	r2, [pc, #104]	@ (8001c14 <BSP_PB_Init+0xc8>)
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	f107 020c 	add.w	r2, r7, #12
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 faee 	bl	8003198 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4a15      	ldr	r2, [pc, #84]	@ (8001c18 <BSP_PB_Init+0xcc>)
 8001bc2:	441a      	add	r2, r3
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4915      	ldr	r1, [pc, #84]	@ (8001c1c <BSP_PB_Init+0xd0>)
 8001bc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f001 fa9e 	bl	8003110 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c18 <BSP_PB_Init+0xcc>)
 8001bda:	1898      	adds	r0, r3, r2
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <BSP_PB_Init+0xd4>)
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	461a      	mov	r2, r3
 8001be6:	2100      	movs	r1, #0
 8001be8:	f001 fa75 	bl	80030d6 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001bec:	2028      	movs	r0, #40	@ 0x28
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <BSP_PB_Init+0xd8>)
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f001 fa38 	bl	800306e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001bfe:	2328      	movs	r3, #40	@ 0x28
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 fa4e 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3720      	adds	r7, #32
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40021000 	.word	0x40021000
 8001c14:	20000008 	.word	0x20000008
 8001c18:	200002d0 	.word	0x200002d0
 8001c1c:	08008a54 	.word	0x08008a54
 8001c20:	20000010 	.word	0x20000010
 8001c24:	20000014 	.word	0x20000014

08001c28 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	4a06      	ldr	r2, [pc, #24]	@ (8001c50 <BSP_PB_GetState+0x28>)
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f001 fc2b 	bl	800349c <HAL_GPIO_ReadPin>
 8001c46:	4603      	mov	r3, r0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20000008 	.word	0x20000008

08001c54 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <BSP_PB_IRQHandler+0x20>)
 8001c64:	4413      	add	r3, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f001 fa66 	bl	8003138 <HAL_EXTI_IRQHandler>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200002d0 	.word	0x200002d0

08001c78 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d903      	bls.n	8001cae <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ca6:	f06f 0301 	mvn.w	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	e018      	b.n	8001ce0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2294      	movs	r2, #148	@ 0x94
 8001cb2:	fb02 f303 	mul.w	r3, r2, r3
 8001cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <BSP_COM_Init+0x5c>)
 8001cb8:	4413      	add	r3, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f86e 	bl	8001d9c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2294      	movs	r2, #148	@ 0x94
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <BSP_COM_Init+0x5c>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	6839      	ldr	r1, [r7, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f80e 	bl	8001cf0 <MX_LPUART1_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001cda:	f06f 0303 	mvn.w	r3, #3
 8001cde:	e000      	b.n	8001ce2 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200002d8 	.word	0x200002d8

08001cf0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <MX_LPUART1_Init+0x60>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	220c      	movs	r2, #12
 8001d0e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	895b      	ldrh	r3, [r3, #10]
 8001d14:	461a      	mov	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	891b      	ldrh	r3, [r3, #8]
 8001d26:	461a      	mov	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	899b      	ldrh	r3, [r3, #12]
 8001d30:	461a      	mov	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d3c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f003 fafa 	bl	8005338 <HAL_UART_Init>
 8001d44:	4603      	mov	r3, r0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000000c 	.word	0x2000000c

08001d54 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <__io_putchar+0x30>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	2394      	movs	r3, #148	@ 0x94
 8001d64:	fb02 f303 	mul.w	r3, r2, r3
 8001d68:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <__io_putchar+0x34>)
 8001d6a:	1898      	adds	r0, r3, r2
 8001d6c:	1d39      	adds	r1, r7, #4
 8001d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d72:	2201      	movs	r2, #1
 8001d74:	f003 fb3a 	bl	80053ec <HAL_UART_Transmit>
  return ch;
 8001d78:	687b      	ldr	r3, [r7, #4]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000036c 	.word	0x2000036c
 8001d88:	200002d8 	.word	0x200002d8

08001d8c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff ff71 	bl	8001c78 <BSP_PB_Callback>
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001da4:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <COM1_MspInit+0x94>)
 8001da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da8:	4a21      	ldr	r2, [pc, #132]	@ (8001e30 <COM1_MspInit+0x94>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001db0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e30 <COM1_MspInit+0x94>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <COM1_MspInit+0x94>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e30 <COM1_MspInit+0x94>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <COM1_MspInit+0x94>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001dd4:	4b16      	ldr	r3, [pc, #88]	@ (8001e30 <COM1_MspInit+0x94>)
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd8:	4a15      	ldr	r2, [pc, #84]	@ (8001e30 <COM1_MspInit+0x94>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001de0:	4b13      	ldr	r3, [pc, #76]	@ (8001e30 <COM1_MspInit+0x94>)
 8001de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001dec:	2304      	movs	r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001df4:	2302      	movs	r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001dfc:	230c      	movs	r3, #12
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e0a:	f001 f9c5 	bl	8003198 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001e16:	230c      	movs	r3, #12
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e24:	f001 f9b8 	bl	8003198 <HAL_GPIO_Init>
}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	@ 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000

08001e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f001 f90a 	bl	8003058 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e44:	2000      	movs	r0, #0
 8001e46:	f000 f80d 	bl	8001e64 <HAL_InitTick>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	71fb      	strb	r3, [r7, #7]
 8001e54:	e001      	b.n	8001e5a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e56:	f7ff fc1f 	bl	8001698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e5a:	79fb      	ldrb	r3, [r7, #7]

}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e70:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <HAL_InitTick+0x68>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d022      	beq.n	8001ebe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e78:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <HAL_InitTick+0x6c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <HAL_InitTick+0x68>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e84:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 f916 	bl	80030be <HAL_SYSTICK_Config>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10f      	bne.n	8001eb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b0f      	cmp	r3, #15
 8001e9c:	d809      	bhi.n	8001eb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea6:	f001 f8e2 	bl	800306e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <HAL_InitTick+0x70>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	e007      	b.n	8001ec2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	73fb      	strb	r3, [r7, #15]
 8001eb6:	e004      	b.n	8001ec2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e001      	b.n	8001ec2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	2000001c 	.word	0x2000001c
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000018 	.word	0x20000018

08001ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_IncTick+0x1c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_IncTick+0x20>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4a03      	ldr	r2, [pc, #12]	@ (8001ef4 <HAL_IncTick+0x1c>)
 8001ee8:	6013      	str	r3, [r2, #0]
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	20000370 	.word	0x20000370
 8001ef8:	2000001c 	.word	0x2000001c

08001efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return uwTick;
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <HAL_GetTick+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000370 	.word	0x20000370

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff ffee 	bl	8001efc <HAL_GetTick>
 8001f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f2c:	d004      	beq.n	8001f38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <HAL_Delay+0x40>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4413      	add	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f38:	bf00      	nop
 8001f3a:	f7ff ffdf 	bl	8001efc <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d8f7      	bhi.n	8001f3a <HAL_Delay+0x26>
  {
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	2000001c 	.word	0x2000001c

08001f58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3360      	adds	r3, #96	@ 0x60
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <LL_ADC_SetOffset+0x44>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	03fff000 	.word	0x03fff000

08002008 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3360      	adds	r3, #96	@ 0x60
 8002016:	461a      	mov	r2, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3360      	adds	r3, #96	@ 0x60
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	431a      	orrs	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800206a:	b480      	push	{r7}
 800206c:	b087      	sub	sp, #28
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3360      	adds	r3, #96	@ 0x60
 800207a:	461a      	mov	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	431a      	orrs	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3360      	adds	r3, #96	@ 0x60
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	615a      	str	r2, [r3, #20]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3330      	adds	r3, #48	@ 0x30
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	211f      	movs	r1, #31
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	f003 011f 	and.w	r1, r3, #31
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	431a      	orrs	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3314      	adds	r3, #20
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	0e5b      	lsrs	r3, r3, #25
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0d1b      	lsrs	r3, r3, #20
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2107      	movs	r1, #7
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	401a      	ands	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	0d1b      	lsrs	r3, r3, #20
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0318 	and.w	r3, r3, #24
 80021ce:	4908      	ldr	r1, [pc, #32]	@ (80021f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021d0:	40d9      	lsrs	r1, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	400b      	ands	r3, r1
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	431a      	orrs	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	0007ffff 	.word	0x0007ffff

080021f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002204:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6093      	str	r3, [r2, #8]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800222c:	d101      	bne.n	8002232 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002250:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002254:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002278:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800227c:	d101      	bne.n	8002282 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <LL_ADC_IsEnabled+0x18>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <LL_ADC_IsEnabled+0x1a>
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d101      	bne.n	80022ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d101      	bne.n	80022f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002304:	b590      	push	{r4, r7, lr}
 8002306:	b089      	sub	sp, #36	@ 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002310:	2300      	movs	r3, #0
 8002312:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e19b      	b.n	8002656 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d109      	bne.n	8002340 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fe fe41 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff67 	bl	8002218 <LL_ADC_IsDeepPowerDownEnabled>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff4d 	bl	80021f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff82 	bl	8002268 <LL_ADC_IsInternalRegulatorEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d115      	bne.n	8002396 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff66 	bl	8002240 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002374:	4b97      	ldr	r3, [pc, #604]	@ (80025d4 <HAL_ADC_Init+0x2d0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	099b      	lsrs	r3, r3, #6
 800237a:	4a97      	ldr	r2, [pc, #604]	@ (80025d8 <HAL_ADC_Init+0x2d4>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002388:	e002      	b.n	8002390 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3b01      	subs	r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f9      	bne.n	800238a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff64 	bl	8002268 <LL_ADC_IsInternalRegulatorEnabled>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023aa:	f043 0210 	orr.w	r2, r3, #16
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b6:	f043 0201 	orr.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff75 	bl	80022b6 <LL_ADC_REG_IsConversionOngoing>
 80023cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 8134 	bne.w	8002644 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f040 8130 	bne.w	8002644 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023ec:	f043 0202 	orr.w	r2, r3, #2
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff49 	bl	8002290 <LL_ADC_IsEnabled>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d137      	bne.n	8002474 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800240c:	d004      	beq.n	8002418 <HAL_ADC_Init+0x114>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a72      	ldr	r2, [pc, #456]	@ (80025dc <HAL_ADC_Init+0x2d8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d10f      	bne.n	8002438 <HAL_ADC_Init+0x134>
 8002418:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800241c:	f7ff ff38 	bl	8002290 <LL_ADC_IsEnabled>
 8002420:	4604      	mov	r4, r0
 8002422:	486e      	ldr	r0, [pc, #440]	@ (80025dc <HAL_ADC_Init+0x2d8>)
 8002424:	f7ff ff34 	bl	8002290 <LL_ADC_IsEnabled>
 8002428:	4603      	mov	r3, r0
 800242a:	4323      	orrs	r3, r4
 800242c:	2b00      	cmp	r3, #0
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e008      	b.n	800244a <HAL_ADC_Init+0x146>
 8002438:	4869      	ldr	r0, [pc, #420]	@ (80025e0 <HAL_ADC_Init+0x2dc>)
 800243a:	f7ff ff29 	bl	8002290 <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002456:	d004      	beq.n	8002462 <HAL_ADC_Init+0x15e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a5f      	ldr	r2, [pc, #380]	@ (80025dc <HAL_ADC_Init+0x2d8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_ADC_Init+0x162>
 8002462:	4a60      	ldr	r2, [pc, #384]	@ (80025e4 <HAL_ADC_Init+0x2e0>)
 8002464:	e000      	b.n	8002468 <HAL_ADC_Init+0x164>
 8002466:	4a60      	ldr	r2, [pc, #384]	@ (80025e8 <HAL_ADC_Init+0x2e4>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f7ff fd72 	bl	8001f58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7f5b      	ldrb	r3, [r3, #29]
 8002478:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800247e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002484:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800248a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002492:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d106      	bne.n	80024b0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a6:	3b01      	subs	r3, #1
 80024a8:	045b      	lsls	r3, r3, #17
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4b46      	ldr	r3, [pc, #280]	@ (80025ec <HAL_ADC_Init+0x2e8>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	69b9      	ldr	r1, [r7, #24]
 80024dc:	430b      	orrs	r3, r1
 80024de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff feee 	bl	80022dc <LL_ADC_INJ_IsConversionOngoing>
 8002500:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d17b      	bne.n	8002600 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d178      	bne.n	8002600 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002512:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800251a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800252a:	f023 0302 	bic.w	r3, r3, #2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	430b      	orrs	r3, r1
 8002536:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d017      	beq.n	8002570 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800254e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002558:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800255c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6911      	ldr	r1, [r2, #16]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	430b      	orrs	r3, r1
 800256a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800256e:	e013      	b.n	8002598 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800257e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002594:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d126      	bne.n	80025f0 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025b8:	4311      	orrs	r1, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025be:	4311      	orrs	r1, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025c4:	430a      	orrs	r2, r1
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	611a      	str	r2, [r3, #16]
 80025d2:	e015      	b.n	8002600 <HAL_ADC_Init+0x2fc>
 80025d4:	20000000 	.word	0x20000000
 80025d8:	053e2d63 	.word	0x053e2d63
 80025dc:	50000100 	.word	0x50000100
 80025e0:	50000400 	.word	0x50000400
 80025e4:	50000300 	.word	0x50000300
 80025e8:	50000700 	.word	0x50000700
 80025ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10c      	bne.n	8002622 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f023 010f 	bic.w	r1, r3, #15
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	1e5a      	subs	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002620:	e007      	b.n	8002632 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020f 	bic.w	r2, r2, #15
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002642:	e007      	b.n	8002654 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	f043 0210 	orr.w	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002654:	7ffb      	ldrb	r3, [r7, #31]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	@ 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	bf00      	nop

08002660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0b6      	sub	sp, #216	@ 0xd8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x24>
 800267e:	2302      	movs	r3, #2
 8002680:	f000 bc04 	b.w	8002e8c <HAL_ADC_ConfigChannel+0x82c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fe10 	bl	80022b6 <LL_ADC_REG_IsConversionOngoing>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	f040 83e8 	bne.w	8002e6e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f7ff fd26 	bl	80020fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fdfe 	bl	80022b6 <LL_ADC_REG_IsConversionOngoing>
 80026ba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fe0a 	bl	80022dc <LL_ADC_INJ_IsConversionOngoing>
 80026c8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f040 81d9 	bne.w	8002a88 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 81d4 	bne.w	8002a88 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026e8:	d10f      	bne.n	800270a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7ff fd2d 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fce7 	bl	80020d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002708:	e00e      	b.n	8002728 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	461a      	mov	r2, r3
 8002718:	f7ff fd1c 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fcd7 	bl	80020d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b04      	cmp	r3, #4
 8002748:	d022      	beq.n	8002790 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6919      	ldr	r1, [r3, #16]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800275a:	f7ff fc31 	bl	8001fc0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	461a      	mov	r2, r3
 800276c:	f7ff fc7d 	bl	800206a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x126>
 8002780:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002784:	e000      	b.n	8002788 <HAL_ADC_ConfigChannel+0x128>
 8002786:	2300      	movs	r3, #0
 8002788:	461a      	mov	r2, r3
 800278a:	f7ff fc89 	bl	80020a0 <LL_ADC_SetOffsetSaturation>
 800278e:	e17b      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fc36 	bl	8002008 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x15c>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fc2b 	bl	8002008 <LL_ADC_GetOffsetChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	f003 021f 	and.w	r2, r3, #31
 80027ba:	e01e      	b.n	80027fa <HAL_ADC_ConfigChannel+0x19a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2100      	movs	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fc20 	bl	8002008 <LL_ADC_GetOffsetChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80027ea:	2320      	movs	r3, #32
 80027ec:	e004      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80027ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002802:	2b00      	cmp	r3, #0
 8002804:	d105      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x1b2>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0e9b      	lsrs	r3, r3, #26
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	e018      	b.n	8002844 <HAL_ADC_ConfigChannel+0x1e4>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800282a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800282e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002836:	2320      	movs	r3, #32
 8002838:	e004      	b.n	8002844 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800283a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002844:	429a      	cmp	r2, r3
 8002846:	d106      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fbef 	bl	8002034 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fbd3 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x222>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff fbc8 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002878:	4603      	mov	r3, r0
 800287a:	0e9b      	lsrs	r3, r3, #26
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	e01e      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x260>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fbbd 	bl	8002008 <LL_ADC_GetOffsetChannel>
 800288e:	4603      	mov	r3, r0
 8002890:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80028a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80028b0:	2320      	movs	r3, #32
 80028b2:	e004      	b.n	80028be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80028b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x278>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	0e9b      	lsrs	r3, r3, #26
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	e018      	b.n	800290a <HAL_ADC_ConfigChannel+0x2aa>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028e4:	fa93 f3a3 	rbit	r3, r3
 80028e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80028fc:	2320      	movs	r3, #32
 80028fe:	e004      	b.n	800290a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002900:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800290a:	429a      	cmp	r2, r3
 800290c:	d106      	bne.n	800291c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2200      	movs	r2, #0
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fb8c 	bl	8002034 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2102      	movs	r1, #2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fb70 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x2e8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2102      	movs	r1, #2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fb65 	bl	8002008 <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	f003 021f 	and.w	r2, r3, #31
 8002946:	e01e      	b.n	8002986 <HAL_ADC_ConfigChannel+0x326>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2102      	movs	r1, #2
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fb5a 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002966:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800296a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800296e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e004      	b.n	8002984 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800297a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_ConfigChannel+0x33e>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	e016      	b.n	80029cc <HAL_ADC_ConfigChannel+0x36c>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e004      	b.n	80029cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80029c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d106      	bne.n	80029de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fb2b 	bl	8002034 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2103      	movs	r1, #3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fb0f 	bl	8002008 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x3aa>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2103      	movs	r1, #3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fb04 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	e017      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x3da>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2103      	movs	r1, #3
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff faf9 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a24:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e003      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d105      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x3f2>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	e011      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x416>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d106      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2103      	movs	r1, #3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fad6 	bl	8002034 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fbff 	bl	8002290 <LL_ADC_IsEnabled>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f040 813d 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6819      	ldr	r1, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f7ff fb80 	bl	80021ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4aa2      	ldr	r2, [pc, #648]	@ (8002d3c <HAL_ADC_ConfigChannel+0x6dc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f040 812e 	bne.w	8002d14 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x480>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0e9b      	lsrs	r3, r3, #26
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e019      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x4b4>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002af0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e003      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002afc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2b09      	cmp	r3, #9
 8002b0c:	bf94      	ite	ls
 8002b0e:	2301      	movls	r3, #1
 8002b10:	2300      	movhi	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d079      	beq.n	8002c0c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x4d4>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	069b      	lsls	r3, r3, #26
 8002b2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b32:	e015      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x500>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	069b      	lsls	r3, r3, #26
 8002b5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x520>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2101      	movs	r1, #1
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	e017      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x550>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b90:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	ea42 0103 	orr.w	r1, r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x576>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	051b      	lsls	r3, r3, #20
 8002bd4:	e018      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x5a8>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	e07e      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x5c8>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	3301      	adds	r3, #1
 8002c20:	069b      	lsls	r3, r3, #26
 8002c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c26:	e015      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x5f4>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c38:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e003      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	069b      	lsls	r3, r3, #26
 8002c50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x614>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	3301      	adds	r3, #1
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	e017      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x644>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	61fb      	str	r3, [r7, #28]
  return result;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	ea42 0103 	orr.w	r1, r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x670>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3b1e      	subs	r3, #30
 8002cc8:	051b      	lsls	r3, r3, #20
 8002cca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cce:	e01b      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x6a8>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	613b      	str	r3, [r7, #16]
  return result;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	e003      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f003 021f 	and.w	r2, r3, #31
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1e      	subs	r3, #30
 8002d02:	051b      	lsls	r3, r3, #20
 8002d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d08:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7ff fa20 	bl	8002154 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <HAL_ADC_ConfigChannel+0x6e0>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80af 	beq.w	8002e80 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_ConfigChannel+0x6d6>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <HAL_ADC_ConfigChannel+0x6e4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10a      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x6ec>
 8002d36:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <HAL_ADC_ConfigChannel+0x6e8>)
 8002d38:	e009      	b.n	8002d4e <HAL_ADC_ConfigChannel+0x6ee>
 8002d3a:	bf00      	nop
 8002d3c:	407f0000 	.word	0x407f0000
 8002d40:	80080000 	.word	0x80080000
 8002d44:	50000100 	.word	0x50000100
 8002d48:	50000300 	.word	0x50000300
 8002d4c:	4b51      	ldr	r3, [pc, #324]	@ (8002e94 <HAL_ADC_ConfigChannel+0x834>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f928 	bl	8001fa4 <LL_ADC_GetCommonPathInternalCh>
 8002d54:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002e98 <HAL_ADC_ConfigChannel+0x838>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_ADC_ConfigChannel+0x70c>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a4d      	ldr	r2, [pc, #308]	@ (8002e9c <HAL_ADC_ConfigChannel+0x83c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d134      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d12e      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d80:	d17e      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_ConfigChannel+0x736>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a43      	ldr	r2, [pc, #268]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x840>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x73a>
 8002d96:	4a43      	ldr	r2, [pc, #268]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x844>)
 8002d98:	e000      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x73c>
 8002d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e94 <HAL_ADC_ConfigChannel+0x834>)
 8002d9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002da4:	4619      	mov	r1, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	f7ff f8e9 	bl	8001f7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dac:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x848>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	4a3e      	ldr	r2, [pc, #248]	@ (8002eac <HAL_ADC_ConfigChannel+0x84c>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dc6:	e002      	b.n	8002dce <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f9      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dd4:	e054      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a35      	ldr	r2, [pc, #212]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x850>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d120      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11a      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002df4:	d144      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dfe:	d004      	beq.n	8002e0a <HAL_ADC_ConfigChannel+0x7aa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a26      	ldr	r2, [pc, #152]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x840>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x7ae>
 8002e0a:	4a26      	ldr	r2, [pc, #152]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x844>)
 8002e0c:	e000      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x7b0>
 8002e0e:	4a21      	ldr	r2, [pc, #132]	@ (8002e94 <HAL_ADC_ConfigChannel+0x834>)
 8002e10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f7ff f8af 	bl	8001f7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e20:	e02e      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a23      	ldr	r2, [pc, #140]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x854>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d129      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d123      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x840>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01e      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e4a:	d004      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x7f6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a13      	ldr	r2, [pc, #76]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x840>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x7fa>
 8002e56:	4a13      	ldr	r2, [pc, #76]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x844>)
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x7fc>
 8002e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002e94 <HAL_ADC_ConfigChannel+0x834>)
 8002e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f7ff f889 	bl	8001f7e <LL_ADC_SetCommonPathInternalCh>
 8002e6c:	e008      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e88:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	37d8      	adds	r7, #216	@ 0xd8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	50000700 	.word	0x50000700
 8002e98:	c3210000 	.word	0xc3210000
 8002e9c:	90c00010 	.word	0x90c00010
 8002ea0:	50000100 	.word	0x50000100
 8002ea4:	50000300 	.word	0x50000300
 8002ea8:	20000000 	.word	0x20000000
 8002eac:	053e2d63 	.word	0x053e2d63
 8002eb0:	c7520000 	.word	0xc7520000
 8002eb4:	cb840000 	.word	0xcb840000

08002eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eea:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	60d3      	str	r3, [r2, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <__NVIC_GetPriorityGrouping+0x18>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 0307 	and.w	r3, r3, #7
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4907      	ldr	r1, [pc, #28]	@ (8002f54 <__NVIC_EnableIRQ+0x38>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	e000e100 	.word	0xe000e100

08002f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	6039      	str	r1, [r7, #0]
 8002f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	db0a      	blt.n	8002f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	490c      	ldr	r1, [pc, #48]	@ (8002fa4 <__NVIC_SetPriority+0x4c>)
 8002f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f76:	0112      	lsls	r2, r2, #4
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f80:	e00a      	b.n	8002f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	4908      	ldr	r1, [pc, #32]	@ (8002fa8 <__NVIC_SetPriority+0x50>)
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	3b04      	subs	r3, #4
 8002f90:	0112      	lsls	r2, r2, #4
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	440b      	add	r3, r1
 8002f96:	761a      	strb	r2, [r3, #24]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000e100 	.word	0xe000e100
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	@ 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f1c3 0307 	rsb	r3, r3, #7
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	bf28      	it	cs
 8002fca:	2304      	movcs	r3, #4
 8002fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d902      	bls.n	8002fdc <NVIC_EncodePriority+0x30>
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3b03      	subs	r3, #3
 8002fda:	e000      	b.n	8002fde <NVIC_EncodePriority+0x32>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	401a      	ands	r2, r3
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffe:	43d9      	mvns	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	4313      	orrs	r3, r2
         );
}
 8003006:	4618      	mov	r0, r3
 8003008:	3724      	adds	r7, #36	@ 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003024:	d301      	bcc.n	800302a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003026:	2301      	movs	r3, #1
 8003028:	e00f      	b.n	800304a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302a:	4a0a      	ldr	r2, [pc, #40]	@ (8003054 <SysTick_Config+0x40>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003032:	210f      	movs	r1, #15
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	f7ff ff8e 	bl	8002f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <SysTick_Config+0x40>)
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003042:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <SysTick_Config+0x40>)
 8003044:	2207      	movs	r2, #7
 8003046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	e000e010 	.word	0xe000e010

08003058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7ff ff29 	bl	8002eb8 <__NVIC_SetPriorityGrouping>
}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	4603      	mov	r3, r0
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800307c:	f7ff ff40 	bl	8002f00 <__NVIC_GetPriorityGrouping>
 8003080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	6978      	ldr	r0, [r7, #20]
 8003088:	f7ff ff90 	bl	8002fac <NVIC_EncodePriority>
 800308c:	4602      	mov	r2, r0
 800308e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff5f 	bl	8002f58 <__NVIC_SetPriority>
}
 800309a:	bf00      	nop
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff33 	bl	8002f1c <__NVIC_EnableIRQ>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffa4 	bl	8003014 <SysTick_Config>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80030d6:	b480      	push	{r7}
 80030d8:	b087      	sub	sp, #28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	460b      	mov	r3, r1
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80030e8:	7afb      	ldrb	r3, [r7, #11]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	605a      	str	r2, [r3, #4]
      break;
 80030f4:	e005      	b.n	8003102 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003100:	bf00      	nop
  }

  return status;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
}
 8003104:	4618      	mov	r0, r3
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e003      	b.n	800312c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2201      	movs	r2, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <HAL_EXTI_IRQHandler+0x5c>)
 8003162:	4413      	add	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4798      	blx	r3
    }
  }
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40010414 	.word	0x40010414

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031a6:	e15a      	b.n	800345e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2101      	movs	r1, #1
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	4013      	ands	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 814c 	beq.w	8003458 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d005      	beq.n	80031d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d130      	bne.n	800323a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	2203      	movs	r2, #3
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800320e:	2201      	movs	r2, #1
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43db      	mvns	r3, r3
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4013      	ands	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 0201 	and.w	r2, r3, #1
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b03      	cmp	r3, #3
 8003244:	d017      	beq.n	8003276 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	2203      	movs	r2, #3
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d123      	bne.n	80032ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	08da      	lsrs	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3208      	adds	r2, #8
 800328a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	691a      	ldr	r2, [r3, #16]
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	08da      	lsrs	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3208      	adds	r2, #8
 80032c4:	6939      	ldr	r1, [r7, #16]
 80032c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0203 	and.w	r2, r3, #3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80a6 	beq.w	8003458 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800330c:	4b5b      	ldr	r3, [pc, #364]	@ (800347c <HAL_GPIO_Init+0x2e4>)
 800330e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003310:	4a5a      	ldr	r2, [pc, #360]	@ (800347c <HAL_GPIO_Init+0x2e4>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6613      	str	r3, [r2, #96]	@ 0x60
 8003318:	4b58      	ldr	r3, [pc, #352]	@ (800347c <HAL_GPIO_Init+0x2e4>)
 800331a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003324:	4a56      	ldr	r2, [pc, #344]	@ (8003480 <HAL_GPIO_Init+0x2e8>)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	3302      	adds	r3, #2
 800332c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	220f      	movs	r2, #15
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800334e:	d01f      	beq.n	8003390 <HAL_GPIO_Init+0x1f8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a4c      	ldr	r2, [pc, #304]	@ (8003484 <HAL_GPIO_Init+0x2ec>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d019      	beq.n	800338c <HAL_GPIO_Init+0x1f4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a4b      	ldr	r2, [pc, #300]	@ (8003488 <HAL_GPIO_Init+0x2f0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_GPIO_Init+0x1f0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a4a      	ldr	r2, [pc, #296]	@ (800348c <HAL_GPIO_Init+0x2f4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00d      	beq.n	8003384 <HAL_GPIO_Init+0x1ec>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a49      	ldr	r2, [pc, #292]	@ (8003490 <HAL_GPIO_Init+0x2f8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <HAL_GPIO_Init+0x1e8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a48      	ldr	r2, [pc, #288]	@ (8003494 <HAL_GPIO_Init+0x2fc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_GPIO_Init+0x1e4>
 8003378:	2305      	movs	r3, #5
 800337a:	e00a      	b.n	8003392 <HAL_GPIO_Init+0x1fa>
 800337c:	2306      	movs	r3, #6
 800337e:	e008      	b.n	8003392 <HAL_GPIO_Init+0x1fa>
 8003380:	2304      	movs	r3, #4
 8003382:	e006      	b.n	8003392 <HAL_GPIO_Init+0x1fa>
 8003384:	2303      	movs	r3, #3
 8003386:	e004      	b.n	8003392 <HAL_GPIO_Init+0x1fa>
 8003388:	2302      	movs	r3, #2
 800338a:	e002      	b.n	8003392 <HAL_GPIO_Init+0x1fa>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_GPIO_Init+0x1fa>
 8003390:	2300      	movs	r3, #0
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	f002 0203 	and.w	r2, r2, #3
 8003398:	0092      	lsls	r2, r2, #2
 800339a:	4093      	lsls	r3, r2
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a2:	4937      	ldr	r1, [pc, #220]	@ (8003480 <HAL_GPIO_Init+0x2e8>)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	3302      	adds	r3, #2
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033b0:	4b39      	ldr	r3, [pc, #228]	@ (8003498 <HAL_GPIO_Init+0x300>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033d4:	4a30      	ldr	r2, [pc, #192]	@ (8003498 <HAL_GPIO_Init+0x300>)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033da:	4b2f      	ldr	r3, [pc, #188]	@ (8003498 <HAL_GPIO_Init+0x300>)
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033fe:	4a26      	ldr	r2, [pc, #152]	@ (8003498 <HAL_GPIO_Init+0x300>)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003404:	4b24      	ldr	r3, [pc, #144]	@ (8003498 <HAL_GPIO_Init+0x300>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	43db      	mvns	r3, r3
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003428:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <HAL_GPIO_Init+0x300>)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800342e:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <HAL_GPIO_Init+0x300>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	43db      	mvns	r3, r3
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4013      	ands	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003452:	4a11      	ldr	r2, [pc, #68]	@ (8003498 <HAL_GPIO_Init+0x300>)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3301      	adds	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	f47f ae9d 	bne.w	80031a8 <HAL_GPIO_Init+0x10>
  }
}
 800346e:	bf00      	nop
 8003470:	bf00      	nop
 8003472:	371c      	adds	r7, #28
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	40021000 	.word	0x40021000
 8003480:	40010000 	.word	0x40010000
 8003484:	48000400 	.word	0x48000400
 8003488:	48000800 	.word	0x48000800
 800348c:	48000c00 	.word	0x48000c00
 8003490:	48001000 	.word	0x48001000
 8003494:	48001400 	.word	0x48001400
 8003498:	40010400 	.word	0x40010400

0800349c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	887b      	ldrh	r3, [r7, #2]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b4:	2301      	movs	r3, #1
 80034b6:	73fb      	strb	r3, [r7, #15]
 80034b8:	e001      	b.n	80034be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ba:	2300      	movs	r3, #0
 80034bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034be:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	807b      	strh	r3, [r7, #2]
 80034d8:	4613      	mov	r3, r2
 80034da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034dc:	787b      	ldrb	r3, [r7, #1]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034e2:	887a      	ldrh	r2, [r7, #2]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034ea:	887a      	ldrh	r2, [r7, #2]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d141      	bne.n	800358e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800350a:	4b4b      	ldr	r3, [pc, #300]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003516:	d131      	bne.n	800357c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003518:	4b47      	ldr	r3, [pc, #284]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800351e:	4a46      	ldr	r2, [pc, #280]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003524:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003528:	4b43      	ldr	r3, [pc, #268]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003530:	4a41      	ldr	r2, [pc, #260]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003536:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003538:	4b40      	ldr	r3, [pc, #256]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2232      	movs	r2, #50	@ 0x32
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	4a3f      	ldr	r2, [pc, #252]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	0c9b      	lsrs	r3, r3, #18
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800354e:	e002      	b.n	8003556 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3b01      	subs	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003556:	4b38      	ldr	r3, [pc, #224]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003562:	d102      	bne.n	800356a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f2      	bne.n	8003550 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800356a:	4b33      	ldr	r3, [pc, #204]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003576:	d158      	bne.n	800362a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e057      	b.n	800362c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800357c:	4b2e      	ldr	r3, [pc, #184]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003582:	4a2d      	ldr	r2, [pc, #180]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800358c:	e04d      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003594:	d141      	bne.n	800361a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003596:	4b28      	ldr	r3, [pc, #160]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a2:	d131      	bne.n	8003608 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035a4:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035aa:	4a23      	ldr	r2, [pc, #140]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035b4:	4b20      	ldr	r3, [pc, #128]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	@ (800363c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2232      	movs	r2, #50	@ 0x32
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003640 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	0c9b      	lsrs	r3, r3, #18
 80035d6:	3301      	adds	r3, #1
 80035d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035da:	e002      	b.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035e2:	4b15      	ldr	r3, [pc, #84]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ee:	d102      	bne.n	80035f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f2      	bne.n	80035dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003602:	d112      	bne.n	800362a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e011      	b.n	800362c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003608:	4b0b      	ldr	r3, [pc, #44]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800360e:	4a0a      	ldr	r2, [pc, #40]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003618:	e007      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800361a:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003622:	4a05      	ldr	r2, [pc, #20]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003624:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003628:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	40007000 	.word	0x40007000
 800363c:	20000000 	.word	0x20000000
 8003640:	431bde83 	.word	0x431bde83

08003644 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003648:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a04      	ldr	r2, [pc, #16]	@ (8003660 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800364e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003652:	6093      	str	r3, [r2, #8]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40007000 	.word	0x40007000

08003664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e2fe      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d075      	beq.n	800376e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003682:	4b97      	ldr	r3, [pc, #604]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368c:	4b94      	ldr	r3, [pc, #592]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b0c      	cmp	r3, #12
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_OscConfig+0x3e>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d002      	beq.n	80036a8 <HAL_RCC_OscConfig+0x44>
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d10b      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	4b8d      	ldr	r3, [pc, #564]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d05b      	beq.n	800376c <HAL_RCC_OscConfig+0x108>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d157      	bne.n	800376c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e2d9      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_OscConfig+0x74>
 80036ca:	4b85      	ldr	r3, [pc, #532]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a84      	ldr	r2, [pc, #528]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x98>
 80036e2:	4b7f      	ldr	r3, [pc, #508]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7e      	ldr	r2, [pc, #504]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b7c      	ldr	r3, [pc, #496]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a7b      	ldr	r2, [pc, #492]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036fc:	4b78      	ldr	r3, [pc, #480]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a77      	ldr	r2, [pc, #476]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b75      	ldr	r3, [pc, #468]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a74      	ldr	r2, [pc, #464]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fbee 	bl	8001efc <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe fbea 	bl	8001efc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	@ 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e29e      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003736:	4b6a      	ldr	r3, [pc, #424]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xc0>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fbda 	bl	8001efc <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7fe fbd6 	bl	8001efc <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	@ 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e28a      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800375e:	4b60      	ldr	r3, [pc, #384]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0xe8>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d075      	beq.n	8003866 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377a:	4b59      	ldr	r3, [pc, #356]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003784:	4b56      	ldr	r3, [pc, #344]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b0c      	cmp	r3, #12
 8003792:	d102      	bne.n	800379a <HAL_RCC_OscConfig+0x136>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_OscConfig+0x13c>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d11f      	bne.n	80037e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037a0:	4b4f      	ldr	r3, [pc, #316]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_OscConfig+0x154>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e25d      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b8:	4b49      	ldr	r3, [pc, #292]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	4946      	ldr	r1, [pc, #280]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037cc:	4b45      	ldr	r3, [pc, #276]	@ (80038e4 <HAL_RCC_OscConfig+0x280>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe fb47 	bl	8001e64 <HAL_InitTick>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d043      	beq.n	8003864 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e249      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d023      	beq.n	8003830 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e8:	4b3d      	ldr	r3, [pc, #244]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a3c      	ldr	r2, [pc, #240]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80037ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fe fb82 	bl	8001efc <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fc:	f7fe fb7e 	bl	8001efc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e232      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800380e:	4b34      	ldr	r3, [pc, #208]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800381a:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	061b      	lsls	r3, r3, #24
 8003828:	492d      	ldr	r1, [pc, #180]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
 800382e:	e01a      	b.n	8003866 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003830:	4b2b      	ldr	r3, [pc, #172]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2a      	ldr	r2, [pc, #168]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003836:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fb5e 	bl	8001efc <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003844:	f7fe fb5a 	bl	8001efc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e20e      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003856:	4b22      	ldr	r3, [pc, #136]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x1e0>
 8003862:	e000      	b.n	8003866 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003864:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d041      	beq.n	80038f6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01c      	beq.n	80038b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387a:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 800387c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003880:	4a17      	ldr	r2, [pc, #92]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388a:	f7fe fb37 	bl	8001efc <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003892:	f7fe fb33 	bl	8001efc <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e1e7      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038a4:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80038a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ef      	beq.n	8003892 <HAL_RCC_OscConfig+0x22e>
 80038b2:	e020      	b.n	80038f6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b4:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80038b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ba:	4a09      	ldr	r2, [pc, #36]	@ (80038e0 <HAL_RCC_OscConfig+0x27c>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe fb1a 	bl	8001efc <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038ca:	e00d      	b.n	80038e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe fb16 	bl	8001efc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d906      	bls.n	80038e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1ca      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038e8:	4b8c      	ldr	r3, [pc, #560]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ea      	bne.n	80038cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80a6 	beq.w	8003a50 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003904:	2300      	movs	r3, #0
 8003906:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003908:	4b84      	ldr	r3, [pc, #528]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 800390a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_OscConfig+0x2b4>
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x2b6>
 8003918:	2300      	movs	r3, #0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	4a7e      	ldr	r2, [pc, #504]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	@ 0x58
 800392a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003936:	2301      	movs	r3, #1
 8003938:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800393a:	4b79      	ldr	r3, [pc, #484]	@ (8003b20 <HAL_RCC_OscConfig+0x4bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003946:	4b76      	ldr	r3, [pc, #472]	@ (8003b20 <HAL_RCC_OscConfig+0x4bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a75      	ldr	r2, [pc, #468]	@ (8003b20 <HAL_RCC_OscConfig+0x4bc>)
 800394c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003952:	f7fe fad3 	bl	8001efc <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800395a:	f7fe facf 	bl	8001efc <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e183      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800396c:	4b6c      	ldr	r3, [pc, #432]	@ (8003b20 <HAL_RCC_OscConfig+0x4bc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d108      	bne.n	8003992 <HAL_RCC_OscConfig+0x32e>
 8003980:	4b66      	ldr	r3, [pc, #408]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003986:	4a65      	ldr	r2, [pc, #404]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003990:	e024      	b.n	80039dc <HAL_RCC_OscConfig+0x378>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d110      	bne.n	80039bc <HAL_RCC_OscConfig+0x358>
 800399a:	4b60      	ldr	r3, [pc, #384]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039a2:	f043 0304 	orr.w	r3, r3, #4
 80039a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039aa:	4b5c      	ldr	r3, [pc, #368]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ba:	e00f      	b.n	80039dc <HAL_RCC_OscConfig+0x378>
 80039bc:	4b57      	ldr	r3, [pc, #348]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	4a56      	ldr	r2, [pc, #344]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039cc:	4b53      	ldr	r3, [pc, #332]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	4a52      	ldr	r2, [pc, #328]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 80039d4:	f023 0304 	bic.w	r3, r3, #4
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d016      	beq.n	8003a12 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fe fa8a 	bl	8001efc <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fe fa86 	bl	8001efc <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e138      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a02:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ed      	beq.n	80039ec <HAL_RCC_OscConfig+0x388>
 8003a10:	e015      	b.n	8003a3e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a12:	f7fe fa73 	bl	8001efc <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fe fa6f 	bl	8001efc <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e121      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a30:	4b3a      	ldr	r3, [pc, #232]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1ed      	bne.n	8003a1a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a3e:	7ffb      	ldrb	r3, [r7, #31]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d105      	bne.n	8003a50 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a44:	4b35      	ldr	r3, [pc, #212]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a48:	4a34      	ldr	r2, [pc, #208]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a4e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d03c      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01c      	beq.n	8003a9e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a64:	4b2d      	ldr	r3, [pc, #180]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a74:	f7fe fa42 	bl	8001efc <HAL_GetTick>
 8003a78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a7c:	f7fe fa3e 	bl	8001efc <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0f2      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a8e:	4b23      	ldr	r3, [pc, #140]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ef      	beq.n	8003a7c <HAL_RCC_OscConfig+0x418>
 8003a9c:	e01b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aae:	f7fe fa25 	bl	8001efc <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab6:	f7fe fa21 	bl	8001efc <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0d5      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ac8:	4b14      	ldr	r3, [pc, #80]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1ef      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80c9 	beq.w	8003c72 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	f000 8083 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d15e      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af6:	4b09      	ldr	r3, [pc, #36]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <HAL_RCC_OscConfig+0x4b8>)
 8003afc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fe f9fb 	bl	8001efc <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b08:	e00c      	b.n	8003b24 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7fe f9f7 	bl	8001efc <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d905      	bls.n	8003b24 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e0ab      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b24:	4b55      	ldr	r3, [pc, #340]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1ec      	bne.n	8003b0a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b30:	4b52      	ldr	r3, [pc, #328]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4b52      	ldr	r3, [pc, #328]	@ (8003c80 <HAL_RCC_OscConfig+0x61c>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6a11      	ldr	r1, [r2, #32]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b40:	3a01      	subs	r2, #1
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	4311      	orrs	r1, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b4a:	0212      	lsls	r2, r2, #8
 8003b4c:	4311      	orrs	r1, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b52:	0852      	lsrs	r2, r2, #1
 8003b54:	3a01      	subs	r2, #1
 8003b56:	0552      	lsls	r2, r2, #21
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b5e:	0852      	lsrs	r2, r2, #1
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0652      	lsls	r2, r2, #25
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b6a:	06d2      	lsls	r2, r2, #27
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	4943      	ldr	r1, [pc, #268]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	4b41      	ldr	r3, [pc, #260]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a40      	ldr	r2, [pc, #256]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b7e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b80:	4b3e      	ldr	r3, [pc, #248]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4a3d      	ldr	r2, [pc, #244]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fe f9b6 	bl	8001efc <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fe f9b2 	bl	8001efc <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e066      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ba6:	4b35      	ldr	r3, [pc, #212]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x530>
 8003bb2:	e05e      	b.n	8003c72 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb4:	4b31      	ldr	r3, [pc, #196]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a30      	ldr	r2, [pc, #192]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fe f99c 	bl	8001efc <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fe f998 	bl	8001efc <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e04c      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bda:	4b28      	ldr	r3, [pc, #160]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003be6:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	4924      	ldr	r1, [pc, #144]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003bec:	4b25      	ldr	r3, [pc, #148]	@ (8003c84 <HAL_RCC_OscConfig+0x620>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	60cb      	str	r3, [r1, #12]
 8003bf2:	e03e      	b.n	8003c72 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e039      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c00:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <HAL_RCC_OscConfig+0x618>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 0203 	and.w	r2, r3, #3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d12c      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d123      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d11b      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d113      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	3b01      	subs	r3, #1
 8003c54:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d109      	bne.n	8003c6e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	3b01      	subs	r3, #1
 8003c68:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	019f800c 	.word	0x019f800c
 8003c84:	feeefffc 	.word	0xfeeefffc

08003c88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e11e      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b91      	ldr	r3, [pc, #580]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d910      	bls.n	8003cd0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 020f 	bic.w	r2, r3, #15
 8003cb6:	498c      	ldr	r1, [pc, #560]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b8a      	ldr	r3, [pc, #552]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e106      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d073      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d129      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce4:	4b81      	ldr	r3, [pc, #516]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0f4      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003cf4:	f000 f99e 	bl	8004034 <RCC_GetSysClockFreqFromPLLSource>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4a7c      	ldr	r2, [pc, #496]	@ (8003ef0 <HAL_RCC_ClockConfig+0x268>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d93f      	bls.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d02:	4b7a      	ldr	r3, [pc, #488]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d033      	beq.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d12f      	bne.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d22:	4b72      	ldr	r3, [pc, #456]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d2a:	4a70      	ldr	r2, [pc, #448]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d32:	2380      	movs	r3, #128	@ 0x80
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e024      	b.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d40:	4b6a      	ldr	r3, [pc, #424]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0c6      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d50:	4b66      	ldr	r3, [pc, #408]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0be      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d60:	f000 f8ce 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003d64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4a61      	ldr	r2, [pc, #388]	@ (8003ef0 <HAL_RCC_ClockConfig+0x268>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d909      	bls.n	8003d82 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d76:	4a5d      	ldr	r2, [pc, #372]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d7c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d7e:	2380      	movs	r3, #128	@ 0x80
 8003d80:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d82:	4b5a      	ldr	r3, [pc, #360]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 0203 	bic.w	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4957      	ldr	r1, [pc, #348]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fe f8b2 	bl	8001efc <HAL_GetTick>
 8003d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d9c:	f7fe f8ae 	bl	8001efc <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e095      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db2:	4b4e      	ldr	r3, [pc, #312]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 020c 	and.w	r2, r3, #12
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d1eb      	bne.n	8003d9c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d023      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ddc:	4b43      	ldr	r3, [pc, #268]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	4a42      	ldr	r2, [pc, #264]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003de2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003de6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003df4:	4b3d      	ldr	r3, [pc, #244]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e04:	4b39      	ldr	r3, [pc, #228]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4936      	ldr	r1, [pc, #216]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	2b80      	cmp	r3, #128	@ 0x80
 8003e1c:	d105      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e1e:	4b33      	ldr	r3, [pc, #204]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	4a32      	ldr	r2, [pc, #200]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e28:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d21d      	bcs.n	8003e74 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 020f 	bic.w	r2, r3, #15
 8003e40:	4929      	ldr	r1, [pc, #164]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e48:	f7fe f858 	bl	8001efc <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe f854 	bl	8001efc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e03b      	b.n	8003ede <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e66:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <HAL_RCC_ClockConfig+0x260>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1ed      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e80:	4b1a      	ldr	r3, [pc, #104]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4917      	ldr	r1, [pc, #92]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e9e:	4b13      	ldr	r3, [pc, #76]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	490f      	ldr	r1, [pc, #60]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb2:	f000 f825 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <HAL_RCC_ClockConfig+0x264>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	490c      	ldr	r1, [pc, #48]	@ (8003ef4 <HAL_RCC_ClockConfig+0x26c>)
 8003ec4:	5ccb      	ldrb	r3, [r1, r3]
 8003ec6:	f003 031f 	and.w	r3, r3, #31
 8003eca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <HAL_RCC_ClockConfig+0x270>)
 8003ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8003efc <HAL_RCC_ClockConfig+0x274>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd ffc4 	bl	8001e64 <HAL_InitTick>
 8003edc:	4603      	mov	r3, r0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40022000 	.word	0x40022000
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	04c4b400 	.word	0x04c4b400
 8003ef4:	08008a3c 	.word	0x08008a3c
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	20000018 	.word	0x20000018

08003f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f06:	4b2c      	ldr	r3, [pc, #176]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d102      	bne.n	8003f18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f12:	4b2a      	ldr	r3, [pc, #168]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	e047      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f18:	4b27      	ldr	r3, [pc, #156]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d102      	bne.n	8003f2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f24:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	e03e      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f2a:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d136      	bne.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f36:	4b20      	ldr	r3, [pc, #128]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f40:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b03      	cmp	r3, #3
 8003f52:	d10c      	bne.n	8003f6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f54:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	4a16      	ldr	r2, [pc, #88]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f5e:	68d2      	ldr	r2, [r2, #12]
 8003f60:	0a12      	lsrs	r2, r2, #8
 8003f62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	617b      	str	r3, [r7, #20]
      break;
 8003f6c:	e00c      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f6e:	4a13      	ldr	r2, [pc, #76]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	4a10      	ldr	r2, [pc, #64]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	0a12      	lsrs	r2, r2, #8
 8003f7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
      break;
 8003f86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	0e5b      	lsrs	r3, r3, #25
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	3301      	adds	r3, #1
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e001      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003fa8:	693b      	ldr	r3, [r7, #16]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	00f42400 	.word	0x00f42400
 8003fc0:	016e3600 	.word	0x016e3600

08003fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000000 	.word	0x20000000

08003fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fe0:	f7ff fff0 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b06      	ldr	r3, [pc, #24]	@ (8004000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4904      	ldr	r1, [pc, #16]	@ (8004004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000
 8004004:	08008a4c 	.word	0x08008a4c

08004008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800400c:	f7ff ffda 	bl	8003fc4 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b06      	ldr	r3, [pc, #24]	@ (800402c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	0adb      	lsrs	r3, r3, #11
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4904      	ldr	r1, [pc, #16]	@ (8004030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40021000 	.word	0x40021000
 8004030:	08008a4c 	.word	0x08008a4c

08004034 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800403a:	4b1e      	ldr	r3, [pc, #120]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004044:	4b1b      	ldr	r3, [pc, #108]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	3301      	adds	r3, #1
 8004050:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d10c      	bne.n	8004072 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004058:	4a17      	ldr	r2, [pc, #92]	@ (80040b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	4a14      	ldr	r2, [pc, #80]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004062:	68d2      	ldr	r2, [r2, #12]
 8004064:	0a12      	lsrs	r2, r2, #8
 8004066:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	617b      	str	r3, [r7, #20]
    break;
 8004070:	e00c      	b.n	800408c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004072:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	4a0e      	ldr	r2, [pc, #56]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	0a12      	lsrs	r2, r2, #8
 8004080:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	617b      	str	r3, [r7, #20]
    break;
 800408a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800408c:	4b09      	ldr	r3, [pc, #36]	@ (80040b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0e5b      	lsrs	r3, r3, #25
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	3301      	adds	r3, #1
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040a6:	687b      	ldr	r3, [r7, #4]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	40021000 	.word	0x40021000
 80040b8:	016e3600 	.word	0x016e3600
 80040bc:	00f42400 	.word	0x00f42400

080040c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040c8:	2300      	movs	r3, #0
 80040ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040cc:	2300      	movs	r3, #0
 80040ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8098 	beq.w	800420e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040de:	2300      	movs	r3, #0
 80040e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e2:	4b43      	ldr	r3, [pc, #268]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10d      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ee:	4b40      	ldr	r3, [pc, #256]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f2:	4a3f      	ldr	r2, [pc, #252]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040fa:	4b3d      	ldr	r3, [pc, #244]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004106:	2301      	movs	r3, #1
 8004108:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800410a:	4b3a      	ldr	r3, [pc, #232]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a39      	ldr	r2, [pc, #228]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004114:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004116:	f7fd fef1 	bl	8001efc <HAL_GetTick>
 800411a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800411c:	e009      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800411e:	f7fd feed 	bl	8001efc <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d902      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	74fb      	strb	r3, [r7, #19]
        break;
 8004130:	e005      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004132:	4b30      	ldr	r3, [pc, #192]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ef      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800413e:	7cfb      	ldrb	r3, [r7, #19]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d159      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004144:	4b2a      	ldr	r3, [pc, #168]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800414e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d01e      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	429a      	cmp	r2, r3
 800415e:	d019      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004160:	4b23      	ldr	r3, [pc, #140]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800416a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800416c:	4b20      	ldr	r3, [pc, #128]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a1f      	ldr	r2, [pc, #124]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800417c:	4b1c      	ldr	r3, [pc, #112]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	4a1b      	ldr	r2, [pc, #108]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004184:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800418c:	4a18      	ldr	r2, [pc, #96]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d016      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419e:	f7fd fead 	bl	8001efc <HAL_GetTick>
 80041a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a4:	e00b      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a6:	f7fd fea9 	bl	8001efc <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d902      	bls.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	74fb      	strb	r3, [r7, #19]
            break;
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041be:	4b0c      	ldr	r3, [pc, #48]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ec      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d2:	4b07      	ldr	r3, [pc, #28]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e0:	4903      	ldr	r1, [pc, #12]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041e8:	e008      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ea:	7cfb      	ldrb	r3, [r7, #19]
 80041ec:	74bb      	strb	r3, [r7, #18]
 80041ee:	e005      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f8:	7cfb      	ldrb	r3, [r7, #19]
 80041fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041fc:	7c7b      	ldrb	r3, [r7, #17]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4ba7      	ldr	r3, [pc, #668]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	4aa6      	ldr	r2, [pc, #664]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800421a:	4ba1      	ldr	r3, [pc, #644]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004220:	f023 0203 	bic.w	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	499d      	ldr	r1, [pc, #628]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800423c:	4b98      	ldr	r3, [pc, #608]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f023 020c 	bic.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	4995      	ldr	r1, [pc, #596]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800425e:	4b90      	ldr	r3, [pc, #576]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004264:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	498c      	ldr	r1, [pc, #560]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426e:	4313      	orrs	r3, r2
 8004270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004280:	4b87      	ldr	r3, [pc, #540]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004286:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	4984      	ldr	r1, [pc, #528]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042a2:	4b7f      	ldr	r3, [pc, #508]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	497b      	ldr	r1, [pc, #492]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c4:	4b76      	ldr	r3, [pc, #472]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	4973      	ldr	r1, [pc, #460]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00a      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042e6:	4b6e      	ldr	r3, [pc, #440]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	496a      	ldr	r1, [pc, #424]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004308:	4b65      	ldr	r3, [pc, #404]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4962      	ldr	r1, [pc, #392]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800432a:	4b5d      	ldr	r3, [pc, #372]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	4959      	ldr	r1, [pc, #356]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800434c:	4b54      	ldr	r3, [pc, #336]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004352:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435a:	4951      	ldr	r1, [pc, #324]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436a:	2b00      	cmp	r3, #0
 800436c:	d015      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800436e:	4b4c      	ldr	r3, [pc, #304]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437c:	4948      	ldr	r1, [pc, #288]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004388:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800438c:	d105      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438e:	4b44      	ldr	r3, [pc, #272]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4a43      	ldr	r2, [pc, #268]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004394:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004398:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d015      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043a6:	4b3e      	ldr	r3, [pc, #248]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b4:	493a      	ldr	r1, [pc, #232]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043c4:	d105      	bne.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c6:	4b36      	ldr	r3, [pc, #216]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	4a35      	ldr	r2, [pc, #212]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043d0:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d015      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043de:	4b30      	ldr	r3, [pc, #192]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ec:	492c      	ldr	r1, [pc, #176]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043fc:	d105      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043fe:	4b28      	ldr	r3, [pc, #160]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	4a27      	ldr	r2, [pc, #156]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004404:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004408:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d015      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004416:	4b22      	ldr	r3, [pc, #136]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004424:	491e      	ldr	r1, [pc, #120]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004430:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004434:	d105      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004436:	4b1a      	ldr	r3, [pc, #104]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	4a19      	ldr	r2, [pc, #100]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004440:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800444e:	4b14      	ldr	r3, [pc, #80]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004454:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445c:	4910      	ldr	r1, [pc, #64]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800446c:	d105      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446e:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4a0b      	ldr	r2, [pc, #44]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004478:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d018      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004486:	4b06      	ldr	r3, [pc, #24]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	4902      	ldr	r1, [pc, #8]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	e001      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80044a0:	40021000 	.word	0x40021000
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044aa:	d105      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044ac:	4b21      	ldr	r3, [pc, #132]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4a20      	ldr	r2, [pc, #128]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d015      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80044c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	4918      	ldr	r1, [pc, #96]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e2:	d105      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044e4:	4b13      	ldr	r3, [pc, #76]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4a12      	ldr	r2, [pc, #72]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d015      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80044fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800450a:	490a      	ldr	r1, [pc, #40]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800450c:	4313      	orrs	r3, r2
 800450e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004516:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800451a:	d105      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800451c:	4b05      	ldr	r3, [pc, #20]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a04      	ldr	r2, [pc, #16]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004522:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004526:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004528:	7cbb      	ldrb	r3, [r7, #18]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000

08004538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e049      	b.n	80045de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fd fa28 	bl	80019b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3304      	adds	r3, #4
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f000 fa56 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_TIM_PWM_Start+0x24>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b01      	cmp	r3, #1
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e03c      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d109      	bne.n	8004626 <HAL_TIM_PWM_Start+0x3e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b01      	cmp	r3, #1
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	e02f      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d109      	bne.n	8004640 <HAL_TIM_PWM_Start+0x58>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b01      	cmp	r3, #1
 8004636:	bf14      	ite	ne
 8004638:	2301      	movne	r3, #1
 800463a:	2300      	moveq	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e022      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d109      	bne.n	800465a <HAL_TIM_PWM_Start+0x72>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	bf14      	ite	ne
 8004652:	2301      	movne	r3, #1
 8004654:	2300      	moveq	r3, #0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	e015      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b10      	cmp	r3, #16
 800465e:	d109      	bne.n	8004674 <HAL_TIM_PWM_Start+0x8c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	e008      	b.n	8004686 <HAL_TIM_PWM_Start+0x9e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	bf14      	ite	ne
 8004680:	2301      	movne	r3, #1
 8004682:	2300      	moveq	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0a1      	b.n	80047d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d104      	bne.n	800469e <HAL_TIM_PWM_Start+0xb6>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800469c:	e023      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d104      	bne.n	80046ae <HAL_TIM_PWM_Start+0xc6>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ac:	e01b      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d104      	bne.n	80046be <HAL_TIM_PWM_Start+0xd6>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046bc:	e013      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d104      	bne.n	80046ce <HAL_TIM_PWM_Start+0xe6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046cc:	e00b      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b10      	cmp	r3, #16
 80046d2:	d104      	bne.n	80046de <HAL_TIM_PWM_Start+0xf6>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046dc:	e003      	b.n	80046e6 <HAL_TIM_PWM_Start+0xfe>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2201      	movs	r2, #1
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fd6e 	bl	80051d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a38      	ldr	r2, [pc, #224]	@ (80047dc <HAL_TIM_PWM_Start+0x1f4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_TIM_PWM_Start+0x148>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a37      	ldr	r2, [pc, #220]	@ (80047e0 <HAL_TIM_PWM_Start+0x1f8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_TIM_PWM_Start+0x148>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a35      	ldr	r2, [pc, #212]	@ (80047e4 <HAL_TIM_PWM_Start+0x1fc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_TIM_PWM_Start+0x148>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a34      	ldr	r2, [pc, #208]	@ (80047e8 <HAL_TIM_PWM_Start+0x200>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_TIM_PWM_Start+0x148>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a32      	ldr	r2, [pc, #200]	@ (80047ec <HAL_TIM_PWM_Start+0x204>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIM_PWM_Start+0x148>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a31      	ldr	r2, [pc, #196]	@ (80047f0 <HAL_TIM_PWM_Start+0x208>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_TIM_PWM_Start+0x14c>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <HAL_TIM_PWM_Start+0x14e>
 8004734:	2300      	movs	r3, #0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004748:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a23      	ldr	r2, [pc, #140]	@ (80047dc <HAL_TIM_PWM_Start+0x1f4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d01d      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800475c:	d018      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a24      	ldr	r2, [pc, #144]	@ (80047f4 <HAL_TIM_PWM_Start+0x20c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d013      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a22      	ldr	r2, [pc, #136]	@ (80047f8 <HAL_TIM_PWM_Start+0x210>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d00e      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1a      	ldr	r2, [pc, #104]	@ (80047e0 <HAL_TIM_PWM_Start+0x1f8>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d009      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a18      	ldr	r2, [pc, #96]	@ (80047e4 <HAL_TIM_PWM_Start+0x1fc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d004      	beq.n	8004790 <HAL_TIM_PWM_Start+0x1a8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a19      	ldr	r2, [pc, #100]	@ (80047f0 <HAL_TIM_PWM_Start+0x208>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d115      	bne.n	80047bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <HAL_TIM_PWM_Start+0x214>)
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b06      	cmp	r3, #6
 80047a0:	d015      	beq.n	80047ce <HAL_TIM_PWM_Start+0x1e6>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a8:	d011      	beq.n	80047ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f042 0201 	orr.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	e008      	b.n	80047ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e000      	b.n	80047d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40013400 	.word	0x40013400
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400
 80047ec:	40014800 	.word	0x40014800
 80047f0:	40015000 	.word	0x40015000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	00010007 	.word	0x00010007

08004800 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004816:	2b01      	cmp	r3, #1
 8004818:	d101      	bne.n	800481e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800481a:	2302      	movs	r3, #2
 800481c:	e0ff      	b.n	8004a1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b14      	cmp	r3, #20
 800482a:	f200 80f0 	bhi.w	8004a0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800482e:	a201      	add	r2, pc, #4	@ (adr r2, 8004834 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004889 	.word	0x08004889
 8004838:	08004a0f 	.word	0x08004a0f
 800483c:	08004a0f 	.word	0x08004a0f
 8004840:	08004a0f 	.word	0x08004a0f
 8004844:	080048c9 	.word	0x080048c9
 8004848:	08004a0f 	.word	0x08004a0f
 800484c:	08004a0f 	.word	0x08004a0f
 8004850:	08004a0f 	.word	0x08004a0f
 8004854:	0800490b 	.word	0x0800490b
 8004858:	08004a0f 	.word	0x08004a0f
 800485c:	08004a0f 	.word	0x08004a0f
 8004860:	08004a0f 	.word	0x08004a0f
 8004864:	0800494b 	.word	0x0800494b
 8004868:	08004a0f 	.word	0x08004a0f
 800486c:	08004a0f 	.word	0x08004a0f
 8004870:	08004a0f 	.word	0x08004a0f
 8004874:	0800498d 	.word	0x0800498d
 8004878:	08004a0f 	.word	0x08004a0f
 800487c:	08004a0f 	.word	0x08004a0f
 8004880:	08004a0f 	.word	0x08004a0f
 8004884:	080049cd 	.word	0x080049cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f974 	bl	8004b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0208 	orr.w	r2, r2, #8
 80048a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0204 	bic.w	r2, r2, #4
 80048b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6999      	ldr	r1, [r3, #24]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	619a      	str	r2, [r3, #24]
      break;
 80048c6:	e0a5      	b.n	8004a14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f9ee 	bl	8004cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699a      	ldr	r2, [r3, #24]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6999      	ldr	r1, [r3, #24]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	619a      	str	r2, [r3, #24]
      break;
 8004908:	e084      	b.n	8004a14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fa61 	bl	8004dd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0208 	orr.w	r2, r2, #8
 8004924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0204 	bic.w	r2, r2, #4
 8004934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69d9      	ldr	r1, [r3, #28]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	61da      	str	r2, [r3, #28]
      break;
 8004948:	e064      	b.n	8004a14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fad3 	bl	8004efc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69d9      	ldr	r1, [r3, #28]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	021a      	lsls	r2, r3, #8
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	61da      	str	r2, [r3, #28]
      break;
 800498a:	e043      	b.n	8004a14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fb46 	bl	8005024 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0208 	orr.w	r2, r2, #8
 80049a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0204 	bic.w	r2, r2, #4
 80049b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80049ca:	e023      	b.n	8004a14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fb90 	bl	80050f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	021a      	lsls	r2, r3, #8
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a0c:	e002      	b.n	8004a14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
      break;
 8004a12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop

08004a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a48      	ldr	r2, [pc, #288]	@ (8004b5c <TIM_Base_SetConfig+0x134>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a46:	d00f      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a45      	ldr	r2, [pc, #276]	@ (8004b60 <TIM_Base_SetConfig+0x138>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a44      	ldr	r2, [pc, #272]	@ (8004b64 <TIM_Base_SetConfig+0x13c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a43      	ldr	r2, [pc, #268]	@ (8004b68 <TIM_Base_SetConfig+0x140>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a42      	ldr	r2, [pc, #264]	@ (8004b6c <TIM_Base_SetConfig+0x144>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a37      	ldr	r2, [pc, #220]	@ (8004b5c <TIM_Base_SetConfig+0x134>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01f      	beq.n	8004ac2 <TIM_Base_SetConfig+0x9a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a88:	d01b      	beq.n	8004ac2 <TIM_Base_SetConfig+0x9a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a34      	ldr	r2, [pc, #208]	@ (8004b60 <TIM_Base_SetConfig+0x138>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d017      	beq.n	8004ac2 <TIM_Base_SetConfig+0x9a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a33      	ldr	r2, [pc, #204]	@ (8004b64 <TIM_Base_SetConfig+0x13c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <TIM_Base_SetConfig+0x9a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a32      	ldr	r2, [pc, #200]	@ (8004b68 <TIM_Base_SetConfig+0x140>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00f      	beq.n	8004ac2 <TIM_Base_SetConfig+0x9a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a32      	ldr	r2, [pc, #200]	@ (8004b70 <TIM_Base_SetConfig+0x148>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00b      	beq.n	8004ac2 <TIM_Base_SetConfig+0x9a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a31      	ldr	r2, [pc, #196]	@ (8004b74 <TIM_Base_SetConfig+0x14c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <TIM_Base_SetConfig+0x9a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a30      	ldr	r2, [pc, #192]	@ (8004b78 <TIM_Base_SetConfig+0x150>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d003      	beq.n	8004ac2 <TIM_Base_SetConfig+0x9a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a2b      	ldr	r2, [pc, #172]	@ (8004b6c <TIM_Base_SetConfig+0x144>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d108      	bne.n	8004ad4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <TIM_Base_SetConfig+0x134>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <TIM_Base_SetConfig+0x100>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a19      	ldr	r2, [pc, #100]	@ (8004b68 <TIM_Base_SetConfig+0x140>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00f      	beq.n	8004b28 <TIM_Base_SetConfig+0x100>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a19      	ldr	r2, [pc, #100]	@ (8004b70 <TIM_Base_SetConfig+0x148>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <TIM_Base_SetConfig+0x100>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a18      	ldr	r2, [pc, #96]	@ (8004b74 <TIM_Base_SetConfig+0x14c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d007      	beq.n	8004b28 <TIM_Base_SetConfig+0x100>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <TIM_Base_SetConfig+0x150>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_Base_SetConfig+0x100>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a12      	ldr	r2, [pc, #72]	@ (8004b6c <TIM_Base_SetConfig+0x144>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d103      	bne.n	8004b30 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d105      	bne.n	8004b4e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f023 0201 	bic.w	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	611a      	str	r2, [r3, #16]
  }
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40013400 	.word	0x40013400
 8004b6c:	40015000 	.word	0x40015000
 8004b70:	40014000 	.word	0x40014000
 8004b74:	40014400 	.word	0x40014400
 8004b78:	40014800 	.word	0x40014800

08004b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f023 0201 	bic.w	r2, r3, #1
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0302 	bic.w	r3, r3, #2
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a30      	ldr	r2, [pc, #192]	@ (8004c98 <TIM_OC1_SetConfig+0x11c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <TIM_OC1_SetConfig+0x88>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a2f      	ldr	r2, [pc, #188]	@ (8004c9c <TIM_OC1_SetConfig+0x120>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00f      	beq.n	8004c04 <TIM_OC1_SetConfig+0x88>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca0 <TIM_OC1_SetConfig+0x124>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00b      	beq.n	8004c04 <TIM_OC1_SetConfig+0x88>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca4 <TIM_OC1_SetConfig+0x128>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <TIM_OC1_SetConfig+0x88>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ca8 <TIM_OC1_SetConfig+0x12c>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_OC1_SetConfig+0x88>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8004cac <TIM_OC1_SetConfig+0x130>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d10c      	bne.n	8004c1e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0308 	bic.w	r3, r3, #8
 8004c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 0304 	bic.w	r3, r3, #4
 8004c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	@ (8004c98 <TIM_OC1_SetConfig+0x11c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <TIM_OC1_SetConfig+0xd2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1c      	ldr	r2, [pc, #112]	@ (8004c9c <TIM_OC1_SetConfig+0x120>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00f      	beq.n	8004c4e <TIM_OC1_SetConfig+0xd2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca0 <TIM_OC1_SetConfig+0x124>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00b      	beq.n	8004c4e <TIM_OC1_SetConfig+0xd2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a1a      	ldr	r2, [pc, #104]	@ (8004ca4 <TIM_OC1_SetConfig+0x128>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d007      	beq.n	8004c4e <TIM_OC1_SetConfig+0xd2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a19      	ldr	r2, [pc, #100]	@ (8004ca8 <TIM_OC1_SetConfig+0x12c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_OC1_SetConfig+0xd2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a18      	ldr	r2, [pc, #96]	@ (8004cac <TIM_OC1_SetConfig+0x130>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d111      	bne.n	8004c72 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40012c00 	.word	0x40012c00
 8004c9c:	40013400 	.word	0x40013400
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800
 8004cac:	40015000 	.word	0x40015000

08004cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f023 0210 	bic.w	r2, r3, #16
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0320 	bic.w	r3, r3, #32
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc0 <TIM_OC2_SetConfig+0x110>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_OC2_SetConfig+0x74>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc4 <TIM_OC2_SetConfig+0x114>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC2_SetConfig+0x74>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc8 <TIM_OC2_SetConfig+0x118>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d10d      	bne.n	8004d40 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc0 <TIM_OC2_SetConfig+0x110>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d013      	beq.n	8004d70 <TIM_OC2_SetConfig+0xc0>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc4 <TIM_OC2_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00f      	beq.n	8004d70 <TIM_OC2_SetConfig+0xc0>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a1e      	ldr	r2, [pc, #120]	@ (8004dcc <TIM_OC2_SetConfig+0x11c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <TIM_OC2_SetConfig+0xc0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd0 <TIM_OC2_SetConfig+0x120>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d007      	beq.n	8004d70 <TIM_OC2_SetConfig+0xc0>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a1c      	ldr	r2, [pc, #112]	@ (8004dd4 <TIM_OC2_SetConfig+0x124>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_OC2_SetConfig+0xc0>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a17      	ldr	r2, [pc, #92]	@ (8004dc8 <TIM_OC2_SetConfig+0x118>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d113      	bne.n	8004d98 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	621a      	str	r2, [r3, #32]
}
 8004db2:	bf00      	nop
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40012c00 	.word	0x40012c00
 8004dc4:	40013400 	.word	0x40013400
 8004dc8:	40015000 	.word	0x40015000
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40014400 	.word	0x40014400
 8004dd4:	40014800 	.word	0x40014800

08004dd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee4 <TIM_OC3_SetConfig+0x10c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <TIM_OC3_SetConfig+0x72>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee8 <TIM_OC3_SetConfig+0x110>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_OC3_SetConfig+0x72>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a29      	ldr	r2, [pc, #164]	@ (8004eec <TIM_OC3_SetConfig+0x114>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d10d      	bne.n	8004e66 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	021b      	lsls	r3, r3, #8
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee4 <TIM_OC3_SetConfig+0x10c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d013      	beq.n	8004e96 <TIM_OC3_SetConfig+0xbe>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee8 <TIM_OC3_SetConfig+0x110>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00f      	beq.n	8004e96 <TIM_OC3_SetConfig+0xbe>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef0 <TIM_OC3_SetConfig+0x118>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_OC3_SetConfig+0xbe>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a1c      	ldr	r2, [pc, #112]	@ (8004ef4 <TIM_OC3_SetConfig+0x11c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_OC3_SetConfig+0xbe>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef8 <TIM_OC3_SetConfig+0x120>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_OC3_SetConfig+0xbe>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a16      	ldr	r2, [pc, #88]	@ (8004eec <TIM_OC3_SetConfig+0x114>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d113      	bne.n	8004ebe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	621a      	str	r2, [r3, #32]
}
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40013400 	.word	0x40013400
 8004eec:	40015000 	.word	0x40015000
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800

08004efc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	031b      	lsls	r3, r3, #12
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800500c <TIM_OC4_SetConfig+0x110>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d007      	beq.n	8004f70 <TIM_OC4_SetConfig+0x74>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a2b      	ldr	r2, [pc, #172]	@ (8005010 <TIM_OC4_SetConfig+0x114>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d003      	beq.n	8004f70 <TIM_OC4_SetConfig+0x74>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005014 <TIM_OC4_SetConfig+0x118>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d10d      	bne.n	8004f8c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	031b      	lsls	r3, r3, #12
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800500c <TIM_OC4_SetConfig+0x110>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d013      	beq.n	8004fbc <TIM_OC4_SetConfig+0xc0>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a1e      	ldr	r2, [pc, #120]	@ (8005010 <TIM_OC4_SetConfig+0x114>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00f      	beq.n	8004fbc <TIM_OC4_SetConfig+0xc0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8005018 <TIM_OC4_SetConfig+0x11c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d00b      	beq.n	8004fbc <TIM_OC4_SetConfig+0xc0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800501c <TIM_OC4_SetConfig+0x120>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d007      	beq.n	8004fbc <TIM_OC4_SetConfig+0xc0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	@ (8005020 <TIM_OC4_SetConfig+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <TIM_OC4_SetConfig+0xc0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a17      	ldr	r2, [pc, #92]	@ (8005014 <TIM_OC4_SetConfig+0x118>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d113      	bne.n	8004fe4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fc2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004fca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	019b      	lsls	r3, r3, #6
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40013400 	.word	0x40013400
 8005014:	40015000 	.word	0x40015000
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800

08005024 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a19      	ldr	r2, [pc, #100]	@ (80050e0 <TIM_OC5_SetConfig+0xbc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d013      	beq.n	80050a6 <TIM_OC5_SetConfig+0x82>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a18      	ldr	r2, [pc, #96]	@ (80050e4 <TIM_OC5_SetConfig+0xc0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00f      	beq.n	80050a6 <TIM_OC5_SetConfig+0x82>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a17      	ldr	r2, [pc, #92]	@ (80050e8 <TIM_OC5_SetConfig+0xc4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00b      	beq.n	80050a6 <TIM_OC5_SetConfig+0x82>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a16      	ldr	r2, [pc, #88]	@ (80050ec <TIM_OC5_SetConfig+0xc8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d007      	beq.n	80050a6 <TIM_OC5_SetConfig+0x82>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a15      	ldr	r2, [pc, #84]	@ (80050f0 <TIM_OC5_SetConfig+0xcc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d003      	beq.n	80050a6 <TIM_OC5_SetConfig+0x82>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a14      	ldr	r2, [pc, #80]	@ (80050f4 <TIM_OC5_SetConfig+0xd0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d109      	bne.n	80050ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	621a      	str	r2, [r3, #32]
}
 80050d4:	bf00      	nop
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40013400 	.word	0x40013400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800
 80050f4:	40015000 	.word	0x40015000

080050f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800513e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	051b      	lsls	r3, r3, #20
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a1a      	ldr	r2, [pc, #104]	@ (80051b8 <TIM_OC6_SetConfig+0xc0>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <TIM_OC6_SetConfig+0x84>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a19      	ldr	r2, [pc, #100]	@ (80051bc <TIM_OC6_SetConfig+0xc4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00f      	beq.n	800517c <TIM_OC6_SetConfig+0x84>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a18      	ldr	r2, [pc, #96]	@ (80051c0 <TIM_OC6_SetConfig+0xc8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_OC6_SetConfig+0x84>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a17      	ldr	r2, [pc, #92]	@ (80051c4 <TIM_OC6_SetConfig+0xcc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d007      	beq.n	800517c <TIM_OC6_SetConfig+0x84>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a16      	ldr	r2, [pc, #88]	@ (80051c8 <TIM_OC6_SetConfig+0xd0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_OC6_SetConfig+0x84>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a15      	ldr	r2, [pc, #84]	@ (80051cc <TIM_OC6_SetConfig+0xd4>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d109      	bne.n	8005190 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	029b      	lsls	r3, r3, #10
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	621a      	str	r2, [r3, #32]
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40012c00 	.word	0x40012c00
 80051bc:	40013400 	.word	0x40013400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800
 80051cc:	40015000 	.word	0x40015000

080051d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2201      	movs	r2, #1
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	401a      	ands	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1a      	ldr	r2, [r3, #32]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005230:	2302      	movs	r3, #2
 8005232:	e06f      	b.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a31      	ldr	r2, [pc, #196]	@ (8005320 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a30      	ldr	r2, [pc, #192]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a2e      	ldr	r2, [pc, #184]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d108      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005278:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800528a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005320 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d01d      	beq.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b4:	d018      	beq.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1c      	ldr	r2, [pc, #112]	@ (800532c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d013      	beq.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005330 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00e      	beq.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a15      	ldr	r2, [pc, #84]	@ (8005324 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d009      	beq.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a16      	ldr	r2, [pc, #88]	@ (8005334 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d004      	beq.n	80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a11      	ldr	r2, [pc, #68]	@ (8005328 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10c      	bne.n	8005302 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40015000 	.word	0x40015000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40014000 	.word	0x40014000

08005338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e042      	b.n	80053d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f83b 	bl	80053d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2224      	movs	r2, #36	@ 0x24
 8005366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0201 	bic.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fbbc 	bl	8005b00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f8bd 	bl	8005508 <UART_SetConfig>
 800538e:	4603      	mov	r3, r0
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e01b      	b.n	80053d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80053a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80053b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fc3b 	bl	8005c44 <UART_CheckIdleState>
 80053ce:	4603      	mov	r3, r0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	@ 0x28
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	2b20      	cmp	r3, #32
 8005404:	d17b      	bne.n	80054fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_UART_Transmit+0x26>
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e074      	b.n	8005500 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2221      	movs	r2, #33	@ 0x21
 8005422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005426:	f7fc fd69 	bl	8001efc <HAL_GetTick>
 800542a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	88fa      	ldrh	r2, [r7, #6]
 8005430:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	88fa      	ldrh	r2, [r7, #6]
 8005438:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005444:	d108      	bne.n	8005458 <HAL_UART_Transmit+0x6c>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d104      	bne.n	8005458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800544e:	2300      	movs	r3, #0
 8005450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e003      	b.n	8005460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005460:	e030      	b.n	80054c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	2180      	movs	r1, #128	@ 0x80
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fc93 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e03d      	b.n	8005500 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10b      	bne.n	80054a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005498:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	3302      	adds	r3, #2
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	e007      	b.n	80054b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	781a      	ldrb	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	3301      	adds	r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1c8      	bne.n	8005462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2200      	movs	r2, #0
 80054d8:	2140      	movs	r1, #64	@ 0x40
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fc5c 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d005      	beq.n	80054f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e006      	b.n	8005500 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	e000      	b.n	8005500 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80054fe:	2302      	movs	r3, #2
  }
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800550c:	b08c      	sub	sp, #48	@ 0x30
 800550e:	af00      	add	r7, sp, #0
 8005510:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	431a      	orrs	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	431a      	orrs	r2, r3
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	4313      	orrs	r3, r2
 800552e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4baa      	ldr	r3, [pc, #680]	@ (80057e0 <UART_SetConfig+0x2d8>)
 8005538:	4013      	ands	r3, r2
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	6812      	ldr	r2, [r2, #0]
 800553e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005540:	430b      	orrs	r3, r1
 8005542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a9f      	ldr	r2, [pc, #636]	@ (80057e4 <UART_SetConfig+0x2dc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005570:	4313      	orrs	r3, r2
 8005572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800557e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	6812      	ldr	r2, [r2, #0]
 8005586:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005588:	430b      	orrs	r3, r1
 800558a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005592:	f023 010f 	bic.w	r1, r3, #15
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a90      	ldr	r2, [pc, #576]	@ (80057e8 <UART_SetConfig+0x2e0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d125      	bne.n	80055f8 <UART_SetConfig+0xf0>
 80055ac:	4b8f      	ldr	r3, [pc, #572]	@ (80057ec <UART_SetConfig+0x2e4>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d81a      	bhi.n	80055f0 <UART_SetConfig+0xe8>
 80055ba:	a201      	add	r2, pc, #4	@ (adr r2, 80055c0 <UART_SetConfig+0xb8>)
 80055bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c0:	080055d1 	.word	0x080055d1
 80055c4:	080055e1 	.word	0x080055e1
 80055c8:	080055d9 	.word	0x080055d9
 80055cc:	080055e9 	.word	0x080055e9
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	e116      	b.n	8005806 <UART_SetConfig+0x2fe>
 80055d8:	2302      	movs	r3, #2
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055de:	e112      	b.n	8005806 <UART_SetConfig+0x2fe>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055e6:	e10e      	b.n	8005806 <UART_SetConfig+0x2fe>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ee:	e10a      	b.n	8005806 <UART_SetConfig+0x2fe>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055f6:	e106      	b.n	8005806 <UART_SetConfig+0x2fe>
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a7c      	ldr	r2, [pc, #496]	@ (80057f0 <UART_SetConfig+0x2e8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d138      	bne.n	8005674 <UART_SetConfig+0x16c>
 8005602:	4b7a      	ldr	r3, [pc, #488]	@ (80057ec <UART_SetConfig+0x2e4>)
 8005604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005608:	f003 030c 	and.w	r3, r3, #12
 800560c:	2b0c      	cmp	r3, #12
 800560e:	d82d      	bhi.n	800566c <UART_SetConfig+0x164>
 8005610:	a201      	add	r2, pc, #4	@ (adr r2, 8005618 <UART_SetConfig+0x110>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	0800564d 	.word	0x0800564d
 800561c:	0800566d 	.word	0x0800566d
 8005620:	0800566d 	.word	0x0800566d
 8005624:	0800566d 	.word	0x0800566d
 8005628:	0800565d 	.word	0x0800565d
 800562c:	0800566d 	.word	0x0800566d
 8005630:	0800566d 	.word	0x0800566d
 8005634:	0800566d 	.word	0x0800566d
 8005638:	08005655 	.word	0x08005655
 800563c:	0800566d 	.word	0x0800566d
 8005640:	0800566d 	.word	0x0800566d
 8005644:	0800566d 	.word	0x0800566d
 8005648:	08005665 	.word	0x08005665
 800564c:	2300      	movs	r3, #0
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005652:	e0d8      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005654:	2302      	movs	r3, #2
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565a:	e0d4      	b.n	8005806 <UART_SetConfig+0x2fe>
 800565c:	2304      	movs	r3, #4
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005662:	e0d0      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005664:	2308      	movs	r3, #8
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566a:	e0cc      	b.n	8005806 <UART_SetConfig+0x2fe>
 800566c:	2310      	movs	r3, #16
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005672:	e0c8      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a5e      	ldr	r2, [pc, #376]	@ (80057f4 <UART_SetConfig+0x2ec>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d125      	bne.n	80056ca <UART_SetConfig+0x1c2>
 800567e:	4b5b      	ldr	r3, [pc, #364]	@ (80057ec <UART_SetConfig+0x2e4>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005684:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005688:	2b30      	cmp	r3, #48	@ 0x30
 800568a:	d016      	beq.n	80056ba <UART_SetConfig+0x1b2>
 800568c:	2b30      	cmp	r3, #48	@ 0x30
 800568e:	d818      	bhi.n	80056c2 <UART_SetConfig+0x1ba>
 8005690:	2b20      	cmp	r3, #32
 8005692:	d00a      	beq.n	80056aa <UART_SetConfig+0x1a2>
 8005694:	2b20      	cmp	r3, #32
 8005696:	d814      	bhi.n	80056c2 <UART_SetConfig+0x1ba>
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <UART_SetConfig+0x19a>
 800569c:	2b10      	cmp	r3, #16
 800569e:	d008      	beq.n	80056b2 <UART_SetConfig+0x1aa>
 80056a0:	e00f      	b.n	80056c2 <UART_SetConfig+0x1ba>
 80056a2:	2300      	movs	r3, #0
 80056a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056a8:	e0ad      	b.n	8005806 <UART_SetConfig+0x2fe>
 80056aa:	2302      	movs	r3, #2
 80056ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b0:	e0a9      	b.n	8005806 <UART_SetConfig+0x2fe>
 80056b2:	2304      	movs	r3, #4
 80056b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056b8:	e0a5      	b.n	8005806 <UART_SetConfig+0x2fe>
 80056ba:	2308      	movs	r3, #8
 80056bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056c0:	e0a1      	b.n	8005806 <UART_SetConfig+0x2fe>
 80056c2:	2310      	movs	r3, #16
 80056c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056c8:	e09d      	b.n	8005806 <UART_SetConfig+0x2fe>
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a4a      	ldr	r2, [pc, #296]	@ (80057f8 <UART_SetConfig+0x2f0>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d125      	bne.n	8005720 <UART_SetConfig+0x218>
 80056d4:	4b45      	ldr	r3, [pc, #276]	@ (80057ec <UART_SetConfig+0x2e4>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80056de:	2bc0      	cmp	r3, #192	@ 0xc0
 80056e0:	d016      	beq.n	8005710 <UART_SetConfig+0x208>
 80056e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80056e4:	d818      	bhi.n	8005718 <UART_SetConfig+0x210>
 80056e6:	2b80      	cmp	r3, #128	@ 0x80
 80056e8:	d00a      	beq.n	8005700 <UART_SetConfig+0x1f8>
 80056ea:	2b80      	cmp	r3, #128	@ 0x80
 80056ec:	d814      	bhi.n	8005718 <UART_SetConfig+0x210>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <UART_SetConfig+0x1f0>
 80056f2:	2b40      	cmp	r3, #64	@ 0x40
 80056f4:	d008      	beq.n	8005708 <UART_SetConfig+0x200>
 80056f6:	e00f      	b.n	8005718 <UART_SetConfig+0x210>
 80056f8:	2300      	movs	r3, #0
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056fe:	e082      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005700:	2302      	movs	r3, #2
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005706:	e07e      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005708:	2304      	movs	r3, #4
 800570a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800570e:	e07a      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005710:	2308      	movs	r3, #8
 8005712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005716:	e076      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005718:	2310      	movs	r3, #16
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800571e:	e072      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a35      	ldr	r2, [pc, #212]	@ (80057fc <UART_SetConfig+0x2f4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d12a      	bne.n	8005780 <UART_SetConfig+0x278>
 800572a:	4b30      	ldr	r3, [pc, #192]	@ (80057ec <UART_SetConfig+0x2e4>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005730:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005734:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005738:	d01a      	beq.n	8005770 <UART_SetConfig+0x268>
 800573a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800573e:	d81b      	bhi.n	8005778 <UART_SetConfig+0x270>
 8005740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005744:	d00c      	beq.n	8005760 <UART_SetConfig+0x258>
 8005746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800574a:	d815      	bhi.n	8005778 <UART_SetConfig+0x270>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <UART_SetConfig+0x250>
 8005750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005754:	d008      	beq.n	8005768 <UART_SetConfig+0x260>
 8005756:	e00f      	b.n	8005778 <UART_SetConfig+0x270>
 8005758:	2300      	movs	r3, #0
 800575a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575e:	e052      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005760:	2302      	movs	r3, #2
 8005762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005766:	e04e      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005768:	2304      	movs	r3, #4
 800576a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576e:	e04a      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005770:	2308      	movs	r3, #8
 8005772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005776:	e046      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005778:	2310      	movs	r3, #16
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577e:	e042      	b.n	8005806 <UART_SetConfig+0x2fe>
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a17      	ldr	r2, [pc, #92]	@ (80057e4 <UART_SetConfig+0x2dc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d13a      	bne.n	8005800 <UART_SetConfig+0x2f8>
 800578a:	4b18      	ldr	r3, [pc, #96]	@ (80057ec <UART_SetConfig+0x2e4>)
 800578c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005790:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005794:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005798:	d01a      	beq.n	80057d0 <UART_SetConfig+0x2c8>
 800579a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800579e:	d81b      	bhi.n	80057d8 <UART_SetConfig+0x2d0>
 80057a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057a4:	d00c      	beq.n	80057c0 <UART_SetConfig+0x2b8>
 80057a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057aa:	d815      	bhi.n	80057d8 <UART_SetConfig+0x2d0>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <UART_SetConfig+0x2b0>
 80057b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057b4:	d008      	beq.n	80057c8 <UART_SetConfig+0x2c0>
 80057b6:	e00f      	b.n	80057d8 <UART_SetConfig+0x2d0>
 80057b8:	2300      	movs	r3, #0
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057be:	e022      	b.n	8005806 <UART_SetConfig+0x2fe>
 80057c0:	2302      	movs	r3, #2
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c6:	e01e      	b.n	8005806 <UART_SetConfig+0x2fe>
 80057c8:	2304      	movs	r3, #4
 80057ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ce:	e01a      	b.n	8005806 <UART_SetConfig+0x2fe>
 80057d0:	2308      	movs	r3, #8
 80057d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057d6:	e016      	b.n	8005806 <UART_SetConfig+0x2fe>
 80057d8:	2310      	movs	r3, #16
 80057da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057de:	e012      	b.n	8005806 <UART_SetConfig+0x2fe>
 80057e0:	cfff69f3 	.word	0xcfff69f3
 80057e4:	40008000 	.word	0x40008000
 80057e8:	40013800 	.word	0x40013800
 80057ec:	40021000 	.word	0x40021000
 80057f0:	40004400 	.word	0x40004400
 80057f4:	40004800 	.word	0x40004800
 80057f8:	40004c00 	.word	0x40004c00
 80057fc:	40005000 	.word	0x40005000
 8005800:	2310      	movs	r3, #16
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4aae      	ldr	r2, [pc, #696]	@ (8005ac4 <UART_SetConfig+0x5bc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	f040 8097 	bne.w	8005940 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005812:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005816:	2b08      	cmp	r3, #8
 8005818:	d823      	bhi.n	8005862 <UART_SetConfig+0x35a>
 800581a:	a201      	add	r2, pc, #4	@ (adr r2, 8005820 <UART_SetConfig+0x318>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005845 	.word	0x08005845
 8005824:	08005863 	.word	0x08005863
 8005828:	0800584d 	.word	0x0800584d
 800582c:	08005863 	.word	0x08005863
 8005830:	08005853 	.word	0x08005853
 8005834:	08005863 	.word	0x08005863
 8005838:	08005863 	.word	0x08005863
 800583c:	08005863 	.word	0x08005863
 8005840:	0800585b 	.word	0x0800585b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005844:	f7fe fbca 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8005848:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800584a:	e010      	b.n	800586e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800584c:	4b9e      	ldr	r3, [pc, #632]	@ (8005ac8 <UART_SetConfig+0x5c0>)
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005850:	e00d      	b.n	800586e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005852:	f7fe fb55 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8005856:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005858:	e009      	b.n	800586e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800585a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005860:	e005      	b.n	800586e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800586c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8130 	beq.w	8005ad6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	4a94      	ldr	r2, [pc, #592]	@ (8005acc <UART_SetConfig+0x5c4>)
 800587c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005880:	461a      	mov	r2, r3
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	fbb3 f3f2 	udiv	r3, r3, r2
 8005888:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	4413      	add	r3, r2
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	429a      	cmp	r2, r3
 8005898:	d305      	bcc.n	80058a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d903      	bls.n	80058ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058ac:	e113      	b.n	8005ad6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	2200      	movs	r2, #0
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	60fa      	str	r2, [r7, #12]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	4a84      	ldr	r2, [pc, #528]	@ (8005acc <UART_SetConfig+0x5c4>)
 80058bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2200      	movs	r2, #0
 80058c4:	603b      	str	r3, [r7, #0]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058d0:	f7fb f992 	bl	8000bf8 <__aeabi_uldivmod>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4610      	mov	r0, r2
 80058da:	4619      	mov	r1, r3
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	020b      	lsls	r3, r1, #8
 80058e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058ea:	0202      	lsls	r2, r0, #8
 80058ec:	6979      	ldr	r1, [r7, #20]
 80058ee:	6849      	ldr	r1, [r1, #4]
 80058f0:	0849      	lsrs	r1, r1, #1
 80058f2:	2000      	movs	r0, #0
 80058f4:	460c      	mov	r4, r1
 80058f6:	4605      	mov	r5, r0
 80058f8:	eb12 0804 	adds.w	r8, r2, r4
 80058fc:	eb43 0905 	adc.w	r9, r3, r5
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	469a      	mov	sl, r3
 8005908:	4693      	mov	fp, r2
 800590a:	4652      	mov	r2, sl
 800590c:	465b      	mov	r3, fp
 800590e:	4640      	mov	r0, r8
 8005910:	4649      	mov	r1, r9
 8005912:	f7fb f971 	bl	8000bf8 <__aeabi_uldivmod>
 8005916:	4602      	mov	r2, r0
 8005918:	460b      	mov	r3, r1
 800591a:	4613      	mov	r3, r2
 800591c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005924:	d308      	bcc.n	8005938 <UART_SetConfig+0x430>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800592c:	d204      	bcs.n	8005938 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a3a      	ldr	r2, [r7, #32]
 8005934:	60da      	str	r2, [r3, #12]
 8005936:	e0ce      	b.n	8005ad6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800593e:	e0ca      	b.n	8005ad6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005948:	d166      	bne.n	8005a18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800594a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800594e:	2b08      	cmp	r3, #8
 8005950:	d827      	bhi.n	80059a2 <UART_SetConfig+0x49a>
 8005952:	a201      	add	r2, pc, #4	@ (adr r2, 8005958 <UART_SetConfig+0x450>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	0800597d 	.word	0x0800597d
 800595c:	08005985 	.word	0x08005985
 8005960:	0800598d 	.word	0x0800598d
 8005964:	080059a3 	.word	0x080059a3
 8005968:	08005993 	.word	0x08005993
 800596c:	080059a3 	.word	0x080059a3
 8005970:	080059a3 	.word	0x080059a3
 8005974:	080059a3 	.word	0x080059a3
 8005978:	0800599b 	.word	0x0800599b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800597c:	f7fe fb2e 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8005980:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005982:	e014      	b.n	80059ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005984:	f7fe fb40 	bl	8004008 <HAL_RCC_GetPCLK2Freq>
 8005988:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800598a:	e010      	b.n	80059ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800598c:	4b4e      	ldr	r3, [pc, #312]	@ (8005ac8 <UART_SetConfig+0x5c0>)
 800598e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005990:	e00d      	b.n	80059ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005992:	f7fe fab5 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8005996:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005998:	e009      	b.n	80059ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800599a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059a0:	e005      	b.n	80059ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8090 	beq.w	8005ad6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ba:	4a44      	ldr	r2, [pc, #272]	@ (8005acc <UART_SetConfig+0x5c4>)
 80059bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80059c8:	005a      	lsls	r2, r3, #1
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	441a      	add	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	d916      	bls.n	8005a10 <UART_SetConfig+0x508>
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e8:	d212      	bcs.n	8005a10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f023 030f 	bic.w	r3, r3, #15
 80059f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	8bfb      	ldrh	r3, [r7, #30]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	8bfa      	ldrh	r2, [r7, #30]
 8005a0c:	60da      	str	r2, [r3, #12]
 8005a0e:	e062      	b.n	8005ad6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a16:	e05e      	b.n	8005ad6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d828      	bhi.n	8005a72 <UART_SetConfig+0x56a>
 8005a20:	a201      	add	r2, pc, #4	@ (adr r2, 8005a28 <UART_SetConfig+0x520>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a55 	.word	0x08005a55
 8005a30:	08005a5d 	.word	0x08005a5d
 8005a34:	08005a73 	.word	0x08005a73
 8005a38:	08005a63 	.word	0x08005a63
 8005a3c:	08005a73 	.word	0x08005a73
 8005a40:	08005a73 	.word	0x08005a73
 8005a44:	08005a73 	.word	0x08005a73
 8005a48:	08005a6b 	.word	0x08005a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a4c:	f7fe fac6 	bl	8003fdc <HAL_RCC_GetPCLK1Freq>
 8005a50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a52:	e014      	b.n	8005a7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a54:	f7fe fad8 	bl	8004008 <HAL_RCC_GetPCLK2Freq>
 8005a58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a5a:	e010      	b.n	8005a7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac8 <UART_SetConfig+0x5c0>)
 8005a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a60:	e00d      	b.n	8005a7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a62:	f7fe fa4d 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8005a66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a68:	e009      	b.n	8005a7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a70:	e005      	b.n	8005a7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a7c:	bf00      	nop
    }

    if (pclk != 0U)
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d028      	beq.n	8005ad6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a88:	4a10      	ldr	r2, [pc, #64]	@ (8005acc <UART_SetConfig+0x5c4>)
 8005a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	441a      	add	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	2b0f      	cmp	r3, #15
 8005aac:	d910      	bls.n	8005ad0 <UART_SetConfig+0x5c8>
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab4:	d20c      	bcs.n	8005ad0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60da      	str	r2, [r3, #12]
 8005ac0:	e009      	b.n	8005ad6 <UART_SetConfig+0x5ce>
 8005ac2:	bf00      	nop
 8005ac4:	40008000 	.word	0x40008000
 8005ac8:	00f42400 	.word	0x00f42400
 8005acc:	08008a58 	.word	0x08008a58
      }
      else
      {
        ret = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2200      	movs	r2, #0
 8005af0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005af2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3730      	adds	r7, #48	@ 0x30
 8005afa:	46bd      	mov	sp, r7
 8005afc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00a      	beq.n	8005b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00a      	beq.n	8005b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00a      	beq.n	8005b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d00a      	beq.n	8005bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01a      	beq.n	8005c16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bfe:	d10a      	bne.n	8005c16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]
  }
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b098      	sub	sp, #96	@ 0x60
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c54:	f7fc f952 	bl	8001efc <HAL_GetTick>
 8005c58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d12f      	bne.n	8005cc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c70:	2200      	movs	r2, #0
 8005c72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f88e 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d022      	beq.n	8005cc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c96:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ca0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ca2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e6      	bne.n	8005c82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e063      	b.n	8005d90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b04      	cmp	r3, #4
 8005cd4:	d149      	bne.n	8005d6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f857 	bl	8005d98 <UART_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d03c      	beq.n	8005d6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d16:	e841 2300 	strex	r3, r2, [r1]
 8005d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e6      	bne.n	8005cf0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f023 0301 	bic.w	r3, r3, #1
 8005d38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	3308      	adds	r3, #8
 8005d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d42:	61fa      	str	r2, [r7, #28]
 8005d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	69b9      	ldr	r1, [r7, #24]
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e5      	bne.n	8005d22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e012      	b.n	8005d90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3758      	adds	r7, #88	@ 0x58
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da8:	e04f      	b.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d04b      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db2:	f7fc f8a3 	bl	8001efc <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d302      	bcc.n	8005dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e04e      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d037      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b80      	cmp	r3, #128	@ 0x80
 8005dde:	d034      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	2b40      	cmp	r3, #64	@ 0x40
 8005de4:	d031      	beq.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b08      	cmp	r3, #8
 8005df2:	d110      	bne.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f838 	bl	8005e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2208      	movs	r2, #8
 8005e06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e029      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e24:	d111      	bne.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f81e 	bl	8005e72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e00f      	b.n	8005e6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	bf0c      	ite	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d0a0      	beq.n	8005daa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b095      	sub	sp, #84	@ 0x54
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e6      	bne.n	8005e7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e3      	bne.n	8005eac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d118      	bne.n	8005f1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f023 0310 	bic.w	r3, r3, #16
 8005f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6979      	ldr	r1, [r7, #20]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	613b      	str	r3, [r7, #16]
   return(result);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e6      	bne.n	8005eec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f32:	bf00      	nop
 8005f34:	3754      	adds	r7, #84	@ 0x54
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <__cvt>:
 8005f3e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f42:	ec57 6b10 	vmov	r6, r7, d0
 8005f46:	2f00      	cmp	r7, #0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	463b      	mov	r3, r7
 8005f4e:	bfbb      	ittet	lt
 8005f50:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f54:	461f      	movlt	r7, r3
 8005f56:	2300      	movge	r3, #0
 8005f58:	232d      	movlt	r3, #45	@ 0x2d
 8005f5a:	700b      	strb	r3, [r1, #0]
 8005f5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f5e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f62:	4691      	mov	r9, r2
 8005f64:	f023 0820 	bic.w	r8, r3, #32
 8005f68:	bfbc      	itt	lt
 8005f6a:	4632      	movlt	r2, r6
 8005f6c:	4616      	movlt	r6, r2
 8005f6e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f72:	d005      	beq.n	8005f80 <__cvt+0x42>
 8005f74:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f78:	d100      	bne.n	8005f7c <__cvt+0x3e>
 8005f7a:	3401      	adds	r4, #1
 8005f7c:	2102      	movs	r1, #2
 8005f7e:	e000      	b.n	8005f82 <__cvt+0x44>
 8005f80:	2103      	movs	r1, #3
 8005f82:	ab03      	add	r3, sp, #12
 8005f84:	9301      	str	r3, [sp, #4]
 8005f86:	ab02      	add	r3, sp, #8
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	ec47 6b10 	vmov	d0, r6, r7
 8005f8e:	4653      	mov	r3, sl
 8005f90:	4622      	mov	r2, r4
 8005f92:	f000 fe59 	bl	8006c48 <_dtoa_r>
 8005f96:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	d119      	bne.n	8005fd2 <__cvt+0x94>
 8005f9e:	f019 0f01 	tst.w	r9, #1
 8005fa2:	d00e      	beq.n	8005fc2 <__cvt+0x84>
 8005fa4:	eb00 0904 	add.w	r9, r0, r4
 8005fa8:	2200      	movs	r2, #0
 8005faa:	2300      	movs	r3, #0
 8005fac:	4630      	mov	r0, r6
 8005fae:	4639      	mov	r1, r7
 8005fb0:	f7fa fdb2 	bl	8000b18 <__aeabi_dcmpeq>
 8005fb4:	b108      	cbz	r0, 8005fba <__cvt+0x7c>
 8005fb6:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fba:	2230      	movs	r2, #48	@ 0x30
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	454b      	cmp	r3, r9
 8005fc0:	d31e      	bcc.n	8006000 <__cvt+0xc2>
 8005fc2:	9b03      	ldr	r3, [sp, #12]
 8005fc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fc6:	1b5b      	subs	r3, r3, r5
 8005fc8:	4628      	mov	r0, r5
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	b004      	add	sp, #16
 8005fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fd6:	eb00 0904 	add.w	r9, r0, r4
 8005fda:	d1e5      	bne.n	8005fa8 <__cvt+0x6a>
 8005fdc:	7803      	ldrb	r3, [r0, #0]
 8005fde:	2b30      	cmp	r3, #48	@ 0x30
 8005fe0:	d10a      	bne.n	8005ff8 <__cvt+0xba>
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	4639      	mov	r1, r7
 8005fea:	f7fa fd95 	bl	8000b18 <__aeabi_dcmpeq>
 8005fee:	b918      	cbnz	r0, 8005ff8 <__cvt+0xba>
 8005ff0:	f1c4 0401 	rsb	r4, r4, #1
 8005ff4:	f8ca 4000 	str.w	r4, [sl]
 8005ff8:	f8da 3000 	ldr.w	r3, [sl]
 8005ffc:	4499      	add	r9, r3
 8005ffe:	e7d3      	b.n	8005fa8 <__cvt+0x6a>
 8006000:	1c59      	adds	r1, r3, #1
 8006002:	9103      	str	r1, [sp, #12]
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	e7d9      	b.n	8005fbc <__cvt+0x7e>

08006008 <__exponent>:
 8006008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800600a:	2900      	cmp	r1, #0
 800600c:	bfba      	itte	lt
 800600e:	4249      	neglt	r1, r1
 8006010:	232d      	movlt	r3, #45	@ 0x2d
 8006012:	232b      	movge	r3, #43	@ 0x2b
 8006014:	2909      	cmp	r1, #9
 8006016:	7002      	strb	r2, [r0, #0]
 8006018:	7043      	strb	r3, [r0, #1]
 800601a:	dd29      	ble.n	8006070 <__exponent+0x68>
 800601c:	f10d 0307 	add.w	r3, sp, #7
 8006020:	461d      	mov	r5, r3
 8006022:	270a      	movs	r7, #10
 8006024:	461a      	mov	r2, r3
 8006026:	fbb1 f6f7 	udiv	r6, r1, r7
 800602a:	fb07 1416 	mls	r4, r7, r6, r1
 800602e:	3430      	adds	r4, #48	@ 0x30
 8006030:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006034:	460c      	mov	r4, r1
 8006036:	2c63      	cmp	r4, #99	@ 0x63
 8006038:	f103 33ff 	add.w	r3, r3, #4294967295
 800603c:	4631      	mov	r1, r6
 800603e:	dcf1      	bgt.n	8006024 <__exponent+0x1c>
 8006040:	3130      	adds	r1, #48	@ 0x30
 8006042:	1e94      	subs	r4, r2, #2
 8006044:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006048:	1c41      	adds	r1, r0, #1
 800604a:	4623      	mov	r3, r4
 800604c:	42ab      	cmp	r3, r5
 800604e:	d30a      	bcc.n	8006066 <__exponent+0x5e>
 8006050:	f10d 0309 	add.w	r3, sp, #9
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	42ac      	cmp	r4, r5
 8006058:	bf88      	it	hi
 800605a:	2300      	movhi	r3, #0
 800605c:	3302      	adds	r3, #2
 800605e:	4403      	add	r3, r0
 8006060:	1a18      	subs	r0, r3, r0
 8006062:	b003      	add	sp, #12
 8006064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006066:	f813 6b01 	ldrb.w	r6, [r3], #1
 800606a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800606e:	e7ed      	b.n	800604c <__exponent+0x44>
 8006070:	2330      	movs	r3, #48	@ 0x30
 8006072:	3130      	adds	r1, #48	@ 0x30
 8006074:	7083      	strb	r3, [r0, #2]
 8006076:	70c1      	strb	r1, [r0, #3]
 8006078:	1d03      	adds	r3, r0, #4
 800607a:	e7f1      	b.n	8006060 <__exponent+0x58>

0800607c <_printf_float>:
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	b08d      	sub	sp, #52	@ 0x34
 8006082:	460c      	mov	r4, r1
 8006084:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006088:	4616      	mov	r6, r2
 800608a:	461f      	mov	r7, r3
 800608c:	4605      	mov	r5, r0
 800608e:	f000 fccd 	bl	8006a2c <_localeconv_r>
 8006092:	6803      	ldr	r3, [r0, #0]
 8006094:	9304      	str	r3, [sp, #16]
 8006096:	4618      	mov	r0, r3
 8006098:	f7fa f912 	bl	80002c0 <strlen>
 800609c:	2300      	movs	r3, #0
 800609e:	930a      	str	r3, [sp, #40]	@ 0x28
 80060a0:	f8d8 3000 	ldr.w	r3, [r8]
 80060a4:	9005      	str	r0, [sp, #20]
 80060a6:	3307      	adds	r3, #7
 80060a8:	f023 0307 	bic.w	r3, r3, #7
 80060ac:	f103 0208 	add.w	r2, r3, #8
 80060b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060b4:	f8d4 b000 	ldr.w	fp, [r4]
 80060b8:	f8c8 2000 	str.w	r2, [r8]
 80060bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060c4:	9307      	str	r3, [sp, #28]
 80060c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80060ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060d2:	4b9c      	ldr	r3, [pc, #624]	@ (8006344 <_printf_float+0x2c8>)
 80060d4:	f04f 32ff 	mov.w	r2, #4294967295
 80060d8:	f7fa fd50 	bl	8000b7c <__aeabi_dcmpun>
 80060dc:	bb70      	cbnz	r0, 800613c <_printf_float+0xc0>
 80060de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060e2:	4b98      	ldr	r3, [pc, #608]	@ (8006344 <_printf_float+0x2c8>)
 80060e4:	f04f 32ff 	mov.w	r2, #4294967295
 80060e8:	f7fa fd2a 	bl	8000b40 <__aeabi_dcmple>
 80060ec:	bb30      	cbnz	r0, 800613c <_printf_float+0xc0>
 80060ee:	2200      	movs	r2, #0
 80060f0:	2300      	movs	r3, #0
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa fd19 	bl	8000b2c <__aeabi_dcmplt>
 80060fa:	b110      	cbz	r0, 8006102 <_printf_float+0x86>
 80060fc:	232d      	movs	r3, #45	@ 0x2d
 80060fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006102:	4a91      	ldr	r2, [pc, #580]	@ (8006348 <_printf_float+0x2cc>)
 8006104:	4b91      	ldr	r3, [pc, #580]	@ (800634c <_printf_float+0x2d0>)
 8006106:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800610a:	bf94      	ite	ls
 800610c:	4690      	movls	r8, r2
 800610e:	4698      	movhi	r8, r3
 8006110:	2303      	movs	r3, #3
 8006112:	6123      	str	r3, [r4, #16]
 8006114:	f02b 0304 	bic.w	r3, fp, #4
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	f04f 0900 	mov.w	r9, #0
 800611e:	9700      	str	r7, [sp, #0]
 8006120:	4633      	mov	r3, r6
 8006122:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006124:	4621      	mov	r1, r4
 8006126:	4628      	mov	r0, r5
 8006128:	f000 f9d2 	bl	80064d0 <_printf_common>
 800612c:	3001      	adds	r0, #1
 800612e:	f040 808d 	bne.w	800624c <_printf_float+0x1d0>
 8006132:	f04f 30ff 	mov.w	r0, #4294967295
 8006136:	b00d      	add	sp, #52	@ 0x34
 8006138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613c:	4642      	mov	r2, r8
 800613e:	464b      	mov	r3, r9
 8006140:	4640      	mov	r0, r8
 8006142:	4649      	mov	r1, r9
 8006144:	f7fa fd1a 	bl	8000b7c <__aeabi_dcmpun>
 8006148:	b140      	cbz	r0, 800615c <_printf_float+0xe0>
 800614a:	464b      	mov	r3, r9
 800614c:	2b00      	cmp	r3, #0
 800614e:	bfbc      	itt	lt
 8006150:	232d      	movlt	r3, #45	@ 0x2d
 8006152:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006156:	4a7e      	ldr	r2, [pc, #504]	@ (8006350 <_printf_float+0x2d4>)
 8006158:	4b7e      	ldr	r3, [pc, #504]	@ (8006354 <_printf_float+0x2d8>)
 800615a:	e7d4      	b.n	8006106 <_printf_float+0x8a>
 800615c:	6863      	ldr	r3, [r4, #4]
 800615e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006162:	9206      	str	r2, [sp, #24]
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	d13b      	bne.n	80061e0 <_printf_float+0x164>
 8006168:	2306      	movs	r3, #6
 800616a:	6063      	str	r3, [r4, #4]
 800616c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006170:	2300      	movs	r3, #0
 8006172:	6022      	str	r2, [r4, #0]
 8006174:	9303      	str	r3, [sp, #12]
 8006176:	ab0a      	add	r3, sp, #40	@ 0x28
 8006178:	e9cd a301 	strd	sl, r3, [sp, #4]
 800617c:	ab09      	add	r3, sp, #36	@ 0x24
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	6861      	ldr	r1, [r4, #4]
 8006182:	ec49 8b10 	vmov	d0, r8, r9
 8006186:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800618a:	4628      	mov	r0, r5
 800618c:	f7ff fed7 	bl	8005f3e <__cvt>
 8006190:	9b06      	ldr	r3, [sp, #24]
 8006192:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006194:	2b47      	cmp	r3, #71	@ 0x47
 8006196:	4680      	mov	r8, r0
 8006198:	d129      	bne.n	80061ee <_printf_float+0x172>
 800619a:	1cc8      	adds	r0, r1, #3
 800619c:	db02      	blt.n	80061a4 <_printf_float+0x128>
 800619e:	6863      	ldr	r3, [r4, #4]
 80061a0:	4299      	cmp	r1, r3
 80061a2:	dd41      	ble.n	8006228 <_printf_float+0x1ac>
 80061a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80061a8:	fa5f fa8a 	uxtb.w	sl, sl
 80061ac:	3901      	subs	r1, #1
 80061ae:	4652      	mov	r2, sl
 80061b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80061b6:	f7ff ff27 	bl	8006008 <__exponent>
 80061ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061bc:	1813      	adds	r3, r2, r0
 80061be:	2a01      	cmp	r2, #1
 80061c0:	4681      	mov	r9, r0
 80061c2:	6123      	str	r3, [r4, #16]
 80061c4:	dc02      	bgt.n	80061cc <_printf_float+0x150>
 80061c6:	6822      	ldr	r2, [r4, #0]
 80061c8:	07d2      	lsls	r2, r2, #31
 80061ca:	d501      	bpl.n	80061d0 <_printf_float+0x154>
 80061cc:	3301      	adds	r3, #1
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0a2      	beq.n	800611e <_printf_float+0xa2>
 80061d8:	232d      	movs	r3, #45	@ 0x2d
 80061da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061de:	e79e      	b.n	800611e <_printf_float+0xa2>
 80061e0:	9a06      	ldr	r2, [sp, #24]
 80061e2:	2a47      	cmp	r2, #71	@ 0x47
 80061e4:	d1c2      	bne.n	800616c <_printf_float+0xf0>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1c0      	bne.n	800616c <_printf_float+0xf0>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e7bd      	b.n	800616a <_printf_float+0xee>
 80061ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061f2:	d9db      	bls.n	80061ac <_printf_float+0x130>
 80061f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061f8:	d118      	bne.n	800622c <_printf_float+0x1b0>
 80061fa:	2900      	cmp	r1, #0
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	dd0b      	ble.n	8006218 <_printf_float+0x19c>
 8006200:	6121      	str	r1, [r4, #16]
 8006202:	b913      	cbnz	r3, 800620a <_printf_float+0x18e>
 8006204:	6822      	ldr	r2, [r4, #0]
 8006206:	07d0      	lsls	r0, r2, #31
 8006208:	d502      	bpl.n	8006210 <_printf_float+0x194>
 800620a:	3301      	adds	r3, #1
 800620c:	440b      	add	r3, r1
 800620e:	6123      	str	r3, [r4, #16]
 8006210:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006212:	f04f 0900 	mov.w	r9, #0
 8006216:	e7db      	b.n	80061d0 <_printf_float+0x154>
 8006218:	b913      	cbnz	r3, 8006220 <_printf_float+0x1a4>
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	07d2      	lsls	r2, r2, #31
 800621e:	d501      	bpl.n	8006224 <_printf_float+0x1a8>
 8006220:	3302      	adds	r3, #2
 8006222:	e7f4      	b.n	800620e <_printf_float+0x192>
 8006224:	2301      	movs	r3, #1
 8006226:	e7f2      	b.n	800620e <_printf_float+0x192>
 8006228:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800622c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800622e:	4299      	cmp	r1, r3
 8006230:	db05      	blt.n	800623e <_printf_float+0x1c2>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	6121      	str	r1, [r4, #16]
 8006236:	07d8      	lsls	r0, r3, #31
 8006238:	d5ea      	bpl.n	8006210 <_printf_float+0x194>
 800623a:	1c4b      	adds	r3, r1, #1
 800623c:	e7e7      	b.n	800620e <_printf_float+0x192>
 800623e:	2900      	cmp	r1, #0
 8006240:	bfd4      	ite	le
 8006242:	f1c1 0202 	rsble	r2, r1, #2
 8006246:	2201      	movgt	r2, #1
 8006248:	4413      	add	r3, r2
 800624a:	e7e0      	b.n	800620e <_printf_float+0x192>
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	055a      	lsls	r2, r3, #21
 8006250:	d407      	bmi.n	8006262 <_printf_float+0x1e6>
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	4642      	mov	r2, r8
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	d12b      	bne.n	80062b8 <_printf_float+0x23c>
 8006260:	e767      	b.n	8006132 <_printf_float+0xb6>
 8006262:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006266:	f240 80dd 	bls.w	8006424 <_printf_float+0x3a8>
 800626a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800626e:	2200      	movs	r2, #0
 8006270:	2300      	movs	r3, #0
 8006272:	f7fa fc51 	bl	8000b18 <__aeabi_dcmpeq>
 8006276:	2800      	cmp	r0, #0
 8006278:	d033      	beq.n	80062e2 <_printf_float+0x266>
 800627a:	4a37      	ldr	r2, [pc, #220]	@ (8006358 <_printf_float+0x2dc>)
 800627c:	2301      	movs	r3, #1
 800627e:	4631      	mov	r1, r6
 8006280:	4628      	mov	r0, r5
 8006282:	47b8      	blx	r7
 8006284:	3001      	adds	r0, #1
 8006286:	f43f af54 	beq.w	8006132 <_printf_float+0xb6>
 800628a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800628e:	4543      	cmp	r3, r8
 8006290:	db02      	blt.n	8006298 <_printf_float+0x21c>
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	07d8      	lsls	r0, r3, #31
 8006296:	d50f      	bpl.n	80062b8 <_printf_float+0x23c>
 8006298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800629c:	4631      	mov	r1, r6
 800629e:	4628      	mov	r0, r5
 80062a0:	47b8      	blx	r7
 80062a2:	3001      	adds	r0, #1
 80062a4:	f43f af45 	beq.w	8006132 <_printf_float+0xb6>
 80062a8:	f04f 0900 	mov.w	r9, #0
 80062ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80062b0:	f104 0a1a 	add.w	sl, r4, #26
 80062b4:	45c8      	cmp	r8, r9
 80062b6:	dc09      	bgt.n	80062cc <_printf_float+0x250>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	079b      	lsls	r3, r3, #30
 80062bc:	f100 8103 	bmi.w	80064c6 <_printf_float+0x44a>
 80062c0:	68e0      	ldr	r0, [r4, #12]
 80062c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062c4:	4298      	cmp	r0, r3
 80062c6:	bfb8      	it	lt
 80062c8:	4618      	movlt	r0, r3
 80062ca:	e734      	b.n	8006136 <_printf_float+0xba>
 80062cc:	2301      	movs	r3, #1
 80062ce:	4652      	mov	r2, sl
 80062d0:	4631      	mov	r1, r6
 80062d2:	4628      	mov	r0, r5
 80062d4:	47b8      	blx	r7
 80062d6:	3001      	adds	r0, #1
 80062d8:	f43f af2b 	beq.w	8006132 <_printf_float+0xb6>
 80062dc:	f109 0901 	add.w	r9, r9, #1
 80062e0:	e7e8      	b.n	80062b4 <_printf_float+0x238>
 80062e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	dc39      	bgt.n	800635c <_printf_float+0x2e0>
 80062e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006358 <_printf_float+0x2dc>)
 80062ea:	2301      	movs	r3, #1
 80062ec:	4631      	mov	r1, r6
 80062ee:	4628      	mov	r0, r5
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	f43f af1d 	beq.w	8006132 <_printf_float+0xb6>
 80062f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80062fc:	ea59 0303 	orrs.w	r3, r9, r3
 8006300:	d102      	bne.n	8006308 <_printf_float+0x28c>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	07d9      	lsls	r1, r3, #31
 8006306:	d5d7      	bpl.n	80062b8 <_printf_float+0x23c>
 8006308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800630c:	4631      	mov	r1, r6
 800630e:	4628      	mov	r0, r5
 8006310:	47b8      	blx	r7
 8006312:	3001      	adds	r0, #1
 8006314:	f43f af0d 	beq.w	8006132 <_printf_float+0xb6>
 8006318:	f04f 0a00 	mov.w	sl, #0
 800631c:	f104 0b1a 	add.w	fp, r4, #26
 8006320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006322:	425b      	negs	r3, r3
 8006324:	4553      	cmp	r3, sl
 8006326:	dc01      	bgt.n	800632c <_printf_float+0x2b0>
 8006328:	464b      	mov	r3, r9
 800632a:	e793      	b.n	8006254 <_printf_float+0x1d8>
 800632c:	2301      	movs	r3, #1
 800632e:	465a      	mov	r2, fp
 8006330:	4631      	mov	r1, r6
 8006332:	4628      	mov	r0, r5
 8006334:	47b8      	blx	r7
 8006336:	3001      	adds	r0, #1
 8006338:	f43f aefb 	beq.w	8006132 <_printf_float+0xb6>
 800633c:	f10a 0a01 	add.w	sl, sl, #1
 8006340:	e7ee      	b.n	8006320 <_printf_float+0x2a4>
 8006342:	bf00      	nop
 8006344:	7fefffff 	.word	0x7fefffff
 8006348:	08008a70 	.word	0x08008a70
 800634c:	08008a74 	.word	0x08008a74
 8006350:	08008a78 	.word	0x08008a78
 8006354:	08008a7c 	.word	0x08008a7c
 8006358:	08008a80 	.word	0x08008a80
 800635c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800635e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006362:	4553      	cmp	r3, sl
 8006364:	bfa8      	it	ge
 8006366:	4653      	movge	r3, sl
 8006368:	2b00      	cmp	r3, #0
 800636a:	4699      	mov	r9, r3
 800636c:	dc36      	bgt.n	80063dc <_printf_float+0x360>
 800636e:	f04f 0b00 	mov.w	fp, #0
 8006372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006376:	f104 021a 	add.w	r2, r4, #26
 800637a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800637c:	9306      	str	r3, [sp, #24]
 800637e:	eba3 0309 	sub.w	r3, r3, r9
 8006382:	455b      	cmp	r3, fp
 8006384:	dc31      	bgt.n	80063ea <_printf_float+0x36e>
 8006386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006388:	459a      	cmp	sl, r3
 800638a:	dc3a      	bgt.n	8006402 <_printf_float+0x386>
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	07da      	lsls	r2, r3, #31
 8006390:	d437      	bmi.n	8006402 <_printf_float+0x386>
 8006392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006394:	ebaa 0903 	sub.w	r9, sl, r3
 8006398:	9b06      	ldr	r3, [sp, #24]
 800639a:	ebaa 0303 	sub.w	r3, sl, r3
 800639e:	4599      	cmp	r9, r3
 80063a0:	bfa8      	it	ge
 80063a2:	4699      	movge	r9, r3
 80063a4:	f1b9 0f00 	cmp.w	r9, #0
 80063a8:	dc33      	bgt.n	8006412 <_printf_float+0x396>
 80063aa:	f04f 0800 	mov.w	r8, #0
 80063ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063b2:	f104 0b1a 	add.w	fp, r4, #26
 80063b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b8:	ebaa 0303 	sub.w	r3, sl, r3
 80063bc:	eba3 0309 	sub.w	r3, r3, r9
 80063c0:	4543      	cmp	r3, r8
 80063c2:	f77f af79 	ble.w	80062b8 <_printf_float+0x23c>
 80063c6:	2301      	movs	r3, #1
 80063c8:	465a      	mov	r2, fp
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f aeae 	beq.w	8006132 <_printf_float+0xb6>
 80063d6:	f108 0801 	add.w	r8, r8, #1
 80063da:	e7ec      	b.n	80063b6 <_printf_float+0x33a>
 80063dc:	4642      	mov	r2, r8
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	d1c2      	bne.n	800636e <_printf_float+0x2f2>
 80063e8:	e6a3      	b.n	8006132 <_printf_float+0xb6>
 80063ea:	2301      	movs	r3, #1
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	9206      	str	r2, [sp, #24]
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	f43f ae9c 	beq.w	8006132 <_printf_float+0xb6>
 80063fa:	9a06      	ldr	r2, [sp, #24]
 80063fc:	f10b 0b01 	add.w	fp, fp, #1
 8006400:	e7bb      	b.n	800637a <_printf_float+0x2fe>
 8006402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006406:	4631      	mov	r1, r6
 8006408:	4628      	mov	r0, r5
 800640a:	47b8      	blx	r7
 800640c:	3001      	adds	r0, #1
 800640e:	d1c0      	bne.n	8006392 <_printf_float+0x316>
 8006410:	e68f      	b.n	8006132 <_printf_float+0xb6>
 8006412:	9a06      	ldr	r2, [sp, #24]
 8006414:	464b      	mov	r3, r9
 8006416:	4442      	add	r2, r8
 8006418:	4631      	mov	r1, r6
 800641a:	4628      	mov	r0, r5
 800641c:	47b8      	blx	r7
 800641e:	3001      	adds	r0, #1
 8006420:	d1c3      	bne.n	80063aa <_printf_float+0x32e>
 8006422:	e686      	b.n	8006132 <_printf_float+0xb6>
 8006424:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006428:	f1ba 0f01 	cmp.w	sl, #1
 800642c:	dc01      	bgt.n	8006432 <_printf_float+0x3b6>
 800642e:	07db      	lsls	r3, r3, #31
 8006430:	d536      	bpl.n	80064a0 <_printf_float+0x424>
 8006432:	2301      	movs	r3, #1
 8006434:	4642      	mov	r2, r8
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f ae78 	beq.w	8006132 <_printf_float+0xb6>
 8006442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	f43f ae70 	beq.w	8006132 <_printf_float+0xb6>
 8006452:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006456:	2200      	movs	r2, #0
 8006458:	2300      	movs	r3, #0
 800645a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800645e:	f7fa fb5b 	bl	8000b18 <__aeabi_dcmpeq>
 8006462:	b9c0      	cbnz	r0, 8006496 <_printf_float+0x41a>
 8006464:	4653      	mov	r3, sl
 8006466:	f108 0201 	add.w	r2, r8, #1
 800646a:	4631      	mov	r1, r6
 800646c:	4628      	mov	r0, r5
 800646e:	47b8      	blx	r7
 8006470:	3001      	adds	r0, #1
 8006472:	d10c      	bne.n	800648e <_printf_float+0x412>
 8006474:	e65d      	b.n	8006132 <_printf_float+0xb6>
 8006476:	2301      	movs	r3, #1
 8006478:	465a      	mov	r2, fp
 800647a:	4631      	mov	r1, r6
 800647c:	4628      	mov	r0, r5
 800647e:	47b8      	blx	r7
 8006480:	3001      	adds	r0, #1
 8006482:	f43f ae56 	beq.w	8006132 <_printf_float+0xb6>
 8006486:	f108 0801 	add.w	r8, r8, #1
 800648a:	45d0      	cmp	r8, sl
 800648c:	dbf3      	blt.n	8006476 <_printf_float+0x3fa>
 800648e:	464b      	mov	r3, r9
 8006490:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006494:	e6df      	b.n	8006256 <_printf_float+0x1da>
 8006496:	f04f 0800 	mov.w	r8, #0
 800649a:	f104 0b1a 	add.w	fp, r4, #26
 800649e:	e7f4      	b.n	800648a <_printf_float+0x40e>
 80064a0:	2301      	movs	r3, #1
 80064a2:	4642      	mov	r2, r8
 80064a4:	e7e1      	b.n	800646a <_printf_float+0x3ee>
 80064a6:	2301      	movs	r3, #1
 80064a8:	464a      	mov	r2, r9
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f ae3e 	beq.w	8006132 <_printf_float+0xb6>
 80064b6:	f108 0801 	add.w	r8, r8, #1
 80064ba:	68e3      	ldr	r3, [r4, #12]
 80064bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064be:	1a5b      	subs	r3, r3, r1
 80064c0:	4543      	cmp	r3, r8
 80064c2:	dcf0      	bgt.n	80064a6 <_printf_float+0x42a>
 80064c4:	e6fc      	b.n	80062c0 <_printf_float+0x244>
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	f104 0919 	add.w	r9, r4, #25
 80064ce:	e7f4      	b.n	80064ba <_printf_float+0x43e>

080064d0 <_printf_common>:
 80064d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d4:	4616      	mov	r6, r2
 80064d6:	4698      	mov	r8, r3
 80064d8:	688a      	ldr	r2, [r1, #8]
 80064da:	690b      	ldr	r3, [r1, #16]
 80064dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064e0:	4293      	cmp	r3, r2
 80064e2:	bfb8      	it	lt
 80064e4:	4613      	movlt	r3, r2
 80064e6:	6033      	str	r3, [r6, #0]
 80064e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064ec:	4607      	mov	r7, r0
 80064ee:	460c      	mov	r4, r1
 80064f0:	b10a      	cbz	r2, 80064f6 <_printf_common+0x26>
 80064f2:	3301      	adds	r3, #1
 80064f4:	6033      	str	r3, [r6, #0]
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	0699      	lsls	r1, r3, #26
 80064fa:	bf42      	ittt	mi
 80064fc:	6833      	ldrmi	r3, [r6, #0]
 80064fe:	3302      	addmi	r3, #2
 8006500:	6033      	strmi	r3, [r6, #0]
 8006502:	6825      	ldr	r5, [r4, #0]
 8006504:	f015 0506 	ands.w	r5, r5, #6
 8006508:	d106      	bne.n	8006518 <_printf_common+0x48>
 800650a:	f104 0a19 	add.w	sl, r4, #25
 800650e:	68e3      	ldr	r3, [r4, #12]
 8006510:	6832      	ldr	r2, [r6, #0]
 8006512:	1a9b      	subs	r3, r3, r2
 8006514:	42ab      	cmp	r3, r5
 8006516:	dc26      	bgt.n	8006566 <_printf_common+0x96>
 8006518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800651c:	6822      	ldr	r2, [r4, #0]
 800651e:	3b00      	subs	r3, #0
 8006520:	bf18      	it	ne
 8006522:	2301      	movne	r3, #1
 8006524:	0692      	lsls	r2, r2, #26
 8006526:	d42b      	bmi.n	8006580 <_printf_common+0xb0>
 8006528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800652c:	4641      	mov	r1, r8
 800652e:	4638      	mov	r0, r7
 8006530:	47c8      	blx	r9
 8006532:	3001      	adds	r0, #1
 8006534:	d01e      	beq.n	8006574 <_printf_common+0xa4>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	6922      	ldr	r2, [r4, #16]
 800653a:	f003 0306 	and.w	r3, r3, #6
 800653e:	2b04      	cmp	r3, #4
 8006540:	bf02      	ittt	eq
 8006542:	68e5      	ldreq	r5, [r4, #12]
 8006544:	6833      	ldreq	r3, [r6, #0]
 8006546:	1aed      	subeq	r5, r5, r3
 8006548:	68a3      	ldr	r3, [r4, #8]
 800654a:	bf0c      	ite	eq
 800654c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006550:	2500      	movne	r5, #0
 8006552:	4293      	cmp	r3, r2
 8006554:	bfc4      	itt	gt
 8006556:	1a9b      	subgt	r3, r3, r2
 8006558:	18ed      	addgt	r5, r5, r3
 800655a:	2600      	movs	r6, #0
 800655c:	341a      	adds	r4, #26
 800655e:	42b5      	cmp	r5, r6
 8006560:	d11a      	bne.n	8006598 <_printf_common+0xc8>
 8006562:	2000      	movs	r0, #0
 8006564:	e008      	b.n	8006578 <_printf_common+0xa8>
 8006566:	2301      	movs	r3, #1
 8006568:	4652      	mov	r2, sl
 800656a:	4641      	mov	r1, r8
 800656c:	4638      	mov	r0, r7
 800656e:	47c8      	blx	r9
 8006570:	3001      	adds	r0, #1
 8006572:	d103      	bne.n	800657c <_printf_common+0xac>
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657c:	3501      	adds	r5, #1
 800657e:	e7c6      	b.n	800650e <_printf_common+0x3e>
 8006580:	18e1      	adds	r1, r4, r3
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	2030      	movs	r0, #48	@ 0x30
 8006586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800658a:	4422      	add	r2, r4
 800658c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006594:	3302      	adds	r3, #2
 8006596:	e7c7      	b.n	8006528 <_printf_common+0x58>
 8006598:	2301      	movs	r3, #1
 800659a:	4622      	mov	r2, r4
 800659c:	4641      	mov	r1, r8
 800659e:	4638      	mov	r0, r7
 80065a0:	47c8      	blx	r9
 80065a2:	3001      	adds	r0, #1
 80065a4:	d0e6      	beq.n	8006574 <_printf_common+0xa4>
 80065a6:	3601      	adds	r6, #1
 80065a8:	e7d9      	b.n	800655e <_printf_common+0x8e>
	...

080065ac <_printf_i>:
 80065ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	7e0f      	ldrb	r7, [r1, #24]
 80065b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065b4:	2f78      	cmp	r7, #120	@ 0x78
 80065b6:	4691      	mov	r9, r2
 80065b8:	4680      	mov	r8, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	469a      	mov	sl, r3
 80065be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065c2:	d807      	bhi.n	80065d4 <_printf_i+0x28>
 80065c4:	2f62      	cmp	r7, #98	@ 0x62
 80065c6:	d80a      	bhi.n	80065de <_printf_i+0x32>
 80065c8:	2f00      	cmp	r7, #0
 80065ca:	f000 80d2 	beq.w	8006772 <_printf_i+0x1c6>
 80065ce:	2f58      	cmp	r7, #88	@ 0x58
 80065d0:	f000 80b9 	beq.w	8006746 <_printf_i+0x19a>
 80065d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065dc:	e03a      	b.n	8006654 <_printf_i+0xa8>
 80065de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065e2:	2b15      	cmp	r3, #21
 80065e4:	d8f6      	bhi.n	80065d4 <_printf_i+0x28>
 80065e6:	a101      	add	r1, pc, #4	@ (adr r1, 80065ec <_printf_i+0x40>)
 80065e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065ec:	08006645 	.word	0x08006645
 80065f0:	08006659 	.word	0x08006659
 80065f4:	080065d5 	.word	0x080065d5
 80065f8:	080065d5 	.word	0x080065d5
 80065fc:	080065d5 	.word	0x080065d5
 8006600:	080065d5 	.word	0x080065d5
 8006604:	08006659 	.word	0x08006659
 8006608:	080065d5 	.word	0x080065d5
 800660c:	080065d5 	.word	0x080065d5
 8006610:	080065d5 	.word	0x080065d5
 8006614:	080065d5 	.word	0x080065d5
 8006618:	08006759 	.word	0x08006759
 800661c:	08006683 	.word	0x08006683
 8006620:	08006713 	.word	0x08006713
 8006624:	080065d5 	.word	0x080065d5
 8006628:	080065d5 	.word	0x080065d5
 800662c:	0800677b 	.word	0x0800677b
 8006630:	080065d5 	.word	0x080065d5
 8006634:	08006683 	.word	0x08006683
 8006638:	080065d5 	.word	0x080065d5
 800663c:	080065d5 	.word	0x080065d5
 8006640:	0800671b 	.word	0x0800671b
 8006644:	6833      	ldr	r3, [r6, #0]
 8006646:	1d1a      	adds	r2, r3, #4
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6032      	str	r2, [r6, #0]
 800664c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006654:	2301      	movs	r3, #1
 8006656:	e09d      	b.n	8006794 <_printf_i+0x1e8>
 8006658:	6833      	ldr	r3, [r6, #0]
 800665a:	6820      	ldr	r0, [r4, #0]
 800665c:	1d19      	adds	r1, r3, #4
 800665e:	6031      	str	r1, [r6, #0]
 8006660:	0606      	lsls	r6, r0, #24
 8006662:	d501      	bpl.n	8006668 <_printf_i+0xbc>
 8006664:	681d      	ldr	r5, [r3, #0]
 8006666:	e003      	b.n	8006670 <_printf_i+0xc4>
 8006668:	0645      	lsls	r5, r0, #25
 800666a:	d5fb      	bpl.n	8006664 <_printf_i+0xb8>
 800666c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006670:	2d00      	cmp	r5, #0
 8006672:	da03      	bge.n	800667c <_printf_i+0xd0>
 8006674:	232d      	movs	r3, #45	@ 0x2d
 8006676:	426d      	negs	r5, r5
 8006678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800667c:	4859      	ldr	r0, [pc, #356]	@ (80067e4 <_printf_i+0x238>)
 800667e:	230a      	movs	r3, #10
 8006680:	e011      	b.n	80066a6 <_printf_i+0xfa>
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	0608      	lsls	r0, r1, #24
 8006688:	f853 5b04 	ldr.w	r5, [r3], #4
 800668c:	d402      	bmi.n	8006694 <_printf_i+0xe8>
 800668e:	0649      	lsls	r1, r1, #25
 8006690:	bf48      	it	mi
 8006692:	b2ad      	uxthmi	r5, r5
 8006694:	2f6f      	cmp	r7, #111	@ 0x6f
 8006696:	4853      	ldr	r0, [pc, #332]	@ (80067e4 <_printf_i+0x238>)
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	bf14      	ite	ne
 800669c:	230a      	movne	r3, #10
 800669e:	2308      	moveq	r3, #8
 80066a0:	2100      	movs	r1, #0
 80066a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066a6:	6866      	ldr	r6, [r4, #4]
 80066a8:	60a6      	str	r6, [r4, #8]
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	bfa2      	ittt	ge
 80066ae:	6821      	ldrge	r1, [r4, #0]
 80066b0:	f021 0104 	bicge.w	r1, r1, #4
 80066b4:	6021      	strge	r1, [r4, #0]
 80066b6:	b90d      	cbnz	r5, 80066bc <_printf_i+0x110>
 80066b8:	2e00      	cmp	r6, #0
 80066ba:	d04b      	beq.n	8006754 <_printf_i+0x1a8>
 80066bc:	4616      	mov	r6, r2
 80066be:	fbb5 f1f3 	udiv	r1, r5, r3
 80066c2:	fb03 5711 	mls	r7, r3, r1, r5
 80066c6:	5dc7      	ldrb	r7, [r0, r7]
 80066c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066cc:	462f      	mov	r7, r5
 80066ce:	42bb      	cmp	r3, r7
 80066d0:	460d      	mov	r5, r1
 80066d2:	d9f4      	bls.n	80066be <_printf_i+0x112>
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d10b      	bne.n	80066f0 <_printf_i+0x144>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	07df      	lsls	r7, r3, #31
 80066dc:	d508      	bpl.n	80066f0 <_printf_i+0x144>
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	6861      	ldr	r1, [r4, #4]
 80066e2:	4299      	cmp	r1, r3
 80066e4:	bfde      	ittt	le
 80066e6:	2330      	movle	r3, #48	@ 0x30
 80066e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066f0:	1b92      	subs	r2, r2, r6
 80066f2:	6122      	str	r2, [r4, #16]
 80066f4:	f8cd a000 	str.w	sl, [sp]
 80066f8:	464b      	mov	r3, r9
 80066fa:	aa03      	add	r2, sp, #12
 80066fc:	4621      	mov	r1, r4
 80066fe:	4640      	mov	r0, r8
 8006700:	f7ff fee6 	bl	80064d0 <_printf_common>
 8006704:	3001      	adds	r0, #1
 8006706:	d14a      	bne.n	800679e <_printf_i+0x1f2>
 8006708:	f04f 30ff 	mov.w	r0, #4294967295
 800670c:	b004      	add	sp, #16
 800670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f043 0320 	orr.w	r3, r3, #32
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	4833      	ldr	r0, [pc, #204]	@ (80067e8 <_printf_i+0x23c>)
 800671c:	2778      	movs	r7, #120	@ 0x78
 800671e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	6831      	ldr	r1, [r6, #0]
 8006726:	061f      	lsls	r7, r3, #24
 8006728:	f851 5b04 	ldr.w	r5, [r1], #4
 800672c:	d402      	bmi.n	8006734 <_printf_i+0x188>
 800672e:	065f      	lsls	r7, r3, #25
 8006730:	bf48      	it	mi
 8006732:	b2ad      	uxthmi	r5, r5
 8006734:	6031      	str	r1, [r6, #0]
 8006736:	07d9      	lsls	r1, r3, #31
 8006738:	bf44      	itt	mi
 800673a:	f043 0320 	orrmi.w	r3, r3, #32
 800673e:	6023      	strmi	r3, [r4, #0]
 8006740:	b11d      	cbz	r5, 800674a <_printf_i+0x19e>
 8006742:	2310      	movs	r3, #16
 8006744:	e7ac      	b.n	80066a0 <_printf_i+0xf4>
 8006746:	4827      	ldr	r0, [pc, #156]	@ (80067e4 <_printf_i+0x238>)
 8006748:	e7e9      	b.n	800671e <_printf_i+0x172>
 800674a:	6823      	ldr	r3, [r4, #0]
 800674c:	f023 0320 	bic.w	r3, r3, #32
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	e7f6      	b.n	8006742 <_printf_i+0x196>
 8006754:	4616      	mov	r6, r2
 8006756:	e7bd      	b.n	80066d4 <_printf_i+0x128>
 8006758:	6833      	ldr	r3, [r6, #0]
 800675a:	6825      	ldr	r5, [r4, #0]
 800675c:	6961      	ldr	r1, [r4, #20]
 800675e:	1d18      	adds	r0, r3, #4
 8006760:	6030      	str	r0, [r6, #0]
 8006762:	062e      	lsls	r6, r5, #24
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	d501      	bpl.n	800676c <_printf_i+0x1c0>
 8006768:	6019      	str	r1, [r3, #0]
 800676a:	e002      	b.n	8006772 <_printf_i+0x1c6>
 800676c:	0668      	lsls	r0, r5, #25
 800676e:	d5fb      	bpl.n	8006768 <_printf_i+0x1bc>
 8006770:	8019      	strh	r1, [r3, #0]
 8006772:	2300      	movs	r3, #0
 8006774:	6123      	str	r3, [r4, #16]
 8006776:	4616      	mov	r6, r2
 8006778:	e7bc      	b.n	80066f4 <_printf_i+0x148>
 800677a:	6833      	ldr	r3, [r6, #0]
 800677c:	1d1a      	adds	r2, r3, #4
 800677e:	6032      	str	r2, [r6, #0]
 8006780:	681e      	ldr	r6, [r3, #0]
 8006782:	6862      	ldr	r2, [r4, #4]
 8006784:	2100      	movs	r1, #0
 8006786:	4630      	mov	r0, r6
 8006788:	f7f9 fd4a 	bl	8000220 <memchr>
 800678c:	b108      	cbz	r0, 8006792 <_printf_i+0x1e6>
 800678e:	1b80      	subs	r0, r0, r6
 8006790:	6060      	str	r0, [r4, #4]
 8006792:	6863      	ldr	r3, [r4, #4]
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	2300      	movs	r3, #0
 8006798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800679c:	e7aa      	b.n	80066f4 <_printf_i+0x148>
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	4632      	mov	r2, r6
 80067a2:	4649      	mov	r1, r9
 80067a4:	4640      	mov	r0, r8
 80067a6:	47d0      	blx	sl
 80067a8:	3001      	adds	r0, #1
 80067aa:	d0ad      	beq.n	8006708 <_printf_i+0x15c>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	079b      	lsls	r3, r3, #30
 80067b0:	d413      	bmi.n	80067da <_printf_i+0x22e>
 80067b2:	68e0      	ldr	r0, [r4, #12]
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	4298      	cmp	r0, r3
 80067b8:	bfb8      	it	lt
 80067ba:	4618      	movlt	r0, r3
 80067bc:	e7a6      	b.n	800670c <_printf_i+0x160>
 80067be:	2301      	movs	r3, #1
 80067c0:	4632      	mov	r2, r6
 80067c2:	4649      	mov	r1, r9
 80067c4:	4640      	mov	r0, r8
 80067c6:	47d0      	blx	sl
 80067c8:	3001      	adds	r0, #1
 80067ca:	d09d      	beq.n	8006708 <_printf_i+0x15c>
 80067cc:	3501      	adds	r5, #1
 80067ce:	68e3      	ldr	r3, [r4, #12]
 80067d0:	9903      	ldr	r1, [sp, #12]
 80067d2:	1a5b      	subs	r3, r3, r1
 80067d4:	42ab      	cmp	r3, r5
 80067d6:	dcf2      	bgt.n	80067be <_printf_i+0x212>
 80067d8:	e7eb      	b.n	80067b2 <_printf_i+0x206>
 80067da:	2500      	movs	r5, #0
 80067dc:	f104 0619 	add.w	r6, r4, #25
 80067e0:	e7f5      	b.n	80067ce <_printf_i+0x222>
 80067e2:	bf00      	nop
 80067e4:	08008a82 	.word	0x08008a82
 80067e8:	08008a93 	.word	0x08008a93

080067ec <std>:
 80067ec:	2300      	movs	r3, #0
 80067ee:	b510      	push	{r4, lr}
 80067f0:	4604      	mov	r4, r0
 80067f2:	e9c0 3300 	strd	r3, r3, [r0]
 80067f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067fa:	6083      	str	r3, [r0, #8]
 80067fc:	8181      	strh	r1, [r0, #12]
 80067fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006800:	81c2      	strh	r2, [r0, #14]
 8006802:	6183      	str	r3, [r0, #24]
 8006804:	4619      	mov	r1, r3
 8006806:	2208      	movs	r2, #8
 8006808:	305c      	adds	r0, #92	@ 0x5c
 800680a:	f000 f906 	bl	8006a1a <memset>
 800680e:	4b0d      	ldr	r3, [pc, #52]	@ (8006844 <std+0x58>)
 8006810:	6263      	str	r3, [r4, #36]	@ 0x24
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <std+0x5c>)
 8006814:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006816:	4b0d      	ldr	r3, [pc, #52]	@ (800684c <std+0x60>)
 8006818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800681a:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <std+0x64>)
 800681c:	6323      	str	r3, [r4, #48]	@ 0x30
 800681e:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <std+0x68>)
 8006820:	6224      	str	r4, [r4, #32]
 8006822:	429c      	cmp	r4, r3
 8006824:	d006      	beq.n	8006834 <std+0x48>
 8006826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800682a:	4294      	cmp	r4, r2
 800682c:	d002      	beq.n	8006834 <std+0x48>
 800682e:	33d0      	adds	r3, #208	@ 0xd0
 8006830:	429c      	cmp	r4, r3
 8006832:	d105      	bne.n	8006840 <std+0x54>
 8006834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800683c:	f000 b96a 	b.w	8006b14 <__retarget_lock_init_recursive>
 8006840:	bd10      	pop	{r4, pc}
 8006842:	bf00      	nop
 8006844:	08006995 	.word	0x08006995
 8006848:	080069b7 	.word	0x080069b7
 800684c:	080069ef 	.word	0x080069ef
 8006850:	08006a13 	.word	0x08006a13
 8006854:	20000374 	.word	0x20000374

08006858 <stdio_exit_handler>:
 8006858:	4a02      	ldr	r2, [pc, #8]	@ (8006864 <stdio_exit_handler+0xc>)
 800685a:	4903      	ldr	r1, [pc, #12]	@ (8006868 <stdio_exit_handler+0x10>)
 800685c:	4803      	ldr	r0, [pc, #12]	@ (800686c <stdio_exit_handler+0x14>)
 800685e:	f000 b869 	b.w	8006934 <_fwalk_sglue>
 8006862:	bf00      	nop
 8006864:	20000020 	.word	0x20000020
 8006868:	08008461 	.word	0x08008461
 800686c:	20000030 	.word	0x20000030

08006870 <cleanup_stdio>:
 8006870:	6841      	ldr	r1, [r0, #4]
 8006872:	4b0c      	ldr	r3, [pc, #48]	@ (80068a4 <cleanup_stdio+0x34>)
 8006874:	4299      	cmp	r1, r3
 8006876:	b510      	push	{r4, lr}
 8006878:	4604      	mov	r4, r0
 800687a:	d001      	beq.n	8006880 <cleanup_stdio+0x10>
 800687c:	f001 fdf0 	bl	8008460 <_fflush_r>
 8006880:	68a1      	ldr	r1, [r4, #8]
 8006882:	4b09      	ldr	r3, [pc, #36]	@ (80068a8 <cleanup_stdio+0x38>)
 8006884:	4299      	cmp	r1, r3
 8006886:	d002      	beq.n	800688e <cleanup_stdio+0x1e>
 8006888:	4620      	mov	r0, r4
 800688a:	f001 fde9 	bl	8008460 <_fflush_r>
 800688e:	68e1      	ldr	r1, [r4, #12]
 8006890:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <cleanup_stdio+0x3c>)
 8006892:	4299      	cmp	r1, r3
 8006894:	d004      	beq.n	80068a0 <cleanup_stdio+0x30>
 8006896:	4620      	mov	r0, r4
 8006898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800689c:	f001 bde0 	b.w	8008460 <_fflush_r>
 80068a0:	bd10      	pop	{r4, pc}
 80068a2:	bf00      	nop
 80068a4:	20000374 	.word	0x20000374
 80068a8:	200003dc 	.word	0x200003dc
 80068ac:	20000444 	.word	0x20000444

080068b0 <global_stdio_init.part.0>:
 80068b0:	b510      	push	{r4, lr}
 80068b2:	4b0b      	ldr	r3, [pc, #44]	@ (80068e0 <global_stdio_init.part.0+0x30>)
 80068b4:	4c0b      	ldr	r4, [pc, #44]	@ (80068e4 <global_stdio_init.part.0+0x34>)
 80068b6:	4a0c      	ldr	r2, [pc, #48]	@ (80068e8 <global_stdio_init.part.0+0x38>)
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	4620      	mov	r0, r4
 80068bc:	2200      	movs	r2, #0
 80068be:	2104      	movs	r1, #4
 80068c0:	f7ff ff94 	bl	80067ec <std>
 80068c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068c8:	2201      	movs	r2, #1
 80068ca:	2109      	movs	r1, #9
 80068cc:	f7ff ff8e 	bl	80067ec <std>
 80068d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068d4:	2202      	movs	r2, #2
 80068d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068da:	2112      	movs	r1, #18
 80068dc:	f7ff bf86 	b.w	80067ec <std>
 80068e0:	200004ac 	.word	0x200004ac
 80068e4:	20000374 	.word	0x20000374
 80068e8:	08006859 	.word	0x08006859

080068ec <__sfp_lock_acquire>:
 80068ec:	4801      	ldr	r0, [pc, #4]	@ (80068f4 <__sfp_lock_acquire+0x8>)
 80068ee:	f000 b912 	b.w	8006b16 <__retarget_lock_acquire_recursive>
 80068f2:	bf00      	nop
 80068f4:	200004b5 	.word	0x200004b5

080068f8 <__sfp_lock_release>:
 80068f8:	4801      	ldr	r0, [pc, #4]	@ (8006900 <__sfp_lock_release+0x8>)
 80068fa:	f000 b90d 	b.w	8006b18 <__retarget_lock_release_recursive>
 80068fe:	bf00      	nop
 8006900:	200004b5 	.word	0x200004b5

08006904 <__sinit>:
 8006904:	b510      	push	{r4, lr}
 8006906:	4604      	mov	r4, r0
 8006908:	f7ff fff0 	bl	80068ec <__sfp_lock_acquire>
 800690c:	6a23      	ldr	r3, [r4, #32]
 800690e:	b11b      	cbz	r3, 8006918 <__sinit+0x14>
 8006910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006914:	f7ff bff0 	b.w	80068f8 <__sfp_lock_release>
 8006918:	4b04      	ldr	r3, [pc, #16]	@ (800692c <__sinit+0x28>)
 800691a:	6223      	str	r3, [r4, #32]
 800691c:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <__sinit+0x2c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1f5      	bne.n	8006910 <__sinit+0xc>
 8006924:	f7ff ffc4 	bl	80068b0 <global_stdio_init.part.0>
 8006928:	e7f2      	b.n	8006910 <__sinit+0xc>
 800692a:	bf00      	nop
 800692c:	08006871 	.word	0x08006871
 8006930:	200004ac 	.word	0x200004ac

08006934 <_fwalk_sglue>:
 8006934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006938:	4607      	mov	r7, r0
 800693a:	4688      	mov	r8, r1
 800693c:	4614      	mov	r4, r2
 800693e:	2600      	movs	r6, #0
 8006940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006944:	f1b9 0901 	subs.w	r9, r9, #1
 8006948:	d505      	bpl.n	8006956 <_fwalk_sglue+0x22>
 800694a:	6824      	ldr	r4, [r4, #0]
 800694c:	2c00      	cmp	r4, #0
 800694e:	d1f7      	bne.n	8006940 <_fwalk_sglue+0xc>
 8006950:	4630      	mov	r0, r6
 8006952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006956:	89ab      	ldrh	r3, [r5, #12]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d907      	bls.n	800696c <_fwalk_sglue+0x38>
 800695c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006960:	3301      	adds	r3, #1
 8006962:	d003      	beq.n	800696c <_fwalk_sglue+0x38>
 8006964:	4629      	mov	r1, r5
 8006966:	4638      	mov	r0, r7
 8006968:	47c0      	blx	r8
 800696a:	4306      	orrs	r6, r0
 800696c:	3568      	adds	r5, #104	@ 0x68
 800696e:	e7e9      	b.n	8006944 <_fwalk_sglue+0x10>

08006970 <iprintf>:
 8006970:	b40f      	push	{r0, r1, r2, r3}
 8006972:	b507      	push	{r0, r1, r2, lr}
 8006974:	4906      	ldr	r1, [pc, #24]	@ (8006990 <iprintf+0x20>)
 8006976:	ab04      	add	r3, sp, #16
 8006978:	6808      	ldr	r0, [r1, #0]
 800697a:	f853 2b04 	ldr.w	r2, [r3], #4
 800697e:	6881      	ldr	r1, [r0, #8]
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	f001 fbd1 	bl	8008128 <_vfiprintf_r>
 8006986:	b003      	add	sp, #12
 8006988:	f85d eb04 	ldr.w	lr, [sp], #4
 800698c:	b004      	add	sp, #16
 800698e:	4770      	bx	lr
 8006990:	2000002c 	.word	0x2000002c

08006994 <__sread>:
 8006994:	b510      	push	{r4, lr}
 8006996:	460c      	mov	r4, r1
 8006998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800699c:	f000 f86c 	bl	8006a78 <_read_r>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	bfab      	itete	ge
 80069a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069a6:	89a3      	ldrhlt	r3, [r4, #12]
 80069a8:	181b      	addge	r3, r3, r0
 80069aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069ae:	bfac      	ite	ge
 80069b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069b2:	81a3      	strhlt	r3, [r4, #12]
 80069b4:	bd10      	pop	{r4, pc}

080069b6 <__swrite>:
 80069b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ba:	461f      	mov	r7, r3
 80069bc:	898b      	ldrh	r3, [r1, #12]
 80069be:	05db      	lsls	r3, r3, #23
 80069c0:	4605      	mov	r5, r0
 80069c2:	460c      	mov	r4, r1
 80069c4:	4616      	mov	r6, r2
 80069c6:	d505      	bpl.n	80069d4 <__swrite+0x1e>
 80069c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069cc:	2302      	movs	r3, #2
 80069ce:	2200      	movs	r2, #0
 80069d0:	f000 f840 	bl	8006a54 <_lseek_r>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	4632      	mov	r2, r6
 80069e2:	463b      	mov	r3, r7
 80069e4:	4628      	mov	r0, r5
 80069e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ea:	f000 b857 	b.w	8006a9c <_write_r>

080069ee <__sseek>:
 80069ee:	b510      	push	{r4, lr}
 80069f0:	460c      	mov	r4, r1
 80069f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f6:	f000 f82d 	bl	8006a54 <_lseek_r>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	89a3      	ldrh	r3, [r4, #12]
 80069fe:	bf15      	itete	ne
 8006a00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a0a:	81a3      	strheq	r3, [r4, #12]
 8006a0c:	bf18      	it	ne
 8006a0e:	81a3      	strhne	r3, [r4, #12]
 8006a10:	bd10      	pop	{r4, pc}

08006a12 <__sclose>:
 8006a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a16:	f000 b80d 	b.w	8006a34 <_close_r>

08006a1a <memset>:
 8006a1a:	4402      	add	r2, r0
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d100      	bne.n	8006a24 <memset+0xa>
 8006a22:	4770      	bx	lr
 8006a24:	f803 1b01 	strb.w	r1, [r3], #1
 8006a28:	e7f9      	b.n	8006a1e <memset+0x4>
	...

08006a2c <_localeconv_r>:
 8006a2c:	4800      	ldr	r0, [pc, #0]	@ (8006a30 <_localeconv_r+0x4>)
 8006a2e:	4770      	bx	lr
 8006a30:	2000016c 	.word	0x2000016c

08006a34 <_close_r>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	4d06      	ldr	r5, [pc, #24]	@ (8006a50 <_close_r+0x1c>)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	4608      	mov	r0, r1
 8006a3e:	602b      	str	r3, [r5, #0]
 8006a40:	f7fa fee0 	bl	8001804 <_close>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_close_r+0x1a>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_close_r+0x1a>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	200004b0 	.word	0x200004b0

08006a54 <_lseek_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d07      	ldr	r5, [pc, #28]	@ (8006a74 <_lseek_r+0x20>)
 8006a58:	4604      	mov	r4, r0
 8006a5a:	4608      	mov	r0, r1
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	2200      	movs	r2, #0
 8006a60:	602a      	str	r2, [r5, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f7fa fef5 	bl	8001852 <_lseek>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_lseek_r+0x1e>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_lseek_r+0x1e>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	200004b0 	.word	0x200004b0

08006a78 <_read_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d07      	ldr	r5, [pc, #28]	@ (8006a98 <_read_r+0x20>)
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	602a      	str	r2, [r5, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fa fe83 	bl	8001792 <_read>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_read_r+0x1e>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_read_r+0x1e>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	200004b0 	.word	0x200004b0

08006a9c <_write_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4d07      	ldr	r5, [pc, #28]	@ (8006abc <_write_r+0x20>)
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	4608      	mov	r0, r1
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	602a      	str	r2, [r5, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	f7fa fe8e 	bl	80017cc <_write>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d102      	bne.n	8006aba <_write_r+0x1e>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	b103      	cbz	r3, 8006aba <_write_r+0x1e>
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	200004b0 	.word	0x200004b0

08006ac0 <__errno>:
 8006ac0:	4b01      	ldr	r3, [pc, #4]	@ (8006ac8 <__errno+0x8>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	2000002c 	.word	0x2000002c

08006acc <__libc_init_array>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4d0d      	ldr	r5, [pc, #52]	@ (8006b04 <__libc_init_array+0x38>)
 8006ad0:	4c0d      	ldr	r4, [pc, #52]	@ (8006b08 <__libc_init_array+0x3c>)
 8006ad2:	1b64      	subs	r4, r4, r5
 8006ad4:	10a4      	asrs	r4, r4, #2
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	42a6      	cmp	r6, r4
 8006ada:	d109      	bne.n	8006af0 <__libc_init_array+0x24>
 8006adc:	4d0b      	ldr	r5, [pc, #44]	@ (8006b0c <__libc_init_array+0x40>)
 8006ade:	4c0c      	ldr	r4, [pc, #48]	@ (8006b10 <__libc_init_array+0x44>)
 8006ae0:	f001 febe 	bl	8008860 <_init>
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	2600      	movs	r6, #0
 8006aea:	42a6      	cmp	r6, r4
 8006aec:	d105      	bne.n	8006afa <__libc_init_array+0x2e>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af4:	4798      	blx	r3
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7ee      	b.n	8006ad8 <__libc_init_array+0xc>
 8006afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afe:	4798      	blx	r3
 8006b00:	3601      	adds	r6, #1
 8006b02:	e7f2      	b.n	8006aea <__libc_init_array+0x1e>
 8006b04:	08008de8 	.word	0x08008de8
 8006b08:	08008de8 	.word	0x08008de8
 8006b0c:	08008de8 	.word	0x08008de8
 8006b10:	08008dec 	.word	0x08008dec

08006b14 <__retarget_lock_init_recursive>:
 8006b14:	4770      	bx	lr

08006b16 <__retarget_lock_acquire_recursive>:
 8006b16:	4770      	bx	lr

08006b18 <__retarget_lock_release_recursive>:
 8006b18:	4770      	bx	lr

08006b1a <memcpy>:
 8006b1a:	440a      	add	r2, r1
 8006b1c:	4291      	cmp	r1, r2
 8006b1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b22:	d100      	bne.n	8006b26 <memcpy+0xc>
 8006b24:	4770      	bx	lr
 8006b26:	b510      	push	{r4, lr}
 8006b28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b30:	4291      	cmp	r1, r2
 8006b32:	d1f9      	bne.n	8006b28 <memcpy+0xe>
 8006b34:	bd10      	pop	{r4, pc}

08006b36 <quorem>:
 8006b36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3a:	6903      	ldr	r3, [r0, #16]
 8006b3c:	690c      	ldr	r4, [r1, #16]
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	4607      	mov	r7, r0
 8006b42:	db7e      	blt.n	8006c42 <quorem+0x10c>
 8006b44:	3c01      	subs	r4, #1
 8006b46:	f101 0814 	add.w	r8, r1, #20
 8006b4a:	00a3      	lsls	r3, r4, #2
 8006b4c:	f100 0514 	add.w	r5, r0, #20
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b60:	3301      	adds	r3, #1
 8006b62:	429a      	cmp	r2, r3
 8006b64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b68:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b6c:	d32e      	bcc.n	8006bcc <quorem+0x96>
 8006b6e:	f04f 0a00 	mov.w	sl, #0
 8006b72:	46c4      	mov	ip, r8
 8006b74:	46ae      	mov	lr, r5
 8006b76:	46d3      	mov	fp, sl
 8006b78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b7c:	b298      	uxth	r0, r3
 8006b7e:	fb06 a000 	mla	r0, r6, r0, sl
 8006b82:	0c02      	lsrs	r2, r0, #16
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	fb06 2303 	mla	r3, r6, r3, r2
 8006b8a:	f8de 2000 	ldr.w	r2, [lr]
 8006b8e:	b280      	uxth	r0, r0
 8006b90:	b292      	uxth	r2, r2
 8006b92:	1a12      	subs	r2, r2, r0
 8006b94:	445a      	add	r2, fp
 8006b96:	f8de 0000 	ldr.w	r0, [lr]
 8006b9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ba4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ba8:	b292      	uxth	r2, r2
 8006baa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bae:	45e1      	cmp	r9, ip
 8006bb0:	f84e 2b04 	str.w	r2, [lr], #4
 8006bb4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006bb8:	d2de      	bcs.n	8006b78 <quorem+0x42>
 8006bba:	9b00      	ldr	r3, [sp, #0]
 8006bbc:	58eb      	ldr	r3, [r5, r3]
 8006bbe:	b92b      	cbnz	r3, 8006bcc <quorem+0x96>
 8006bc0:	9b01      	ldr	r3, [sp, #4]
 8006bc2:	3b04      	subs	r3, #4
 8006bc4:	429d      	cmp	r5, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	d32f      	bcc.n	8006c2a <quorem+0xf4>
 8006bca:	613c      	str	r4, [r7, #16]
 8006bcc:	4638      	mov	r0, r7
 8006bce:	f001 f979 	bl	8007ec4 <__mcmp>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	db25      	blt.n	8006c22 <quorem+0xec>
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	2000      	movs	r0, #0
 8006bda:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bde:	f8d1 c000 	ldr.w	ip, [r1]
 8006be2:	fa1f fe82 	uxth.w	lr, r2
 8006be6:	fa1f f38c 	uxth.w	r3, ip
 8006bea:	eba3 030e 	sub.w	r3, r3, lr
 8006bee:	4403      	add	r3, r0
 8006bf0:	0c12      	lsrs	r2, r2, #16
 8006bf2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006bf6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c00:	45c1      	cmp	r9, r8
 8006c02:	f841 3b04 	str.w	r3, [r1], #4
 8006c06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c0a:	d2e6      	bcs.n	8006bda <quorem+0xa4>
 8006c0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c14:	b922      	cbnz	r2, 8006c20 <quorem+0xea>
 8006c16:	3b04      	subs	r3, #4
 8006c18:	429d      	cmp	r5, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	d30b      	bcc.n	8006c36 <quorem+0x100>
 8006c1e:	613c      	str	r4, [r7, #16]
 8006c20:	3601      	adds	r6, #1
 8006c22:	4630      	mov	r0, r6
 8006c24:	b003      	add	sp, #12
 8006c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	3b04      	subs	r3, #4
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	d1cb      	bne.n	8006bca <quorem+0x94>
 8006c32:	3c01      	subs	r4, #1
 8006c34:	e7c6      	b.n	8006bc4 <quorem+0x8e>
 8006c36:	6812      	ldr	r2, [r2, #0]
 8006c38:	3b04      	subs	r3, #4
 8006c3a:	2a00      	cmp	r2, #0
 8006c3c:	d1ef      	bne.n	8006c1e <quorem+0xe8>
 8006c3e:	3c01      	subs	r4, #1
 8006c40:	e7ea      	b.n	8006c18 <quorem+0xe2>
 8006c42:	2000      	movs	r0, #0
 8006c44:	e7ee      	b.n	8006c24 <quorem+0xee>
	...

08006c48 <_dtoa_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	69c7      	ldr	r7, [r0, #28]
 8006c4e:	b099      	sub	sp, #100	@ 0x64
 8006c50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c54:	ec55 4b10 	vmov	r4, r5, d0
 8006c58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006c5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c5c:	4683      	mov	fp, r0
 8006c5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c62:	b97f      	cbnz	r7, 8006c84 <_dtoa_r+0x3c>
 8006c64:	2010      	movs	r0, #16
 8006c66:	f000 fdfd 	bl	8007864 <malloc>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c70:	b920      	cbnz	r0, 8006c7c <_dtoa_r+0x34>
 8006c72:	4ba7      	ldr	r3, [pc, #668]	@ (8006f10 <_dtoa_r+0x2c8>)
 8006c74:	21ef      	movs	r1, #239	@ 0xef
 8006c76:	48a7      	ldr	r0, [pc, #668]	@ (8006f14 <_dtoa_r+0x2cc>)
 8006c78:	f001 fcbe 	bl	80085f8 <__assert_func>
 8006c7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c80:	6007      	str	r7, [r0, #0]
 8006c82:	60c7      	str	r7, [r0, #12]
 8006c84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c88:	6819      	ldr	r1, [r3, #0]
 8006c8a:	b159      	cbz	r1, 8006ca4 <_dtoa_r+0x5c>
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	604a      	str	r2, [r1, #4]
 8006c90:	2301      	movs	r3, #1
 8006c92:	4093      	lsls	r3, r2
 8006c94:	608b      	str	r3, [r1, #8]
 8006c96:	4658      	mov	r0, fp
 8006c98:	f000 feda 	bl	8007a50 <_Bfree>
 8006c9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	1e2b      	subs	r3, r5, #0
 8006ca6:	bfb9      	ittee	lt
 8006ca8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006cac:	9303      	strlt	r3, [sp, #12]
 8006cae:	2300      	movge	r3, #0
 8006cb0:	6033      	strge	r3, [r6, #0]
 8006cb2:	9f03      	ldr	r7, [sp, #12]
 8006cb4:	4b98      	ldr	r3, [pc, #608]	@ (8006f18 <_dtoa_r+0x2d0>)
 8006cb6:	bfbc      	itt	lt
 8006cb8:	2201      	movlt	r2, #1
 8006cba:	6032      	strlt	r2, [r6, #0]
 8006cbc:	43bb      	bics	r3, r7
 8006cbe:	d112      	bne.n	8006ce6 <_dtoa_r+0x9e>
 8006cc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ccc:	4323      	orrs	r3, r4
 8006cce:	f000 854d 	beq.w	800776c <_dtoa_r+0xb24>
 8006cd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f2c <_dtoa_r+0x2e4>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 854f 	beq.w	800777c <_dtoa_r+0xb34>
 8006cde:	f10a 0303 	add.w	r3, sl, #3
 8006ce2:	f000 bd49 	b.w	8007778 <_dtoa_r+0xb30>
 8006ce6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	ec51 0b17 	vmov	r0, r1, d7
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006cf6:	f7f9 ff0f 	bl	8000b18 <__aeabi_dcmpeq>
 8006cfa:	4680      	mov	r8, r0
 8006cfc:	b158      	cbz	r0, 8006d16 <_dtoa_r+0xce>
 8006cfe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d00:	2301      	movs	r3, #1
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d06:	b113      	cbz	r3, 8006d0e <_dtoa_r+0xc6>
 8006d08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d0a:	4b84      	ldr	r3, [pc, #528]	@ (8006f1c <_dtoa_r+0x2d4>)
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006f30 <_dtoa_r+0x2e8>
 8006d12:	f000 bd33 	b.w	800777c <_dtoa_r+0xb34>
 8006d16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d1a:	aa16      	add	r2, sp, #88	@ 0x58
 8006d1c:	a917      	add	r1, sp, #92	@ 0x5c
 8006d1e:	4658      	mov	r0, fp
 8006d20:	f001 f980 	bl	8008024 <__d2b>
 8006d24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d28:	4681      	mov	r9, r0
 8006d2a:	2e00      	cmp	r6, #0
 8006d2c:	d077      	beq.n	8006e1e <_dtoa_r+0x1d6>
 8006d2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d48:	4619      	mov	r1, r3
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	4b74      	ldr	r3, [pc, #464]	@ (8006f20 <_dtoa_r+0x2d8>)
 8006d4e:	f7f9 fac3 	bl	80002d8 <__aeabi_dsub>
 8006d52:	a369      	add	r3, pc, #420	@ (adr r3, 8006ef8 <_dtoa_r+0x2b0>)
 8006d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d58:	f7f9 fc76 	bl	8000648 <__aeabi_dmul>
 8006d5c:	a368      	add	r3, pc, #416	@ (adr r3, 8006f00 <_dtoa_r+0x2b8>)
 8006d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d62:	f7f9 fabb 	bl	80002dc <__adddf3>
 8006d66:	4604      	mov	r4, r0
 8006d68:	4630      	mov	r0, r6
 8006d6a:	460d      	mov	r5, r1
 8006d6c:	f7f9 fc02 	bl	8000574 <__aeabi_i2d>
 8006d70:	a365      	add	r3, pc, #404	@ (adr r3, 8006f08 <_dtoa_r+0x2c0>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f7f9 fc67 	bl	8000648 <__aeabi_dmul>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 faab 	bl	80002dc <__adddf3>
 8006d86:	4604      	mov	r4, r0
 8006d88:	460d      	mov	r5, r1
 8006d8a:	f7f9 ff0d 	bl	8000ba8 <__aeabi_d2iz>
 8006d8e:	2200      	movs	r2, #0
 8006d90:	4607      	mov	r7, r0
 8006d92:	2300      	movs	r3, #0
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 fec8 	bl	8000b2c <__aeabi_dcmplt>
 8006d9c:	b140      	cbz	r0, 8006db0 <_dtoa_r+0x168>
 8006d9e:	4638      	mov	r0, r7
 8006da0:	f7f9 fbe8 	bl	8000574 <__aeabi_i2d>
 8006da4:	4622      	mov	r2, r4
 8006da6:	462b      	mov	r3, r5
 8006da8:	f7f9 feb6 	bl	8000b18 <__aeabi_dcmpeq>
 8006dac:	b900      	cbnz	r0, 8006db0 <_dtoa_r+0x168>
 8006dae:	3f01      	subs	r7, #1
 8006db0:	2f16      	cmp	r7, #22
 8006db2:	d851      	bhi.n	8006e58 <_dtoa_r+0x210>
 8006db4:	4b5b      	ldr	r3, [pc, #364]	@ (8006f24 <_dtoa_r+0x2dc>)
 8006db6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dc2:	f7f9 feb3 	bl	8000b2c <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d048      	beq.n	8006e5c <_dtoa_r+0x214>
 8006dca:	3f01      	subs	r7, #1
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9312      	str	r3, [sp, #72]	@ 0x48
 8006dd0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006dd2:	1b9b      	subs	r3, r3, r6
 8006dd4:	1e5a      	subs	r2, r3, #1
 8006dd6:	bf44      	itt	mi
 8006dd8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006ddc:	2300      	movmi	r3, #0
 8006dde:	9208      	str	r2, [sp, #32]
 8006de0:	bf54      	ite	pl
 8006de2:	f04f 0800 	movpl.w	r8, #0
 8006de6:	9308      	strmi	r3, [sp, #32]
 8006de8:	2f00      	cmp	r7, #0
 8006dea:	db39      	blt.n	8006e60 <_dtoa_r+0x218>
 8006dec:	9b08      	ldr	r3, [sp, #32]
 8006dee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006df0:	443b      	add	r3, r7
 8006df2:	9308      	str	r3, [sp, #32]
 8006df4:	2300      	movs	r3, #0
 8006df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dfa:	2b09      	cmp	r3, #9
 8006dfc:	d864      	bhi.n	8006ec8 <_dtoa_r+0x280>
 8006dfe:	2b05      	cmp	r3, #5
 8006e00:	bfc4      	itt	gt
 8006e02:	3b04      	subgt	r3, #4
 8006e04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e08:	f1a3 0302 	sub.w	r3, r3, #2
 8006e0c:	bfcc      	ite	gt
 8006e0e:	2400      	movgt	r4, #0
 8006e10:	2401      	movle	r4, #1
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d863      	bhi.n	8006ede <_dtoa_r+0x296>
 8006e16:	e8df f003 	tbb	[pc, r3]
 8006e1a:	372a      	.short	0x372a
 8006e1c:	5535      	.short	0x5535
 8006e1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e22:	441e      	add	r6, r3
 8006e24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	bfc1      	itttt	gt
 8006e2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e30:	409f      	lslgt	r7, r3
 8006e32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e3a:	bfd6      	itet	le
 8006e3c:	f1c3 0320 	rsble	r3, r3, #32
 8006e40:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e44:	fa04 f003 	lslle.w	r0, r4, r3
 8006e48:	f7f9 fb84 	bl	8000554 <__aeabi_ui2d>
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e52:	3e01      	subs	r6, #1
 8006e54:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e56:	e777      	b.n	8006d48 <_dtoa_r+0x100>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e7b8      	b.n	8006dce <_dtoa_r+0x186>
 8006e5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e5e:	e7b7      	b.n	8006dd0 <_dtoa_r+0x188>
 8006e60:	427b      	negs	r3, r7
 8006e62:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e64:	2300      	movs	r3, #0
 8006e66:	eba8 0807 	sub.w	r8, r8, r7
 8006e6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e6c:	e7c4      	b.n	8006df8 <_dtoa_r+0x1b0>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dc35      	bgt.n	8006ee4 <_dtoa_r+0x29c>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	9307      	str	r3, [sp, #28]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e82:	e00b      	b.n	8006e9c <_dtoa_r+0x254>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e7f3      	b.n	8006e70 <_dtoa_r+0x228>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	9307      	str	r3, [sp, #28]
 8006e98:	bfb8      	it	lt
 8006e9a:	2301      	movlt	r3, #1
 8006e9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	2204      	movs	r2, #4
 8006ea4:	f102 0514 	add.w	r5, r2, #20
 8006ea8:	429d      	cmp	r5, r3
 8006eaa:	d91f      	bls.n	8006eec <_dtoa_r+0x2a4>
 8006eac:	6041      	str	r1, [r0, #4]
 8006eae:	4658      	mov	r0, fp
 8006eb0:	f000 fd8e 	bl	80079d0 <_Balloc>
 8006eb4:	4682      	mov	sl, r0
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d13c      	bne.n	8006f34 <_dtoa_r+0x2ec>
 8006eba:	4b1b      	ldr	r3, [pc, #108]	@ (8006f28 <_dtoa_r+0x2e0>)
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ec2:	e6d8      	b.n	8006c76 <_dtoa_r+0x2e>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e7e0      	b.n	8006e8a <_dtoa_r+0x242>
 8006ec8:	2401      	movs	r4, #1
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ece:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2312      	movs	r3, #18
 8006edc:	e7d0      	b.n	8006e80 <_dtoa_r+0x238>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ee2:	e7f5      	b.n	8006ed0 <_dtoa_r+0x288>
 8006ee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	9307      	str	r3, [sp, #28]
 8006eea:	e7d7      	b.n	8006e9c <_dtoa_r+0x254>
 8006eec:	3101      	adds	r1, #1
 8006eee:	0052      	lsls	r2, r2, #1
 8006ef0:	e7d8      	b.n	8006ea4 <_dtoa_r+0x25c>
 8006ef2:	bf00      	nop
 8006ef4:	f3af 8000 	nop.w
 8006ef8:	636f4361 	.word	0x636f4361
 8006efc:	3fd287a7 	.word	0x3fd287a7
 8006f00:	8b60c8b3 	.word	0x8b60c8b3
 8006f04:	3fc68a28 	.word	0x3fc68a28
 8006f08:	509f79fb 	.word	0x509f79fb
 8006f0c:	3fd34413 	.word	0x3fd34413
 8006f10:	08008ab1 	.word	0x08008ab1
 8006f14:	08008ac8 	.word	0x08008ac8
 8006f18:	7ff00000 	.word	0x7ff00000
 8006f1c:	08008a81 	.word	0x08008a81
 8006f20:	3ff80000 	.word	0x3ff80000
 8006f24:	08008bc0 	.word	0x08008bc0
 8006f28:	08008b20 	.word	0x08008b20
 8006f2c:	08008aad 	.word	0x08008aad
 8006f30:	08008a80 	.word	0x08008a80
 8006f34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f38:	6018      	str	r0, [r3, #0]
 8006f3a:	9b07      	ldr	r3, [sp, #28]
 8006f3c:	2b0e      	cmp	r3, #14
 8006f3e:	f200 80a4 	bhi.w	800708a <_dtoa_r+0x442>
 8006f42:	2c00      	cmp	r4, #0
 8006f44:	f000 80a1 	beq.w	800708a <_dtoa_r+0x442>
 8006f48:	2f00      	cmp	r7, #0
 8006f4a:	dd33      	ble.n	8006fb4 <_dtoa_r+0x36c>
 8006f4c:	4bad      	ldr	r3, [pc, #692]	@ (8007204 <_dtoa_r+0x5bc>)
 8006f4e:	f007 020f 	and.w	r2, r7, #15
 8006f52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f56:	ed93 7b00 	vldr	d7, [r3]
 8006f5a:	05f8      	lsls	r0, r7, #23
 8006f5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f64:	d516      	bpl.n	8006f94 <_dtoa_r+0x34c>
 8006f66:	4ba8      	ldr	r3, [pc, #672]	@ (8007208 <_dtoa_r+0x5c0>)
 8006f68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f70:	f7f9 fc94 	bl	800089c <__aeabi_ddiv>
 8006f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f78:	f004 040f 	and.w	r4, r4, #15
 8006f7c:	2603      	movs	r6, #3
 8006f7e:	4da2      	ldr	r5, [pc, #648]	@ (8007208 <_dtoa_r+0x5c0>)
 8006f80:	b954      	cbnz	r4, 8006f98 <_dtoa_r+0x350>
 8006f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f8a:	f7f9 fc87 	bl	800089c <__aeabi_ddiv>
 8006f8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f92:	e028      	b.n	8006fe6 <_dtoa_r+0x39e>
 8006f94:	2602      	movs	r6, #2
 8006f96:	e7f2      	b.n	8006f7e <_dtoa_r+0x336>
 8006f98:	07e1      	lsls	r1, r4, #31
 8006f9a:	d508      	bpl.n	8006fae <_dtoa_r+0x366>
 8006f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fa4:	f7f9 fb50 	bl	8000648 <__aeabi_dmul>
 8006fa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fac:	3601      	adds	r6, #1
 8006fae:	1064      	asrs	r4, r4, #1
 8006fb0:	3508      	adds	r5, #8
 8006fb2:	e7e5      	b.n	8006f80 <_dtoa_r+0x338>
 8006fb4:	f000 80d2 	beq.w	800715c <_dtoa_r+0x514>
 8006fb8:	427c      	negs	r4, r7
 8006fba:	4b92      	ldr	r3, [pc, #584]	@ (8007204 <_dtoa_r+0x5bc>)
 8006fbc:	4d92      	ldr	r5, [pc, #584]	@ (8007208 <_dtoa_r+0x5c0>)
 8006fbe:	f004 020f 	and.w	r2, r4, #15
 8006fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fce:	f7f9 fb3b 	bl	8000648 <__aeabi_dmul>
 8006fd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd6:	1124      	asrs	r4, r4, #4
 8006fd8:	2300      	movs	r3, #0
 8006fda:	2602      	movs	r6, #2
 8006fdc:	2c00      	cmp	r4, #0
 8006fde:	f040 80b2 	bne.w	8007146 <_dtoa_r+0x4fe>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1d3      	bne.n	8006f8e <_dtoa_r+0x346>
 8006fe6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fe8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 80b7 	beq.w	8007160 <_dtoa_r+0x518>
 8006ff2:	4b86      	ldr	r3, [pc, #536]	@ (800720c <_dtoa_r+0x5c4>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	f7f9 fd97 	bl	8000b2c <__aeabi_dcmplt>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f000 80ae 	beq.w	8007160 <_dtoa_r+0x518>
 8007004:	9b07      	ldr	r3, [sp, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 80aa 	beq.w	8007160 <_dtoa_r+0x518>
 800700c:	9b00      	ldr	r3, [sp, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	dd37      	ble.n	8007082 <_dtoa_r+0x43a>
 8007012:	1e7b      	subs	r3, r7, #1
 8007014:	9304      	str	r3, [sp, #16]
 8007016:	4620      	mov	r0, r4
 8007018:	4b7d      	ldr	r3, [pc, #500]	@ (8007210 <_dtoa_r+0x5c8>)
 800701a:	2200      	movs	r2, #0
 800701c:	4629      	mov	r1, r5
 800701e:	f7f9 fb13 	bl	8000648 <__aeabi_dmul>
 8007022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007026:	9c00      	ldr	r4, [sp, #0]
 8007028:	3601      	adds	r6, #1
 800702a:	4630      	mov	r0, r6
 800702c:	f7f9 faa2 	bl	8000574 <__aeabi_i2d>
 8007030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007034:	f7f9 fb08 	bl	8000648 <__aeabi_dmul>
 8007038:	4b76      	ldr	r3, [pc, #472]	@ (8007214 <_dtoa_r+0x5cc>)
 800703a:	2200      	movs	r2, #0
 800703c:	f7f9 f94e 	bl	80002dc <__adddf3>
 8007040:	4605      	mov	r5, r0
 8007042:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007046:	2c00      	cmp	r4, #0
 8007048:	f040 808d 	bne.w	8007166 <_dtoa_r+0x51e>
 800704c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007050:	4b71      	ldr	r3, [pc, #452]	@ (8007218 <_dtoa_r+0x5d0>)
 8007052:	2200      	movs	r2, #0
 8007054:	f7f9 f940 	bl	80002d8 <__aeabi_dsub>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007060:	462a      	mov	r2, r5
 8007062:	4633      	mov	r3, r6
 8007064:	f7f9 fd80 	bl	8000b68 <__aeabi_dcmpgt>
 8007068:	2800      	cmp	r0, #0
 800706a:	f040 828b 	bne.w	8007584 <_dtoa_r+0x93c>
 800706e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007072:	462a      	mov	r2, r5
 8007074:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007078:	f7f9 fd58 	bl	8000b2c <__aeabi_dcmplt>
 800707c:	2800      	cmp	r0, #0
 800707e:	f040 8128 	bne.w	80072d2 <_dtoa_r+0x68a>
 8007082:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007086:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800708a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800708c:	2b00      	cmp	r3, #0
 800708e:	f2c0 815a 	blt.w	8007346 <_dtoa_r+0x6fe>
 8007092:	2f0e      	cmp	r7, #14
 8007094:	f300 8157 	bgt.w	8007346 <_dtoa_r+0x6fe>
 8007098:	4b5a      	ldr	r3, [pc, #360]	@ (8007204 <_dtoa_r+0x5bc>)
 800709a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800709e:	ed93 7b00 	vldr	d7, [r3]
 80070a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	ed8d 7b00 	vstr	d7, [sp]
 80070aa:	da03      	bge.n	80070b4 <_dtoa_r+0x46c>
 80070ac:	9b07      	ldr	r3, [sp, #28]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f340 8101 	ble.w	80072b6 <_dtoa_r+0x66e>
 80070b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070b8:	4656      	mov	r6, sl
 80070ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070be:	4620      	mov	r0, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	f7f9 fbeb 	bl	800089c <__aeabi_ddiv>
 80070c6:	f7f9 fd6f 	bl	8000ba8 <__aeabi_d2iz>
 80070ca:	4680      	mov	r8, r0
 80070cc:	f7f9 fa52 	bl	8000574 <__aeabi_i2d>
 80070d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070d4:	f7f9 fab8 	bl	8000648 <__aeabi_dmul>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4620      	mov	r0, r4
 80070de:	4629      	mov	r1, r5
 80070e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80070e4:	f7f9 f8f8 	bl	80002d8 <__aeabi_dsub>
 80070e8:	f806 4b01 	strb.w	r4, [r6], #1
 80070ec:	9d07      	ldr	r5, [sp, #28]
 80070ee:	eba6 040a 	sub.w	r4, r6, sl
 80070f2:	42a5      	cmp	r5, r4
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	f040 8117 	bne.w	800732a <_dtoa_r+0x6e2>
 80070fc:	f7f9 f8ee 	bl	80002dc <__adddf3>
 8007100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007104:	4604      	mov	r4, r0
 8007106:	460d      	mov	r5, r1
 8007108:	f7f9 fd2e 	bl	8000b68 <__aeabi_dcmpgt>
 800710c:	2800      	cmp	r0, #0
 800710e:	f040 80f9 	bne.w	8007304 <_dtoa_r+0x6bc>
 8007112:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007116:	4620      	mov	r0, r4
 8007118:	4629      	mov	r1, r5
 800711a:	f7f9 fcfd 	bl	8000b18 <__aeabi_dcmpeq>
 800711e:	b118      	cbz	r0, 8007128 <_dtoa_r+0x4e0>
 8007120:	f018 0f01 	tst.w	r8, #1
 8007124:	f040 80ee 	bne.w	8007304 <_dtoa_r+0x6bc>
 8007128:	4649      	mov	r1, r9
 800712a:	4658      	mov	r0, fp
 800712c:	f000 fc90 	bl	8007a50 <_Bfree>
 8007130:	2300      	movs	r3, #0
 8007132:	7033      	strb	r3, [r6, #0]
 8007134:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007136:	3701      	adds	r7, #1
 8007138:	601f      	str	r7, [r3, #0]
 800713a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 831d 	beq.w	800777c <_dtoa_r+0xb34>
 8007142:	601e      	str	r6, [r3, #0]
 8007144:	e31a      	b.n	800777c <_dtoa_r+0xb34>
 8007146:	07e2      	lsls	r2, r4, #31
 8007148:	d505      	bpl.n	8007156 <_dtoa_r+0x50e>
 800714a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800714e:	f7f9 fa7b 	bl	8000648 <__aeabi_dmul>
 8007152:	3601      	adds	r6, #1
 8007154:	2301      	movs	r3, #1
 8007156:	1064      	asrs	r4, r4, #1
 8007158:	3508      	adds	r5, #8
 800715a:	e73f      	b.n	8006fdc <_dtoa_r+0x394>
 800715c:	2602      	movs	r6, #2
 800715e:	e742      	b.n	8006fe6 <_dtoa_r+0x39e>
 8007160:	9c07      	ldr	r4, [sp, #28]
 8007162:	9704      	str	r7, [sp, #16]
 8007164:	e761      	b.n	800702a <_dtoa_r+0x3e2>
 8007166:	4b27      	ldr	r3, [pc, #156]	@ (8007204 <_dtoa_r+0x5bc>)
 8007168:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800716a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800716e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007172:	4454      	add	r4, sl
 8007174:	2900      	cmp	r1, #0
 8007176:	d053      	beq.n	8007220 <_dtoa_r+0x5d8>
 8007178:	4928      	ldr	r1, [pc, #160]	@ (800721c <_dtoa_r+0x5d4>)
 800717a:	2000      	movs	r0, #0
 800717c:	f7f9 fb8e 	bl	800089c <__aeabi_ddiv>
 8007180:	4633      	mov	r3, r6
 8007182:	462a      	mov	r2, r5
 8007184:	f7f9 f8a8 	bl	80002d8 <__aeabi_dsub>
 8007188:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800718c:	4656      	mov	r6, sl
 800718e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007192:	f7f9 fd09 	bl	8000ba8 <__aeabi_d2iz>
 8007196:	4605      	mov	r5, r0
 8007198:	f7f9 f9ec 	bl	8000574 <__aeabi_i2d>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a4:	f7f9 f898 	bl	80002d8 <__aeabi_dsub>
 80071a8:	3530      	adds	r5, #48	@ 0x30
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071b2:	f806 5b01 	strb.w	r5, [r6], #1
 80071b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071ba:	f7f9 fcb7 	bl	8000b2c <__aeabi_dcmplt>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d171      	bne.n	80072a6 <_dtoa_r+0x65e>
 80071c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071c6:	4911      	ldr	r1, [pc, #68]	@ (800720c <_dtoa_r+0x5c4>)
 80071c8:	2000      	movs	r0, #0
 80071ca:	f7f9 f885 	bl	80002d8 <__aeabi_dsub>
 80071ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071d2:	f7f9 fcab 	bl	8000b2c <__aeabi_dcmplt>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f040 8095 	bne.w	8007306 <_dtoa_r+0x6be>
 80071dc:	42a6      	cmp	r6, r4
 80071de:	f43f af50 	beq.w	8007082 <_dtoa_r+0x43a>
 80071e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007210 <_dtoa_r+0x5c8>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	f7f9 fa2d 	bl	8000648 <__aeabi_dmul>
 80071ee:	4b08      	ldr	r3, [pc, #32]	@ (8007210 <_dtoa_r+0x5c8>)
 80071f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071f4:	2200      	movs	r2, #0
 80071f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071fa:	f7f9 fa25 	bl	8000648 <__aeabi_dmul>
 80071fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007202:	e7c4      	b.n	800718e <_dtoa_r+0x546>
 8007204:	08008bc0 	.word	0x08008bc0
 8007208:	08008b98 	.word	0x08008b98
 800720c:	3ff00000 	.word	0x3ff00000
 8007210:	40240000 	.word	0x40240000
 8007214:	401c0000 	.word	0x401c0000
 8007218:	40140000 	.word	0x40140000
 800721c:	3fe00000 	.word	0x3fe00000
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	f7f9 fa10 	bl	8000648 <__aeabi_dmul>
 8007228:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800722c:	9415      	str	r4, [sp, #84]	@ 0x54
 800722e:	4656      	mov	r6, sl
 8007230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007234:	f7f9 fcb8 	bl	8000ba8 <__aeabi_d2iz>
 8007238:	4605      	mov	r5, r0
 800723a:	f7f9 f99b 	bl	8000574 <__aeabi_i2d>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007246:	f7f9 f847 	bl	80002d8 <__aeabi_dsub>
 800724a:	3530      	adds	r5, #48	@ 0x30
 800724c:	f806 5b01 	strb.w	r5, [r6], #1
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	42a6      	cmp	r6, r4
 8007256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	d124      	bne.n	80072aa <_dtoa_r+0x662>
 8007260:	4bac      	ldr	r3, [pc, #688]	@ (8007514 <_dtoa_r+0x8cc>)
 8007262:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007266:	f7f9 f839 	bl	80002dc <__adddf3>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007272:	f7f9 fc79 	bl	8000b68 <__aeabi_dcmpgt>
 8007276:	2800      	cmp	r0, #0
 8007278:	d145      	bne.n	8007306 <_dtoa_r+0x6be>
 800727a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800727e:	49a5      	ldr	r1, [pc, #660]	@ (8007514 <_dtoa_r+0x8cc>)
 8007280:	2000      	movs	r0, #0
 8007282:	f7f9 f829 	bl	80002d8 <__aeabi_dsub>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728e:	f7f9 fc4d 	bl	8000b2c <__aeabi_dcmplt>
 8007292:	2800      	cmp	r0, #0
 8007294:	f43f aef5 	beq.w	8007082 <_dtoa_r+0x43a>
 8007298:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800729a:	1e73      	subs	r3, r6, #1
 800729c:	9315      	str	r3, [sp, #84]	@ 0x54
 800729e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072a2:	2b30      	cmp	r3, #48	@ 0x30
 80072a4:	d0f8      	beq.n	8007298 <_dtoa_r+0x650>
 80072a6:	9f04      	ldr	r7, [sp, #16]
 80072a8:	e73e      	b.n	8007128 <_dtoa_r+0x4e0>
 80072aa:	4b9b      	ldr	r3, [pc, #620]	@ (8007518 <_dtoa_r+0x8d0>)
 80072ac:	f7f9 f9cc 	bl	8000648 <__aeabi_dmul>
 80072b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b4:	e7bc      	b.n	8007230 <_dtoa_r+0x5e8>
 80072b6:	d10c      	bne.n	80072d2 <_dtoa_r+0x68a>
 80072b8:	4b98      	ldr	r3, [pc, #608]	@ (800751c <_dtoa_r+0x8d4>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072c0:	f7f9 f9c2 	bl	8000648 <__aeabi_dmul>
 80072c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c8:	f7f9 fc44 	bl	8000b54 <__aeabi_dcmpge>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	f000 8157 	beq.w	8007580 <_dtoa_r+0x938>
 80072d2:	2400      	movs	r4, #0
 80072d4:	4625      	mov	r5, r4
 80072d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072d8:	43db      	mvns	r3, r3
 80072da:	9304      	str	r3, [sp, #16]
 80072dc:	4656      	mov	r6, sl
 80072de:	2700      	movs	r7, #0
 80072e0:	4621      	mov	r1, r4
 80072e2:	4658      	mov	r0, fp
 80072e4:	f000 fbb4 	bl	8007a50 <_Bfree>
 80072e8:	2d00      	cmp	r5, #0
 80072ea:	d0dc      	beq.n	80072a6 <_dtoa_r+0x65e>
 80072ec:	b12f      	cbz	r7, 80072fa <_dtoa_r+0x6b2>
 80072ee:	42af      	cmp	r7, r5
 80072f0:	d003      	beq.n	80072fa <_dtoa_r+0x6b2>
 80072f2:	4639      	mov	r1, r7
 80072f4:	4658      	mov	r0, fp
 80072f6:	f000 fbab 	bl	8007a50 <_Bfree>
 80072fa:	4629      	mov	r1, r5
 80072fc:	4658      	mov	r0, fp
 80072fe:	f000 fba7 	bl	8007a50 <_Bfree>
 8007302:	e7d0      	b.n	80072a6 <_dtoa_r+0x65e>
 8007304:	9704      	str	r7, [sp, #16]
 8007306:	4633      	mov	r3, r6
 8007308:	461e      	mov	r6, r3
 800730a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800730e:	2a39      	cmp	r2, #57	@ 0x39
 8007310:	d107      	bne.n	8007322 <_dtoa_r+0x6da>
 8007312:	459a      	cmp	sl, r3
 8007314:	d1f8      	bne.n	8007308 <_dtoa_r+0x6c0>
 8007316:	9a04      	ldr	r2, [sp, #16]
 8007318:	3201      	adds	r2, #1
 800731a:	9204      	str	r2, [sp, #16]
 800731c:	2230      	movs	r2, #48	@ 0x30
 800731e:	f88a 2000 	strb.w	r2, [sl]
 8007322:	781a      	ldrb	r2, [r3, #0]
 8007324:	3201      	adds	r2, #1
 8007326:	701a      	strb	r2, [r3, #0]
 8007328:	e7bd      	b.n	80072a6 <_dtoa_r+0x65e>
 800732a:	4b7b      	ldr	r3, [pc, #492]	@ (8007518 <_dtoa_r+0x8d0>)
 800732c:	2200      	movs	r2, #0
 800732e:	f7f9 f98b 	bl	8000648 <__aeabi_dmul>
 8007332:	2200      	movs	r2, #0
 8007334:	2300      	movs	r3, #0
 8007336:	4604      	mov	r4, r0
 8007338:	460d      	mov	r5, r1
 800733a:	f7f9 fbed 	bl	8000b18 <__aeabi_dcmpeq>
 800733e:	2800      	cmp	r0, #0
 8007340:	f43f aebb 	beq.w	80070ba <_dtoa_r+0x472>
 8007344:	e6f0      	b.n	8007128 <_dtoa_r+0x4e0>
 8007346:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007348:	2a00      	cmp	r2, #0
 800734a:	f000 80db 	beq.w	8007504 <_dtoa_r+0x8bc>
 800734e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007350:	2a01      	cmp	r2, #1
 8007352:	f300 80bf 	bgt.w	80074d4 <_dtoa_r+0x88c>
 8007356:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007358:	2a00      	cmp	r2, #0
 800735a:	f000 80b7 	beq.w	80074cc <_dtoa_r+0x884>
 800735e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007362:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007364:	4646      	mov	r6, r8
 8007366:	9a08      	ldr	r2, [sp, #32]
 8007368:	2101      	movs	r1, #1
 800736a:	441a      	add	r2, r3
 800736c:	4658      	mov	r0, fp
 800736e:	4498      	add	r8, r3
 8007370:	9208      	str	r2, [sp, #32]
 8007372:	f000 fc21 	bl	8007bb8 <__i2b>
 8007376:	4605      	mov	r5, r0
 8007378:	b15e      	cbz	r6, 8007392 <_dtoa_r+0x74a>
 800737a:	9b08      	ldr	r3, [sp, #32]
 800737c:	2b00      	cmp	r3, #0
 800737e:	dd08      	ble.n	8007392 <_dtoa_r+0x74a>
 8007380:	42b3      	cmp	r3, r6
 8007382:	9a08      	ldr	r2, [sp, #32]
 8007384:	bfa8      	it	ge
 8007386:	4633      	movge	r3, r6
 8007388:	eba8 0803 	sub.w	r8, r8, r3
 800738c:	1af6      	subs	r6, r6, r3
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007394:	b1f3      	cbz	r3, 80073d4 <_dtoa_r+0x78c>
 8007396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 80b7 	beq.w	800750c <_dtoa_r+0x8c4>
 800739e:	b18c      	cbz	r4, 80073c4 <_dtoa_r+0x77c>
 80073a0:	4629      	mov	r1, r5
 80073a2:	4622      	mov	r2, r4
 80073a4:	4658      	mov	r0, fp
 80073a6:	f000 fcc7 	bl	8007d38 <__pow5mult>
 80073aa:	464a      	mov	r2, r9
 80073ac:	4601      	mov	r1, r0
 80073ae:	4605      	mov	r5, r0
 80073b0:	4658      	mov	r0, fp
 80073b2:	f000 fc17 	bl	8007be4 <__multiply>
 80073b6:	4649      	mov	r1, r9
 80073b8:	9004      	str	r0, [sp, #16]
 80073ba:	4658      	mov	r0, fp
 80073bc:	f000 fb48 	bl	8007a50 <_Bfree>
 80073c0:	9b04      	ldr	r3, [sp, #16]
 80073c2:	4699      	mov	r9, r3
 80073c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073c6:	1b1a      	subs	r2, r3, r4
 80073c8:	d004      	beq.n	80073d4 <_dtoa_r+0x78c>
 80073ca:	4649      	mov	r1, r9
 80073cc:	4658      	mov	r0, fp
 80073ce:	f000 fcb3 	bl	8007d38 <__pow5mult>
 80073d2:	4681      	mov	r9, r0
 80073d4:	2101      	movs	r1, #1
 80073d6:	4658      	mov	r0, fp
 80073d8:	f000 fbee 	bl	8007bb8 <__i2b>
 80073dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073de:	4604      	mov	r4, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 81cf 	beq.w	8007784 <_dtoa_r+0xb3c>
 80073e6:	461a      	mov	r2, r3
 80073e8:	4601      	mov	r1, r0
 80073ea:	4658      	mov	r0, fp
 80073ec:	f000 fca4 	bl	8007d38 <__pow5mult>
 80073f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	4604      	mov	r4, r0
 80073f6:	f300 8095 	bgt.w	8007524 <_dtoa_r+0x8dc>
 80073fa:	9b02      	ldr	r3, [sp, #8]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f040 8087 	bne.w	8007510 <_dtoa_r+0x8c8>
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007408:	2b00      	cmp	r3, #0
 800740a:	f040 8089 	bne.w	8007520 <_dtoa_r+0x8d8>
 800740e:	9b03      	ldr	r3, [sp, #12]
 8007410:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007414:	0d1b      	lsrs	r3, r3, #20
 8007416:	051b      	lsls	r3, r3, #20
 8007418:	b12b      	cbz	r3, 8007426 <_dtoa_r+0x7de>
 800741a:	9b08      	ldr	r3, [sp, #32]
 800741c:	3301      	adds	r3, #1
 800741e:	9308      	str	r3, [sp, #32]
 8007420:	f108 0801 	add.w	r8, r8, #1
 8007424:	2301      	movs	r3, #1
 8007426:	930a      	str	r3, [sp, #40]	@ 0x28
 8007428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 81b0 	beq.w	8007790 <_dtoa_r+0xb48>
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007436:	6918      	ldr	r0, [r3, #16]
 8007438:	f000 fb72 	bl	8007b20 <__hi0bits>
 800743c:	f1c0 0020 	rsb	r0, r0, #32
 8007440:	9b08      	ldr	r3, [sp, #32]
 8007442:	4418      	add	r0, r3
 8007444:	f010 001f 	ands.w	r0, r0, #31
 8007448:	d077      	beq.n	800753a <_dtoa_r+0x8f2>
 800744a:	f1c0 0320 	rsb	r3, r0, #32
 800744e:	2b04      	cmp	r3, #4
 8007450:	dd6b      	ble.n	800752a <_dtoa_r+0x8e2>
 8007452:	9b08      	ldr	r3, [sp, #32]
 8007454:	f1c0 001c 	rsb	r0, r0, #28
 8007458:	4403      	add	r3, r0
 800745a:	4480      	add	r8, r0
 800745c:	4406      	add	r6, r0
 800745e:	9308      	str	r3, [sp, #32]
 8007460:	f1b8 0f00 	cmp.w	r8, #0
 8007464:	dd05      	ble.n	8007472 <_dtoa_r+0x82a>
 8007466:	4649      	mov	r1, r9
 8007468:	4642      	mov	r2, r8
 800746a:	4658      	mov	r0, fp
 800746c:	f000 fcbe 	bl	8007dec <__lshift>
 8007470:	4681      	mov	r9, r0
 8007472:	9b08      	ldr	r3, [sp, #32]
 8007474:	2b00      	cmp	r3, #0
 8007476:	dd05      	ble.n	8007484 <_dtoa_r+0x83c>
 8007478:	4621      	mov	r1, r4
 800747a:	461a      	mov	r2, r3
 800747c:	4658      	mov	r0, fp
 800747e:	f000 fcb5 	bl	8007dec <__lshift>
 8007482:	4604      	mov	r4, r0
 8007484:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007486:	2b00      	cmp	r3, #0
 8007488:	d059      	beq.n	800753e <_dtoa_r+0x8f6>
 800748a:	4621      	mov	r1, r4
 800748c:	4648      	mov	r0, r9
 800748e:	f000 fd19 	bl	8007ec4 <__mcmp>
 8007492:	2800      	cmp	r0, #0
 8007494:	da53      	bge.n	800753e <_dtoa_r+0x8f6>
 8007496:	1e7b      	subs	r3, r7, #1
 8007498:	9304      	str	r3, [sp, #16]
 800749a:	4649      	mov	r1, r9
 800749c:	2300      	movs	r3, #0
 800749e:	220a      	movs	r2, #10
 80074a0:	4658      	mov	r0, fp
 80074a2:	f000 faf7 	bl	8007a94 <__multadd>
 80074a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074a8:	4681      	mov	r9, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 8172 	beq.w	8007794 <_dtoa_r+0xb4c>
 80074b0:	2300      	movs	r3, #0
 80074b2:	4629      	mov	r1, r5
 80074b4:	220a      	movs	r2, #10
 80074b6:	4658      	mov	r0, fp
 80074b8:	f000 faec 	bl	8007a94 <__multadd>
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	4605      	mov	r5, r0
 80074c2:	dc67      	bgt.n	8007594 <_dtoa_r+0x94c>
 80074c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	dc41      	bgt.n	800754e <_dtoa_r+0x906>
 80074ca:	e063      	b.n	8007594 <_dtoa_r+0x94c>
 80074cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80074ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80074d2:	e746      	b.n	8007362 <_dtoa_r+0x71a>
 80074d4:	9b07      	ldr	r3, [sp, #28]
 80074d6:	1e5c      	subs	r4, r3, #1
 80074d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074da:	42a3      	cmp	r3, r4
 80074dc:	bfbf      	itttt	lt
 80074de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80074e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80074e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80074e4:	1ae3      	sublt	r3, r4, r3
 80074e6:	bfb4      	ite	lt
 80074e8:	18d2      	addlt	r2, r2, r3
 80074ea:	1b1c      	subge	r4, r3, r4
 80074ec:	9b07      	ldr	r3, [sp, #28]
 80074ee:	bfbc      	itt	lt
 80074f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80074f2:	2400      	movlt	r4, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfb5      	itete	lt
 80074f8:	eba8 0603 	sublt.w	r6, r8, r3
 80074fc:	9b07      	ldrge	r3, [sp, #28]
 80074fe:	2300      	movlt	r3, #0
 8007500:	4646      	movge	r6, r8
 8007502:	e730      	b.n	8007366 <_dtoa_r+0x71e>
 8007504:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007506:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007508:	4646      	mov	r6, r8
 800750a:	e735      	b.n	8007378 <_dtoa_r+0x730>
 800750c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800750e:	e75c      	b.n	80073ca <_dtoa_r+0x782>
 8007510:	2300      	movs	r3, #0
 8007512:	e788      	b.n	8007426 <_dtoa_r+0x7de>
 8007514:	3fe00000 	.word	0x3fe00000
 8007518:	40240000 	.word	0x40240000
 800751c:	40140000 	.word	0x40140000
 8007520:	9b02      	ldr	r3, [sp, #8]
 8007522:	e780      	b.n	8007426 <_dtoa_r+0x7de>
 8007524:	2300      	movs	r3, #0
 8007526:	930a      	str	r3, [sp, #40]	@ 0x28
 8007528:	e782      	b.n	8007430 <_dtoa_r+0x7e8>
 800752a:	d099      	beq.n	8007460 <_dtoa_r+0x818>
 800752c:	9a08      	ldr	r2, [sp, #32]
 800752e:	331c      	adds	r3, #28
 8007530:	441a      	add	r2, r3
 8007532:	4498      	add	r8, r3
 8007534:	441e      	add	r6, r3
 8007536:	9208      	str	r2, [sp, #32]
 8007538:	e792      	b.n	8007460 <_dtoa_r+0x818>
 800753a:	4603      	mov	r3, r0
 800753c:	e7f6      	b.n	800752c <_dtoa_r+0x8e4>
 800753e:	9b07      	ldr	r3, [sp, #28]
 8007540:	9704      	str	r7, [sp, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	dc20      	bgt.n	8007588 <_dtoa_r+0x940>
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800754a:	2b02      	cmp	r3, #2
 800754c:	dd1e      	ble.n	800758c <_dtoa_r+0x944>
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f47f aec0 	bne.w	80072d6 <_dtoa_r+0x68e>
 8007556:	4621      	mov	r1, r4
 8007558:	2205      	movs	r2, #5
 800755a:	4658      	mov	r0, fp
 800755c:	f000 fa9a 	bl	8007a94 <__multadd>
 8007560:	4601      	mov	r1, r0
 8007562:	4604      	mov	r4, r0
 8007564:	4648      	mov	r0, r9
 8007566:	f000 fcad 	bl	8007ec4 <__mcmp>
 800756a:	2800      	cmp	r0, #0
 800756c:	f77f aeb3 	ble.w	80072d6 <_dtoa_r+0x68e>
 8007570:	4656      	mov	r6, sl
 8007572:	2331      	movs	r3, #49	@ 0x31
 8007574:	f806 3b01 	strb.w	r3, [r6], #1
 8007578:	9b04      	ldr	r3, [sp, #16]
 800757a:	3301      	adds	r3, #1
 800757c:	9304      	str	r3, [sp, #16]
 800757e:	e6ae      	b.n	80072de <_dtoa_r+0x696>
 8007580:	9c07      	ldr	r4, [sp, #28]
 8007582:	9704      	str	r7, [sp, #16]
 8007584:	4625      	mov	r5, r4
 8007586:	e7f3      	b.n	8007570 <_dtoa_r+0x928>
 8007588:	9b07      	ldr	r3, [sp, #28]
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 8104 	beq.w	800779c <_dtoa_r+0xb54>
 8007594:	2e00      	cmp	r6, #0
 8007596:	dd05      	ble.n	80075a4 <_dtoa_r+0x95c>
 8007598:	4629      	mov	r1, r5
 800759a:	4632      	mov	r2, r6
 800759c:	4658      	mov	r0, fp
 800759e:	f000 fc25 	bl	8007dec <__lshift>
 80075a2:	4605      	mov	r5, r0
 80075a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d05a      	beq.n	8007660 <_dtoa_r+0xa18>
 80075aa:	6869      	ldr	r1, [r5, #4]
 80075ac:	4658      	mov	r0, fp
 80075ae:	f000 fa0f 	bl	80079d0 <_Balloc>
 80075b2:	4606      	mov	r6, r0
 80075b4:	b928      	cbnz	r0, 80075c2 <_dtoa_r+0x97a>
 80075b6:	4b84      	ldr	r3, [pc, #528]	@ (80077c8 <_dtoa_r+0xb80>)
 80075b8:	4602      	mov	r2, r0
 80075ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80075be:	f7ff bb5a 	b.w	8006c76 <_dtoa_r+0x2e>
 80075c2:	692a      	ldr	r2, [r5, #16]
 80075c4:	3202      	adds	r2, #2
 80075c6:	0092      	lsls	r2, r2, #2
 80075c8:	f105 010c 	add.w	r1, r5, #12
 80075cc:	300c      	adds	r0, #12
 80075ce:	f7ff faa4 	bl	8006b1a <memcpy>
 80075d2:	2201      	movs	r2, #1
 80075d4:	4631      	mov	r1, r6
 80075d6:	4658      	mov	r0, fp
 80075d8:	f000 fc08 	bl	8007dec <__lshift>
 80075dc:	f10a 0301 	add.w	r3, sl, #1
 80075e0:	9307      	str	r3, [sp, #28]
 80075e2:	9b00      	ldr	r3, [sp, #0]
 80075e4:	4453      	add	r3, sl
 80075e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075e8:	9b02      	ldr	r3, [sp, #8]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	462f      	mov	r7, r5
 80075f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80075f2:	4605      	mov	r5, r0
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	4621      	mov	r1, r4
 80075f8:	3b01      	subs	r3, #1
 80075fa:	4648      	mov	r0, r9
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	f7ff fa9a 	bl	8006b36 <quorem>
 8007602:	4639      	mov	r1, r7
 8007604:	9002      	str	r0, [sp, #8]
 8007606:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800760a:	4648      	mov	r0, r9
 800760c:	f000 fc5a 	bl	8007ec4 <__mcmp>
 8007610:	462a      	mov	r2, r5
 8007612:	9008      	str	r0, [sp, #32]
 8007614:	4621      	mov	r1, r4
 8007616:	4658      	mov	r0, fp
 8007618:	f000 fc70 	bl	8007efc <__mdiff>
 800761c:	68c2      	ldr	r2, [r0, #12]
 800761e:	4606      	mov	r6, r0
 8007620:	bb02      	cbnz	r2, 8007664 <_dtoa_r+0xa1c>
 8007622:	4601      	mov	r1, r0
 8007624:	4648      	mov	r0, r9
 8007626:	f000 fc4d 	bl	8007ec4 <__mcmp>
 800762a:	4602      	mov	r2, r0
 800762c:	4631      	mov	r1, r6
 800762e:	4658      	mov	r0, fp
 8007630:	920e      	str	r2, [sp, #56]	@ 0x38
 8007632:	f000 fa0d 	bl	8007a50 <_Bfree>
 8007636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007638:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800763a:	9e07      	ldr	r6, [sp, #28]
 800763c:	ea43 0102 	orr.w	r1, r3, r2
 8007640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007642:	4319      	orrs	r1, r3
 8007644:	d110      	bne.n	8007668 <_dtoa_r+0xa20>
 8007646:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800764a:	d029      	beq.n	80076a0 <_dtoa_r+0xa58>
 800764c:	9b08      	ldr	r3, [sp, #32]
 800764e:	2b00      	cmp	r3, #0
 8007650:	dd02      	ble.n	8007658 <_dtoa_r+0xa10>
 8007652:	9b02      	ldr	r3, [sp, #8]
 8007654:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007658:	9b00      	ldr	r3, [sp, #0]
 800765a:	f883 8000 	strb.w	r8, [r3]
 800765e:	e63f      	b.n	80072e0 <_dtoa_r+0x698>
 8007660:	4628      	mov	r0, r5
 8007662:	e7bb      	b.n	80075dc <_dtoa_r+0x994>
 8007664:	2201      	movs	r2, #1
 8007666:	e7e1      	b.n	800762c <_dtoa_r+0x9e4>
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	db04      	blt.n	8007678 <_dtoa_r+0xa30>
 800766e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007670:	430b      	orrs	r3, r1
 8007672:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007674:	430b      	orrs	r3, r1
 8007676:	d120      	bne.n	80076ba <_dtoa_r+0xa72>
 8007678:	2a00      	cmp	r2, #0
 800767a:	dded      	ble.n	8007658 <_dtoa_r+0xa10>
 800767c:	4649      	mov	r1, r9
 800767e:	2201      	movs	r2, #1
 8007680:	4658      	mov	r0, fp
 8007682:	f000 fbb3 	bl	8007dec <__lshift>
 8007686:	4621      	mov	r1, r4
 8007688:	4681      	mov	r9, r0
 800768a:	f000 fc1b 	bl	8007ec4 <__mcmp>
 800768e:	2800      	cmp	r0, #0
 8007690:	dc03      	bgt.n	800769a <_dtoa_r+0xa52>
 8007692:	d1e1      	bne.n	8007658 <_dtoa_r+0xa10>
 8007694:	f018 0f01 	tst.w	r8, #1
 8007698:	d0de      	beq.n	8007658 <_dtoa_r+0xa10>
 800769a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800769e:	d1d8      	bne.n	8007652 <_dtoa_r+0xa0a>
 80076a0:	9a00      	ldr	r2, [sp, #0]
 80076a2:	2339      	movs	r3, #57	@ 0x39
 80076a4:	7013      	strb	r3, [r2, #0]
 80076a6:	4633      	mov	r3, r6
 80076a8:	461e      	mov	r6, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076b0:	2a39      	cmp	r2, #57	@ 0x39
 80076b2:	d052      	beq.n	800775a <_dtoa_r+0xb12>
 80076b4:	3201      	adds	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	e612      	b.n	80072e0 <_dtoa_r+0x698>
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	dd07      	ble.n	80076ce <_dtoa_r+0xa86>
 80076be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076c2:	d0ed      	beq.n	80076a0 <_dtoa_r+0xa58>
 80076c4:	9a00      	ldr	r2, [sp, #0]
 80076c6:	f108 0301 	add.w	r3, r8, #1
 80076ca:	7013      	strb	r3, [r2, #0]
 80076cc:	e608      	b.n	80072e0 <_dtoa_r+0x698>
 80076ce:	9b07      	ldr	r3, [sp, #28]
 80076d0:	9a07      	ldr	r2, [sp, #28]
 80076d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80076d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d8:	4293      	cmp	r3, r2
 80076da:	d028      	beq.n	800772e <_dtoa_r+0xae6>
 80076dc:	4649      	mov	r1, r9
 80076de:	2300      	movs	r3, #0
 80076e0:	220a      	movs	r2, #10
 80076e2:	4658      	mov	r0, fp
 80076e4:	f000 f9d6 	bl	8007a94 <__multadd>
 80076e8:	42af      	cmp	r7, r5
 80076ea:	4681      	mov	r9, r0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	f04f 020a 	mov.w	r2, #10
 80076f4:	4639      	mov	r1, r7
 80076f6:	4658      	mov	r0, fp
 80076f8:	d107      	bne.n	800770a <_dtoa_r+0xac2>
 80076fa:	f000 f9cb 	bl	8007a94 <__multadd>
 80076fe:	4607      	mov	r7, r0
 8007700:	4605      	mov	r5, r0
 8007702:	9b07      	ldr	r3, [sp, #28]
 8007704:	3301      	adds	r3, #1
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	e774      	b.n	80075f4 <_dtoa_r+0x9ac>
 800770a:	f000 f9c3 	bl	8007a94 <__multadd>
 800770e:	4629      	mov	r1, r5
 8007710:	4607      	mov	r7, r0
 8007712:	2300      	movs	r3, #0
 8007714:	220a      	movs	r2, #10
 8007716:	4658      	mov	r0, fp
 8007718:	f000 f9bc 	bl	8007a94 <__multadd>
 800771c:	4605      	mov	r5, r0
 800771e:	e7f0      	b.n	8007702 <_dtoa_r+0xaba>
 8007720:	9b00      	ldr	r3, [sp, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	bfcc      	ite	gt
 8007726:	461e      	movgt	r6, r3
 8007728:	2601      	movle	r6, #1
 800772a:	4456      	add	r6, sl
 800772c:	2700      	movs	r7, #0
 800772e:	4649      	mov	r1, r9
 8007730:	2201      	movs	r2, #1
 8007732:	4658      	mov	r0, fp
 8007734:	f000 fb5a 	bl	8007dec <__lshift>
 8007738:	4621      	mov	r1, r4
 800773a:	4681      	mov	r9, r0
 800773c:	f000 fbc2 	bl	8007ec4 <__mcmp>
 8007740:	2800      	cmp	r0, #0
 8007742:	dcb0      	bgt.n	80076a6 <_dtoa_r+0xa5e>
 8007744:	d102      	bne.n	800774c <_dtoa_r+0xb04>
 8007746:	f018 0f01 	tst.w	r8, #1
 800774a:	d1ac      	bne.n	80076a6 <_dtoa_r+0xa5e>
 800774c:	4633      	mov	r3, r6
 800774e:	461e      	mov	r6, r3
 8007750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007754:	2a30      	cmp	r2, #48	@ 0x30
 8007756:	d0fa      	beq.n	800774e <_dtoa_r+0xb06>
 8007758:	e5c2      	b.n	80072e0 <_dtoa_r+0x698>
 800775a:	459a      	cmp	sl, r3
 800775c:	d1a4      	bne.n	80076a8 <_dtoa_r+0xa60>
 800775e:	9b04      	ldr	r3, [sp, #16]
 8007760:	3301      	adds	r3, #1
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	2331      	movs	r3, #49	@ 0x31
 8007766:	f88a 3000 	strb.w	r3, [sl]
 800776a:	e5b9      	b.n	80072e0 <_dtoa_r+0x698>
 800776c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800776e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80077cc <_dtoa_r+0xb84>
 8007772:	b11b      	cbz	r3, 800777c <_dtoa_r+0xb34>
 8007774:	f10a 0308 	add.w	r3, sl, #8
 8007778:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	4650      	mov	r0, sl
 800777e:	b019      	add	sp, #100	@ 0x64
 8007780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007786:	2b01      	cmp	r3, #1
 8007788:	f77f ae37 	ble.w	80073fa <_dtoa_r+0x7b2>
 800778c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800778e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007790:	2001      	movs	r0, #1
 8007792:	e655      	b.n	8007440 <_dtoa_r+0x7f8>
 8007794:	9b00      	ldr	r3, [sp, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f77f aed6 	ble.w	8007548 <_dtoa_r+0x900>
 800779c:	4656      	mov	r6, sl
 800779e:	4621      	mov	r1, r4
 80077a0:	4648      	mov	r0, r9
 80077a2:	f7ff f9c8 	bl	8006b36 <quorem>
 80077a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077aa:	f806 8b01 	strb.w	r8, [r6], #1
 80077ae:	9b00      	ldr	r3, [sp, #0]
 80077b0:	eba6 020a 	sub.w	r2, r6, sl
 80077b4:	4293      	cmp	r3, r2
 80077b6:	ddb3      	ble.n	8007720 <_dtoa_r+0xad8>
 80077b8:	4649      	mov	r1, r9
 80077ba:	2300      	movs	r3, #0
 80077bc:	220a      	movs	r2, #10
 80077be:	4658      	mov	r0, fp
 80077c0:	f000 f968 	bl	8007a94 <__multadd>
 80077c4:	4681      	mov	r9, r0
 80077c6:	e7ea      	b.n	800779e <_dtoa_r+0xb56>
 80077c8:	08008b20 	.word	0x08008b20
 80077cc:	08008aa4 	.word	0x08008aa4

080077d0 <_free_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4605      	mov	r5, r0
 80077d4:	2900      	cmp	r1, #0
 80077d6:	d041      	beq.n	800785c <_free_r+0x8c>
 80077d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077dc:	1f0c      	subs	r4, r1, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfb8      	it	lt
 80077e2:	18e4      	addlt	r4, r4, r3
 80077e4:	f000 f8e8 	bl	80079b8 <__malloc_lock>
 80077e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007860 <_free_r+0x90>)
 80077ea:	6813      	ldr	r3, [r2, #0]
 80077ec:	b933      	cbnz	r3, 80077fc <_free_r+0x2c>
 80077ee:	6063      	str	r3, [r4, #4]
 80077f0:	6014      	str	r4, [r2, #0]
 80077f2:	4628      	mov	r0, r5
 80077f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077f8:	f000 b8e4 	b.w	80079c4 <__malloc_unlock>
 80077fc:	42a3      	cmp	r3, r4
 80077fe:	d908      	bls.n	8007812 <_free_r+0x42>
 8007800:	6820      	ldr	r0, [r4, #0]
 8007802:	1821      	adds	r1, r4, r0
 8007804:	428b      	cmp	r3, r1
 8007806:	bf01      	itttt	eq
 8007808:	6819      	ldreq	r1, [r3, #0]
 800780a:	685b      	ldreq	r3, [r3, #4]
 800780c:	1809      	addeq	r1, r1, r0
 800780e:	6021      	streq	r1, [r4, #0]
 8007810:	e7ed      	b.n	80077ee <_free_r+0x1e>
 8007812:	461a      	mov	r2, r3
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	b10b      	cbz	r3, 800781c <_free_r+0x4c>
 8007818:	42a3      	cmp	r3, r4
 800781a:	d9fa      	bls.n	8007812 <_free_r+0x42>
 800781c:	6811      	ldr	r1, [r2, #0]
 800781e:	1850      	adds	r0, r2, r1
 8007820:	42a0      	cmp	r0, r4
 8007822:	d10b      	bne.n	800783c <_free_r+0x6c>
 8007824:	6820      	ldr	r0, [r4, #0]
 8007826:	4401      	add	r1, r0
 8007828:	1850      	adds	r0, r2, r1
 800782a:	4283      	cmp	r3, r0
 800782c:	6011      	str	r1, [r2, #0]
 800782e:	d1e0      	bne.n	80077f2 <_free_r+0x22>
 8007830:	6818      	ldr	r0, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	6053      	str	r3, [r2, #4]
 8007836:	4408      	add	r0, r1
 8007838:	6010      	str	r0, [r2, #0]
 800783a:	e7da      	b.n	80077f2 <_free_r+0x22>
 800783c:	d902      	bls.n	8007844 <_free_r+0x74>
 800783e:	230c      	movs	r3, #12
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	e7d6      	b.n	80077f2 <_free_r+0x22>
 8007844:	6820      	ldr	r0, [r4, #0]
 8007846:	1821      	adds	r1, r4, r0
 8007848:	428b      	cmp	r3, r1
 800784a:	bf04      	itt	eq
 800784c:	6819      	ldreq	r1, [r3, #0]
 800784e:	685b      	ldreq	r3, [r3, #4]
 8007850:	6063      	str	r3, [r4, #4]
 8007852:	bf04      	itt	eq
 8007854:	1809      	addeq	r1, r1, r0
 8007856:	6021      	streq	r1, [r4, #0]
 8007858:	6054      	str	r4, [r2, #4]
 800785a:	e7ca      	b.n	80077f2 <_free_r+0x22>
 800785c:	bd38      	pop	{r3, r4, r5, pc}
 800785e:	bf00      	nop
 8007860:	200004bc 	.word	0x200004bc

08007864 <malloc>:
 8007864:	4b02      	ldr	r3, [pc, #8]	@ (8007870 <malloc+0xc>)
 8007866:	4601      	mov	r1, r0
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	f000 b825 	b.w	80078b8 <_malloc_r>
 800786e:	bf00      	nop
 8007870:	2000002c 	.word	0x2000002c

08007874 <sbrk_aligned>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	4e0f      	ldr	r6, [pc, #60]	@ (80078b4 <sbrk_aligned+0x40>)
 8007878:	460c      	mov	r4, r1
 800787a:	6831      	ldr	r1, [r6, #0]
 800787c:	4605      	mov	r5, r0
 800787e:	b911      	cbnz	r1, 8007886 <sbrk_aligned+0x12>
 8007880:	f000 feaa 	bl	80085d8 <_sbrk_r>
 8007884:	6030      	str	r0, [r6, #0]
 8007886:	4621      	mov	r1, r4
 8007888:	4628      	mov	r0, r5
 800788a:	f000 fea5 	bl	80085d8 <_sbrk_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d103      	bne.n	800789a <sbrk_aligned+0x26>
 8007892:	f04f 34ff 	mov.w	r4, #4294967295
 8007896:	4620      	mov	r0, r4
 8007898:	bd70      	pop	{r4, r5, r6, pc}
 800789a:	1cc4      	adds	r4, r0, #3
 800789c:	f024 0403 	bic.w	r4, r4, #3
 80078a0:	42a0      	cmp	r0, r4
 80078a2:	d0f8      	beq.n	8007896 <sbrk_aligned+0x22>
 80078a4:	1a21      	subs	r1, r4, r0
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 fe96 	bl	80085d8 <_sbrk_r>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d1f2      	bne.n	8007896 <sbrk_aligned+0x22>
 80078b0:	e7ef      	b.n	8007892 <sbrk_aligned+0x1e>
 80078b2:	bf00      	nop
 80078b4:	200004b8 	.word	0x200004b8

080078b8 <_malloc_r>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	1ccd      	adds	r5, r1, #3
 80078be:	f025 0503 	bic.w	r5, r5, #3
 80078c2:	3508      	adds	r5, #8
 80078c4:	2d0c      	cmp	r5, #12
 80078c6:	bf38      	it	cc
 80078c8:	250c      	movcc	r5, #12
 80078ca:	2d00      	cmp	r5, #0
 80078cc:	4606      	mov	r6, r0
 80078ce:	db01      	blt.n	80078d4 <_malloc_r+0x1c>
 80078d0:	42a9      	cmp	r1, r5
 80078d2:	d904      	bls.n	80078de <_malloc_r+0x26>
 80078d4:	230c      	movs	r3, #12
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	2000      	movs	r0, #0
 80078da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079b4 <_malloc_r+0xfc>
 80078e2:	f000 f869 	bl	80079b8 <__malloc_lock>
 80078e6:	f8d8 3000 	ldr.w	r3, [r8]
 80078ea:	461c      	mov	r4, r3
 80078ec:	bb44      	cbnz	r4, 8007940 <_malloc_r+0x88>
 80078ee:	4629      	mov	r1, r5
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff ffbf 	bl	8007874 <sbrk_aligned>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	4604      	mov	r4, r0
 80078fa:	d158      	bne.n	80079ae <_malloc_r+0xf6>
 80078fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007900:	4627      	mov	r7, r4
 8007902:	2f00      	cmp	r7, #0
 8007904:	d143      	bne.n	800798e <_malloc_r+0xd6>
 8007906:	2c00      	cmp	r4, #0
 8007908:	d04b      	beq.n	80079a2 <_malloc_r+0xea>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	4639      	mov	r1, r7
 800790e:	4630      	mov	r0, r6
 8007910:	eb04 0903 	add.w	r9, r4, r3
 8007914:	f000 fe60 	bl	80085d8 <_sbrk_r>
 8007918:	4581      	cmp	r9, r0
 800791a:	d142      	bne.n	80079a2 <_malloc_r+0xea>
 800791c:	6821      	ldr	r1, [r4, #0]
 800791e:	1a6d      	subs	r5, r5, r1
 8007920:	4629      	mov	r1, r5
 8007922:	4630      	mov	r0, r6
 8007924:	f7ff ffa6 	bl	8007874 <sbrk_aligned>
 8007928:	3001      	adds	r0, #1
 800792a:	d03a      	beq.n	80079a2 <_malloc_r+0xea>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	442b      	add	r3, r5
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	f8d8 3000 	ldr.w	r3, [r8]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	bb62      	cbnz	r2, 8007994 <_malloc_r+0xdc>
 800793a:	f8c8 7000 	str.w	r7, [r8]
 800793e:	e00f      	b.n	8007960 <_malloc_r+0xa8>
 8007940:	6822      	ldr	r2, [r4, #0]
 8007942:	1b52      	subs	r2, r2, r5
 8007944:	d420      	bmi.n	8007988 <_malloc_r+0xd0>
 8007946:	2a0b      	cmp	r2, #11
 8007948:	d917      	bls.n	800797a <_malloc_r+0xc2>
 800794a:	1961      	adds	r1, r4, r5
 800794c:	42a3      	cmp	r3, r4
 800794e:	6025      	str	r5, [r4, #0]
 8007950:	bf18      	it	ne
 8007952:	6059      	strne	r1, [r3, #4]
 8007954:	6863      	ldr	r3, [r4, #4]
 8007956:	bf08      	it	eq
 8007958:	f8c8 1000 	streq.w	r1, [r8]
 800795c:	5162      	str	r2, [r4, r5]
 800795e:	604b      	str	r3, [r1, #4]
 8007960:	4630      	mov	r0, r6
 8007962:	f000 f82f 	bl	80079c4 <__malloc_unlock>
 8007966:	f104 000b 	add.w	r0, r4, #11
 800796a:	1d23      	adds	r3, r4, #4
 800796c:	f020 0007 	bic.w	r0, r0, #7
 8007970:	1ac2      	subs	r2, r0, r3
 8007972:	bf1c      	itt	ne
 8007974:	1a1b      	subne	r3, r3, r0
 8007976:	50a3      	strne	r3, [r4, r2]
 8007978:	e7af      	b.n	80078da <_malloc_r+0x22>
 800797a:	6862      	ldr	r2, [r4, #4]
 800797c:	42a3      	cmp	r3, r4
 800797e:	bf0c      	ite	eq
 8007980:	f8c8 2000 	streq.w	r2, [r8]
 8007984:	605a      	strne	r2, [r3, #4]
 8007986:	e7eb      	b.n	8007960 <_malloc_r+0xa8>
 8007988:	4623      	mov	r3, r4
 800798a:	6864      	ldr	r4, [r4, #4]
 800798c:	e7ae      	b.n	80078ec <_malloc_r+0x34>
 800798e:	463c      	mov	r4, r7
 8007990:	687f      	ldr	r7, [r7, #4]
 8007992:	e7b6      	b.n	8007902 <_malloc_r+0x4a>
 8007994:	461a      	mov	r2, r3
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	42a3      	cmp	r3, r4
 800799a:	d1fb      	bne.n	8007994 <_malloc_r+0xdc>
 800799c:	2300      	movs	r3, #0
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	e7de      	b.n	8007960 <_malloc_r+0xa8>
 80079a2:	230c      	movs	r3, #12
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f80c 	bl	80079c4 <__malloc_unlock>
 80079ac:	e794      	b.n	80078d8 <_malloc_r+0x20>
 80079ae:	6005      	str	r5, [r0, #0]
 80079b0:	e7d6      	b.n	8007960 <_malloc_r+0xa8>
 80079b2:	bf00      	nop
 80079b4:	200004bc 	.word	0x200004bc

080079b8 <__malloc_lock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	@ (80079c0 <__malloc_lock+0x8>)
 80079ba:	f7ff b8ac 	b.w	8006b16 <__retarget_lock_acquire_recursive>
 80079be:	bf00      	nop
 80079c0:	200004b4 	.word	0x200004b4

080079c4 <__malloc_unlock>:
 80079c4:	4801      	ldr	r0, [pc, #4]	@ (80079cc <__malloc_unlock+0x8>)
 80079c6:	f7ff b8a7 	b.w	8006b18 <__retarget_lock_release_recursive>
 80079ca:	bf00      	nop
 80079cc:	200004b4 	.word	0x200004b4

080079d0 <_Balloc>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	69c6      	ldr	r6, [r0, #28]
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	b976      	cbnz	r6, 80079f8 <_Balloc+0x28>
 80079da:	2010      	movs	r0, #16
 80079dc:	f7ff ff42 	bl	8007864 <malloc>
 80079e0:	4602      	mov	r2, r0
 80079e2:	61e0      	str	r0, [r4, #28]
 80079e4:	b920      	cbnz	r0, 80079f0 <_Balloc+0x20>
 80079e6:	4b18      	ldr	r3, [pc, #96]	@ (8007a48 <_Balloc+0x78>)
 80079e8:	4818      	ldr	r0, [pc, #96]	@ (8007a4c <_Balloc+0x7c>)
 80079ea:	216b      	movs	r1, #107	@ 0x6b
 80079ec:	f000 fe04 	bl	80085f8 <__assert_func>
 80079f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079f4:	6006      	str	r6, [r0, #0]
 80079f6:	60c6      	str	r6, [r0, #12]
 80079f8:	69e6      	ldr	r6, [r4, #28]
 80079fa:	68f3      	ldr	r3, [r6, #12]
 80079fc:	b183      	cbz	r3, 8007a20 <_Balloc+0x50>
 80079fe:	69e3      	ldr	r3, [r4, #28]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a06:	b9b8      	cbnz	r0, 8007a38 <_Balloc+0x68>
 8007a08:	2101      	movs	r1, #1
 8007a0a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a0e:	1d72      	adds	r2, r6, #5
 8007a10:	0092      	lsls	r2, r2, #2
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 fe0e 	bl	8008634 <_calloc_r>
 8007a18:	b160      	cbz	r0, 8007a34 <_Balloc+0x64>
 8007a1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a1e:	e00e      	b.n	8007a3e <_Balloc+0x6e>
 8007a20:	2221      	movs	r2, #33	@ 0x21
 8007a22:	2104      	movs	r1, #4
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fe05 	bl	8008634 <_calloc_r>
 8007a2a:	69e3      	ldr	r3, [r4, #28]
 8007a2c:	60f0      	str	r0, [r6, #12]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e4      	bne.n	80079fe <_Balloc+0x2e>
 8007a34:	2000      	movs	r0, #0
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	6802      	ldr	r2, [r0, #0]
 8007a3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a44:	e7f7      	b.n	8007a36 <_Balloc+0x66>
 8007a46:	bf00      	nop
 8007a48:	08008ab1 	.word	0x08008ab1
 8007a4c:	08008b31 	.word	0x08008b31

08007a50 <_Bfree>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	69c6      	ldr	r6, [r0, #28]
 8007a54:	4605      	mov	r5, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	b976      	cbnz	r6, 8007a78 <_Bfree+0x28>
 8007a5a:	2010      	movs	r0, #16
 8007a5c:	f7ff ff02 	bl	8007864 <malloc>
 8007a60:	4602      	mov	r2, r0
 8007a62:	61e8      	str	r0, [r5, #28]
 8007a64:	b920      	cbnz	r0, 8007a70 <_Bfree+0x20>
 8007a66:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <_Bfree+0x3c>)
 8007a68:	4809      	ldr	r0, [pc, #36]	@ (8007a90 <_Bfree+0x40>)
 8007a6a:	218f      	movs	r1, #143	@ 0x8f
 8007a6c:	f000 fdc4 	bl	80085f8 <__assert_func>
 8007a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a74:	6006      	str	r6, [r0, #0]
 8007a76:	60c6      	str	r6, [r0, #12]
 8007a78:	b13c      	cbz	r4, 8007a8a <_Bfree+0x3a>
 8007a7a:	69eb      	ldr	r3, [r5, #28]
 8007a7c:	6862      	ldr	r2, [r4, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a84:	6021      	str	r1, [r4, #0]
 8007a86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a8a:	bd70      	pop	{r4, r5, r6, pc}
 8007a8c:	08008ab1 	.word	0x08008ab1
 8007a90:	08008b31 	.word	0x08008b31

08007a94 <__multadd>:
 8007a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a98:	690d      	ldr	r5, [r1, #16]
 8007a9a:	4607      	mov	r7, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	461e      	mov	r6, r3
 8007aa0:	f101 0c14 	add.w	ip, r1, #20
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f8dc 3000 	ldr.w	r3, [ip]
 8007aaa:	b299      	uxth	r1, r3
 8007aac:	fb02 6101 	mla	r1, r2, r1, r6
 8007ab0:	0c1e      	lsrs	r6, r3, #16
 8007ab2:	0c0b      	lsrs	r3, r1, #16
 8007ab4:	fb02 3306 	mla	r3, r2, r6, r3
 8007ab8:	b289      	uxth	r1, r1
 8007aba:	3001      	adds	r0, #1
 8007abc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ac0:	4285      	cmp	r5, r0
 8007ac2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ac6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007aca:	dcec      	bgt.n	8007aa6 <__multadd+0x12>
 8007acc:	b30e      	cbz	r6, 8007b12 <__multadd+0x7e>
 8007ace:	68a3      	ldr	r3, [r4, #8]
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	dc19      	bgt.n	8007b08 <__multadd+0x74>
 8007ad4:	6861      	ldr	r1, [r4, #4]
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	3101      	adds	r1, #1
 8007ada:	f7ff ff79 	bl	80079d0 <_Balloc>
 8007ade:	4680      	mov	r8, r0
 8007ae0:	b928      	cbnz	r0, 8007aee <__multadd+0x5a>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8007b18 <__multadd+0x84>)
 8007ae6:	480d      	ldr	r0, [pc, #52]	@ (8007b1c <__multadd+0x88>)
 8007ae8:	21ba      	movs	r1, #186	@ 0xba
 8007aea:	f000 fd85 	bl	80085f8 <__assert_func>
 8007aee:	6922      	ldr	r2, [r4, #16]
 8007af0:	3202      	adds	r2, #2
 8007af2:	f104 010c 	add.w	r1, r4, #12
 8007af6:	0092      	lsls	r2, r2, #2
 8007af8:	300c      	adds	r0, #12
 8007afa:	f7ff f80e 	bl	8006b1a <memcpy>
 8007afe:	4621      	mov	r1, r4
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff ffa5 	bl	8007a50 <_Bfree>
 8007b06:	4644      	mov	r4, r8
 8007b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	615e      	str	r6, [r3, #20]
 8007b10:	6125      	str	r5, [r4, #16]
 8007b12:	4620      	mov	r0, r4
 8007b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b18:	08008b20 	.word	0x08008b20
 8007b1c:	08008b31 	.word	0x08008b31

08007b20 <__hi0bits>:
 8007b20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b24:	4603      	mov	r3, r0
 8007b26:	bf36      	itet	cc
 8007b28:	0403      	lslcc	r3, r0, #16
 8007b2a:	2000      	movcs	r0, #0
 8007b2c:	2010      	movcc	r0, #16
 8007b2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b32:	bf3c      	itt	cc
 8007b34:	021b      	lslcc	r3, r3, #8
 8007b36:	3008      	addcc	r0, #8
 8007b38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b3c:	bf3c      	itt	cc
 8007b3e:	011b      	lslcc	r3, r3, #4
 8007b40:	3004      	addcc	r0, #4
 8007b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b46:	bf3c      	itt	cc
 8007b48:	009b      	lslcc	r3, r3, #2
 8007b4a:	3002      	addcc	r0, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	db05      	blt.n	8007b5c <__hi0bits+0x3c>
 8007b50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b54:	f100 0001 	add.w	r0, r0, #1
 8007b58:	bf08      	it	eq
 8007b5a:	2020      	moveq	r0, #32
 8007b5c:	4770      	bx	lr

08007b5e <__lo0bits>:
 8007b5e:	6803      	ldr	r3, [r0, #0]
 8007b60:	4602      	mov	r2, r0
 8007b62:	f013 0007 	ands.w	r0, r3, #7
 8007b66:	d00b      	beq.n	8007b80 <__lo0bits+0x22>
 8007b68:	07d9      	lsls	r1, r3, #31
 8007b6a:	d421      	bmi.n	8007bb0 <__lo0bits+0x52>
 8007b6c:	0798      	lsls	r0, r3, #30
 8007b6e:	bf49      	itett	mi
 8007b70:	085b      	lsrmi	r3, r3, #1
 8007b72:	089b      	lsrpl	r3, r3, #2
 8007b74:	2001      	movmi	r0, #1
 8007b76:	6013      	strmi	r3, [r2, #0]
 8007b78:	bf5c      	itt	pl
 8007b7a:	6013      	strpl	r3, [r2, #0]
 8007b7c:	2002      	movpl	r0, #2
 8007b7e:	4770      	bx	lr
 8007b80:	b299      	uxth	r1, r3
 8007b82:	b909      	cbnz	r1, 8007b88 <__lo0bits+0x2a>
 8007b84:	0c1b      	lsrs	r3, r3, #16
 8007b86:	2010      	movs	r0, #16
 8007b88:	b2d9      	uxtb	r1, r3
 8007b8a:	b909      	cbnz	r1, 8007b90 <__lo0bits+0x32>
 8007b8c:	3008      	adds	r0, #8
 8007b8e:	0a1b      	lsrs	r3, r3, #8
 8007b90:	0719      	lsls	r1, r3, #28
 8007b92:	bf04      	itt	eq
 8007b94:	091b      	lsreq	r3, r3, #4
 8007b96:	3004      	addeq	r0, #4
 8007b98:	0799      	lsls	r1, r3, #30
 8007b9a:	bf04      	itt	eq
 8007b9c:	089b      	lsreq	r3, r3, #2
 8007b9e:	3002      	addeq	r0, #2
 8007ba0:	07d9      	lsls	r1, r3, #31
 8007ba2:	d403      	bmi.n	8007bac <__lo0bits+0x4e>
 8007ba4:	085b      	lsrs	r3, r3, #1
 8007ba6:	f100 0001 	add.w	r0, r0, #1
 8007baa:	d003      	beq.n	8007bb4 <__lo0bits+0x56>
 8007bac:	6013      	str	r3, [r2, #0]
 8007bae:	4770      	bx	lr
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	4770      	bx	lr
 8007bb4:	2020      	movs	r0, #32
 8007bb6:	4770      	bx	lr

08007bb8 <__i2b>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	460c      	mov	r4, r1
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	f7ff ff07 	bl	80079d0 <_Balloc>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	b928      	cbnz	r0, 8007bd2 <__i2b+0x1a>
 8007bc6:	4b05      	ldr	r3, [pc, #20]	@ (8007bdc <__i2b+0x24>)
 8007bc8:	4805      	ldr	r0, [pc, #20]	@ (8007be0 <__i2b+0x28>)
 8007bca:	f240 1145 	movw	r1, #325	@ 0x145
 8007bce:	f000 fd13 	bl	80085f8 <__assert_func>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	6144      	str	r4, [r0, #20]
 8007bd6:	6103      	str	r3, [r0, #16]
 8007bd8:	bd10      	pop	{r4, pc}
 8007bda:	bf00      	nop
 8007bdc:	08008b20 	.word	0x08008b20
 8007be0:	08008b31 	.word	0x08008b31

08007be4 <__multiply>:
 8007be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be8:	4614      	mov	r4, r2
 8007bea:	690a      	ldr	r2, [r1, #16]
 8007bec:	6923      	ldr	r3, [r4, #16]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	bfa8      	it	ge
 8007bf2:	4623      	movge	r3, r4
 8007bf4:	460f      	mov	r7, r1
 8007bf6:	bfa4      	itt	ge
 8007bf8:	460c      	movge	r4, r1
 8007bfa:	461f      	movge	r7, r3
 8007bfc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c04:	68a3      	ldr	r3, [r4, #8]
 8007c06:	6861      	ldr	r1, [r4, #4]
 8007c08:	eb0a 0609 	add.w	r6, sl, r9
 8007c0c:	42b3      	cmp	r3, r6
 8007c0e:	b085      	sub	sp, #20
 8007c10:	bfb8      	it	lt
 8007c12:	3101      	addlt	r1, #1
 8007c14:	f7ff fedc 	bl	80079d0 <_Balloc>
 8007c18:	b930      	cbnz	r0, 8007c28 <__multiply+0x44>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	4b44      	ldr	r3, [pc, #272]	@ (8007d30 <__multiply+0x14c>)
 8007c1e:	4845      	ldr	r0, [pc, #276]	@ (8007d34 <__multiply+0x150>)
 8007c20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c24:	f000 fce8 	bl	80085f8 <__assert_func>
 8007c28:	f100 0514 	add.w	r5, r0, #20
 8007c2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c30:	462b      	mov	r3, r5
 8007c32:	2200      	movs	r2, #0
 8007c34:	4543      	cmp	r3, r8
 8007c36:	d321      	bcc.n	8007c7c <__multiply+0x98>
 8007c38:	f107 0114 	add.w	r1, r7, #20
 8007c3c:	f104 0214 	add.w	r2, r4, #20
 8007c40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c48:	9302      	str	r3, [sp, #8]
 8007c4a:	1b13      	subs	r3, r2, r4
 8007c4c:	3b15      	subs	r3, #21
 8007c4e:	f023 0303 	bic.w	r3, r3, #3
 8007c52:	3304      	adds	r3, #4
 8007c54:	f104 0715 	add.w	r7, r4, #21
 8007c58:	42ba      	cmp	r2, r7
 8007c5a:	bf38      	it	cc
 8007c5c:	2304      	movcc	r3, #4
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	9b02      	ldr	r3, [sp, #8]
 8007c62:	9103      	str	r1, [sp, #12]
 8007c64:	428b      	cmp	r3, r1
 8007c66:	d80c      	bhi.n	8007c82 <__multiply+0x9e>
 8007c68:	2e00      	cmp	r6, #0
 8007c6a:	dd03      	ble.n	8007c74 <__multiply+0x90>
 8007c6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d05b      	beq.n	8007d2c <__multiply+0x148>
 8007c74:	6106      	str	r6, [r0, #16]
 8007c76:	b005      	add	sp, #20
 8007c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7c:	f843 2b04 	str.w	r2, [r3], #4
 8007c80:	e7d8      	b.n	8007c34 <__multiply+0x50>
 8007c82:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c86:	f1ba 0f00 	cmp.w	sl, #0
 8007c8a:	d024      	beq.n	8007cd6 <__multiply+0xf2>
 8007c8c:	f104 0e14 	add.w	lr, r4, #20
 8007c90:	46a9      	mov	r9, r5
 8007c92:	f04f 0c00 	mov.w	ip, #0
 8007c96:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c9a:	f8d9 3000 	ldr.w	r3, [r9]
 8007c9e:	fa1f fb87 	uxth.w	fp, r7
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ca8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007cac:	f8d9 7000 	ldr.w	r7, [r9]
 8007cb0:	4463      	add	r3, ip
 8007cb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cb6:	fb0a c70b 	mla	r7, sl, fp, ip
 8007cba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cc4:	4572      	cmp	r2, lr
 8007cc6:	f849 3b04 	str.w	r3, [r9], #4
 8007cca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cce:	d8e2      	bhi.n	8007c96 <__multiply+0xb2>
 8007cd0:	9b01      	ldr	r3, [sp, #4]
 8007cd2:	f845 c003 	str.w	ip, [r5, r3]
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007cdc:	3104      	adds	r1, #4
 8007cde:	f1b9 0f00 	cmp.w	r9, #0
 8007ce2:	d021      	beq.n	8007d28 <__multiply+0x144>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	f104 0c14 	add.w	ip, r4, #20
 8007cea:	46ae      	mov	lr, r5
 8007cec:	f04f 0a00 	mov.w	sl, #0
 8007cf0:	f8bc b000 	ldrh.w	fp, [ip]
 8007cf4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007cf8:	fb09 770b 	mla	r7, r9, fp, r7
 8007cfc:	4457      	add	r7, sl
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d04:	f84e 3b04 	str.w	r3, [lr], #4
 8007d08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d10:	f8be 3000 	ldrh.w	r3, [lr]
 8007d14:	fb09 330a 	mla	r3, r9, sl, r3
 8007d18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d1c:	4562      	cmp	r2, ip
 8007d1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d22:	d8e5      	bhi.n	8007cf0 <__multiply+0x10c>
 8007d24:	9f01      	ldr	r7, [sp, #4]
 8007d26:	51eb      	str	r3, [r5, r7]
 8007d28:	3504      	adds	r5, #4
 8007d2a:	e799      	b.n	8007c60 <__multiply+0x7c>
 8007d2c:	3e01      	subs	r6, #1
 8007d2e:	e79b      	b.n	8007c68 <__multiply+0x84>
 8007d30:	08008b20 	.word	0x08008b20
 8007d34:	08008b31 	.word	0x08008b31

08007d38 <__pow5mult>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4615      	mov	r5, r2
 8007d3e:	f012 0203 	ands.w	r2, r2, #3
 8007d42:	4607      	mov	r7, r0
 8007d44:	460e      	mov	r6, r1
 8007d46:	d007      	beq.n	8007d58 <__pow5mult+0x20>
 8007d48:	4c25      	ldr	r4, [pc, #148]	@ (8007de0 <__pow5mult+0xa8>)
 8007d4a:	3a01      	subs	r2, #1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d52:	f7ff fe9f 	bl	8007a94 <__multadd>
 8007d56:	4606      	mov	r6, r0
 8007d58:	10ad      	asrs	r5, r5, #2
 8007d5a:	d03d      	beq.n	8007dd8 <__pow5mult+0xa0>
 8007d5c:	69fc      	ldr	r4, [r7, #28]
 8007d5e:	b97c      	cbnz	r4, 8007d80 <__pow5mult+0x48>
 8007d60:	2010      	movs	r0, #16
 8007d62:	f7ff fd7f 	bl	8007864 <malloc>
 8007d66:	4602      	mov	r2, r0
 8007d68:	61f8      	str	r0, [r7, #28]
 8007d6a:	b928      	cbnz	r0, 8007d78 <__pow5mult+0x40>
 8007d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007de4 <__pow5mult+0xac>)
 8007d6e:	481e      	ldr	r0, [pc, #120]	@ (8007de8 <__pow5mult+0xb0>)
 8007d70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d74:	f000 fc40 	bl	80085f8 <__assert_func>
 8007d78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d7c:	6004      	str	r4, [r0, #0]
 8007d7e:	60c4      	str	r4, [r0, #12]
 8007d80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d88:	b94c      	cbnz	r4, 8007d9e <__pow5mult+0x66>
 8007d8a:	f240 2171 	movw	r1, #625	@ 0x271
 8007d8e:	4638      	mov	r0, r7
 8007d90:	f7ff ff12 	bl	8007bb8 <__i2b>
 8007d94:	2300      	movs	r3, #0
 8007d96:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	6003      	str	r3, [r0, #0]
 8007d9e:	f04f 0900 	mov.w	r9, #0
 8007da2:	07eb      	lsls	r3, r5, #31
 8007da4:	d50a      	bpl.n	8007dbc <__pow5mult+0x84>
 8007da6:	4631      	mov	r1, r6
 8007da8:	4622      	mov	r2, r4
 8007daa:	4638      	mov	r0, r7
 8007dac:	f7ff ff1a 	bl	8007be4 <__multiply>
 8007db0:	4631      	mov	r1, r6
 8007db2:	4680      	mov	r8, r0
 8007db4:	4638      	mov	r0, r7
 8007db6:	f7ff fe4b 	bl	8007a50 <_Bfree>
 8007dba:	4646      	mov	r6, r8
 8007dbc:	106d      	asrs	r5, r5, #1
 8007dbe:	d00b      	beq.n	8007dd8 <__pow5mult+0xa0>
 8007dc0:	6820      	ldr	r0, [r4, #0]
 8007dc2:	b938      	cbnz	r0, 8007dd4 <__pow5mult+0x9c>
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	4638      	mov	r0, r7
 8007dca:	f7ff ff0b 	bl	8007be4 <__multiply>
 8007dce:	6020      	str	r0, [r4, #0]
 8007dd0:	f8c0 9000 	str.w	r9, [r0]
 8007dd4:	4604      	mov	r4, r0
 8007dd6:	e7e4      	b.n	8007da2 <__pow5mult+0x6a>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dde:	bf00      	nop
 8007de0:	08008b8c 	.word	0x08008b8c
 8007de4:	08008ab1 	.word	0x08008ab1
 8007de8:	08008b31 	.word	0x08008b31

08007dec <__lshift>:
 8007dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df0:	460c      	mov	r4, r1
 8007df2:	6849      	ldr	r1, [r1, #4]
 8007df4:	6923      	ldr	r3, [r4, #16]
 8007df6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dfa:	68a3      	ldr	r3, [r4, #8]
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	4691      	mov	r9, r2
 8007e00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e04:	f108 0601 	add.w	r6, r8, #1
 8007e08:	42b3      	cmp	r3, r6
 8007e0a:	db0b      	blt.n	8007e24 <__lshift+0x38>
 8007e0c:	4638      	mov	r0, r7
 8007e0e:	f7ff fddf 	bl	80079d0 <_Balloc>
 8007e12:	4605      	mov	r5, r0
 8007e14:	b948      	cbnz	r0, 8007e2a <__lshift+0x3e>
 8007e16:	4602      	mov	r2, r0
 8007e18:	4b28      	ldr	r3, [pc, #160]	@ (8007ebc <__lshift+0xd0>)
 8007e1a:	4829      	ldr	r0, [pc, #164]	@ (8007ec0 <__lshift+0xd4>)
 8007e1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e20:	f000 fbea 	bl	80085f8 <__assert_func>
 8007e24:	3101      	adds	r1, #1
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	e7ee      	b.n	8007e08 <__lshift+0x1c>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f100 0114 	add.w	r1, r0, #20
 8007e30:	f100 0210 	add.w	r2, r0, #16
 8007e34:	4618      	mov	r0, r3
 8007e36:	4553      	cmp	r3, sl
 8007e38:	db33      	blt.n	8007ea2 <__lshift+0xb6>
 8007e3a:	6920      	ldr	r0, [r4, #16]
 8007e3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e40:	f104 0314 	add.w	r3, r4, #20
 8007e44:	f019 091f 	ands.w	r9, r9, #31
 8007e48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e50:	d02b      	beq.n	8007eaa <__lshift+0xbe>
 8007e52:	f1c9 0e20 	rsb	lr, r9, #32
 8007e56:	468a      	mov	sl, r1
 8007e58:	2200      	movs	r2, #0
 8007e5a:	6818      	ldr	r0, [r3, #0]
 8007e5c:	fa00 f009 	lsl.w	r0, r0, r9
 8007e60:	4310      	orrs	r0, r2
 8007e62:	f84a 0b04 	str.w	r0, [sl], #4
 8007e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e6a:	459c      	cmp	ip, r3
 8007e6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e70:	d8f3      	bhi.n	8007e5a <__lshift+0x6e>
 8007e72:	ebac 0304 	sub.w	r3, ip, r4
 8007e76:	3b15      	subs	r3, #21
 8007e78:	f023 0303 	bic.w	r3, r3, #3
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	f104 0015 	add.w	r0, r4, #21
 8007e82:	4584      	cmp	ip, r0
 8007e84:	bf38      	it	cc
 8007e86:	2304      	movcc	r3, #4
 8007e88:	50ca      	str	r2, [r1, r3]
 8007e8a:	b10a      	cbz	r2, 8007e90 <__lshift+0xa4>
 8007e8c:	f108 0602 	add.w	r6, r8, #2
 8007e90:	3e01      	subs	r6, #1
 8007e92:	4638      	mov	r0, r7
 8007e94:	612e      	str	r6, [r5, #16]
 8007e96:	4621      	mov	r1, r4
 8007e98:	f7ff fdda 	bl	8007a50 <_Bfree>
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	e7c5      	b.n	8007e36 <__lshift+0x4a>
 8007eaa:	3904      	subs	r1, #4
 8007eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eb4:	459c      	cmp	ip, r3
 8007eb6:	d8f9      	bhi.n	8007eac <__lshift+0xc0>
 8007eb8:	e7ea      	b.n	8007e90 <__lshift+0xa4>
 8007eba:	bf00      	nop
 8007ebc:	08008b20 	.word	0x08008b20
 8007ec0:	08008b31 	.word	0x08008b31

08007ec4 <__mcmp>:
 8007ec4:	690a      	ldr	r2, [r1, #16]
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6900      	ldr	r0, [r0, #16]
 8007eca:	1a80      	subs	r0, r0, r2
 8007ecc:	b530      	push	{r4, r5, lr}
 8007ece:	d10e      	bne.n	8007eee <__mcmp+0x2a>
 8007ed0:	3314      	adds	r3, #20
 8007ed2:	3114      	adds	r1, #20
 8007ed4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ed8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007edc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ee0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ee4:	4295      	cmp	r5, r2
 8007ee6:	d003      	beq.n	8007ef0 <__mcmp+0x2c>
 8007ee8:	d205      	bcs.n	8007ef6 <__mcmp+0x32>
 8007eea:	f04f 30ff 	mov.w	r0, #4294967295
 8007eee:	bd30      	pop	{r4, r5, pc}
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	d3f3      	bcc.n	8007edc <__mcmp+0x18>
 8007ef4:	e7fb      	b.n	8007eee <__mcmp+0x2a>
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	e7f9      	b.n	8007eee <__mcmp+0x2a>
	...

08007efc <__mdiff>:
 8007efc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f00:	4689      	mov	r9, r1
 8007f02:	4606      	mov	r6, r0
 8007f04:	4611      	mov	r1, r2
 8007f06:	4648      	mov	r0, r9
 8007f08:	4614      	mov	r4, r2
 8007f0a:	f7ff ffdb 	bl	8007ec4 <__mcmp>
 8007f0e:	1e05      	subs	r5, r0, #0
 8007f10:	d112      	bne.n	8007f38 <__mdiff+0x3c>
 8007f12:	4629      	mov	r1, r5
 8007f14:	4630      	mov	r0, r6
 8007f16:	f7ff fd5b 	bl	80079d0 <_Balloc>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	b928      	cbnz	r0, 8007f2a <__mdiff+0x2e>
 8007f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800801c <__mdiff+0x120>)
 8007f20:	f240 2137 	movw	r1, #567	@ 0x237
 8007f24:	483e      	ldr	r0, [pc, #248]	@ (8008020 <__mdiff+0x124>)
 8007f26:	f000 fb67 	bl	80085f8 <__assert_func>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f30:	4610      	mov	r0, r2
 8007f32:	b003      	add	sp, #12
 8007f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f38:	bfbc      	itt	lt
 8007f3a:	464b      	movlt	r3, r9
 8007f3c:	46a1      	movlt	r9, r4
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f44:	bfba      	itte	lt
 8007f46:	461c      	movlt	r4, r3
 8007f48:	2501      	movlt	r5, #1
 8007f4a:	2500      	movge	r5, #0
 8007f4c:	f7ff fd40 	bl	80079d0 <_Balloc>
 8007f50:	4602      	mov	r2, r0
 8007f52:	b918      	cbnz	r0, 8007f5c <__mdiff+0x60>
 8007f54:	4b31      	ldr	r3, [pc, #196]	@ (800801c <__mdiff+0x120>)
 8007f56:	f240 2145 	movw	r1, #581	@ 0x245
 8007f5a:	e7e3      	b.n	8007f24 <__mdiff+0x28>
 8007f5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f60:	6926      	ldr	r6, [r4, #16]
 8007f62:	60c5      	str	r5, [r0, #12]
 8007f64:	f109 0310 	add.w	r3, r9, #16
 8007f68:	f109 0514 	add.w	r5, r9, #20
 8007f6c:	f104 0e14 	add.w	lr, r4, #20
 8007f70:	f100 0b14 	add.w	fp, r0, #20
 8007f74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	46d9      	mov	r9, fp
 8007f80:	f04f 0c00 	mov.w	ip, #0
 8007f84:	9b01      	ldr	r3, [sp, #4]
 8007f86:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	fa1f f38a 	uxth.w	r3, sl
 8007f94:	4619      	mov	r1, r3
 8007f96:	b283      	uxth	r3, r0
 8007f98:	1acb      	subs	r3, r1, r3
 8007f9a:	0c00      	lsrs	r0, r0, #16
 8007f9c:	4463      	add	r3, ip
 8007f9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007fa2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fac:	4576      	cmp	r6, lr
 8007fae:	f849 3b04 	str.w	r3, [r9], #4
 8007fb2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fb6:	d8e5      	bhi.n	8007f84 <__mdiff+0x88>
 8007fb8:	1b33      	subs	r3, r6, r4
 8007fba:	3b15      	subs	r3, #21
 8007fbc:	f023 0303 	bic.w	r3, r3, #3
 8007fc0:	3415      	adds	r4, #21
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	42a6      	cmp	r6, r4
 8007fc6:	bf38      	it	cc
 8007fc8:	2304      	movcc	r3, #4
 8007fca:	441d      	add	r5, r3
 8007fcc:	445b      	add	r3, fp
 8007fce:	461e      	mov	r6, r3
 8007fd0:	462c      	mov	r4, r5
 8007fd2:	4544      	cmp	r4, r8
 8007fd4:	d30e      	bcc.n	8007ff4 <__mdiff+0xf8>
 8007fd6:	f108 0103 	add.w	r1, r8, #3
 8007fda:	1b49      	subs	r1, r1, r5
 8007fdc:	f021 0103 	bic.w	r1, r1, #3
 8007fe0:	3d03      	subs	r5, #3
 8007fe2:	45a8      	cmp	r8, r5
 8007fe4:	bf38      	it	cc
 8007fe6:	2100      	movcc	r1, #0
 8007fe8:	440b      	add	r3, r1
 8007fea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fee:	b191      	cbz	r1, 8008016 <__mdiff+0x11a>
 8007ff0:	6117      	str	r7, [r2, #16]
 8007ff2:	e79d      	b.n	8007f30 <__mdiff+0x34>
 8007ff4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ff8:	46e6      	mov	lr, ip
 8007ffa:	0c08      	lsrs	r0, r1, #16
 8007ffc:	fa1c fc81 	uxtah	ip, ip, r1
 8008000:	4471      	add	r1, lr
 8008002:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008006:	b289      	uxth	r1, r1
 8008008:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800800c:	f846 1b04 	str.w	r1, [r6], #4
 8008010:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008014:	e7dd      	b.n	8007fd2 <__mdiff+0xd6>
 8008016:	3f01      	subs	r7, #1
 8008018:	e7e7      	b.n	8007fea <__mdiff+0xee>
 800801a:	bf00      	nop
 800801c:	08008b20 	.word	0x08008b20
 8008020:	08008b31 	.word	0x08008b31

08008024 <__d2b>:
 8008024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008028:	460f      	mov	r7, r1
 800802a:	2101      	movs	r1, #1
 800802c:	ec59 8b10 	vmov	r8, r9, d0
 8008030:	4616      	mov	r6, r2
 8008032:	f7ff fccd 	bl	80079d0 <_Balloc>
 8008036:	4604      	mov	r4, r0
 8008038:	b930      	cbnz	r0, 8008048 <__d2b+0x24>
 800803a:	4602      	mov	r2, r0
 800803c:	4b23      	ldr	r3, [pc, #140]	@ (80080cc <__d2b+0xa8>)
 800803e:	4824      	ldr	r0, [pc, #144]	@ (80080d0 <__d2b+0xac>)
 8008040:	f240 310f 	movw	r1, #783	@ 0x30f
 8008044:	f000 fad8 	bl	80085f8 <__assert_func>
 8008048:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800804c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008050:	b10d      	cbz	r5, 8008056 <__d2b+0x32>
 8008052:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008056:	9301      	str	r3, [sp, #4]
 8008058:	f1b8 0300 	subs.w	r3, r8, #0
 800805c:	d023      	beq.n	80080a6 <__d2b+0x82>
 800805e:	4668      	mov	r0, sp
 8008060:	9300      	str	r3, [sp, #0]
 8008062:	f7ff fd7c 	bl	8007b5e <__lo0bits>
 8008066:	e9dd 1200 	ldrd	r1, r2, [sp]
 800806a:	b1d0      	cbz	r0, 80080a2 <__d2b+0x7e>
 800806c:	f1c0 0320 	rsb	r3, r0, #32
 8008070:	fa02 f303 	lsl.w	r3, r2, r3
 8008074:	430b      	orrs	r3, r1
 8008076:	40c2      	lsrs	r2, r0
 8008078:	6163      	str	r3, [r4, #20]
 800807a:	9201      	str	r2, [sp, #4]
 800807c:	9b01      	ldr	r3, [sp, #4]
 800807e:	61a3      	str	r3, [r4, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	bf0c      	ite	eq
 8008084:	2201      	moveq	r2, #1
 8008086:	2202      	movne	r2, #2
 8008088:	6122      	str	r2, [r4, #16]
 800808a:	b1a5      	cbz	r5, 80080b6 <__d2b+0x92>
 800808c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008090:	4405      	add	r5, r0
 8008092:	603d      	str	r5, [r7, #0]
 8008094:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008098:	6030      	str	r0, [r6, #0]
 800809a:	4620      	mov	r0, r4
 800809c:	b003      	add	sp, #12
 800809e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080a2:	6161      	str	r1, [r4, #20]
 80080a4:	e7ea      	b.n	800807c <__d2b+0x58>
 80080a6:	a801      	add	r0, sp, #4
 80080a8:	f7ff fd59 	bl	8007b5e <__lo0bits>
 80080ac:	9b01      	ldr	r3, [sp, #4]
 80080ae:	6163      	str	r3, [r4, #20]
 80080b0:	3020      	adds	r0, #32
 80080b2:	2201      	movs	r2, #1
 80080b4:	e7e8      	b.n	8008088 <__d2b+0x64>
 80080b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080be:	6038      	str	r0, [r7, #0]
 80080c0:	6918      	ldr	r0, [r3, #16]
 80080c2:	f7ff fd2d 	bl	8007b20 <__hi0bits>
 80080c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080ca:	e7e5      	b.n	8008098 <__d2b+0x74>
 80080cc:	08008b20 	.word	0x08008b20
 80080d0:	08008b31 	.word	0x08008b31

080080d4 <__sfputc_r>:
 80080d4:	6893      	ldr	r3, [r2, #8]
 80080d6:	3b01      	subs	r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	b410      	push	{r4}
 80080dc:	6093      	str	r3, [r2, #8]
 80080de:	da08      	bge.n	80080f2 <__sfputc_r+0x1e>
 80080e0:	6994      	ldr	r4, [r2, #24]
 80080e2:	42a3      	cmp	r3, r4
 80080e4:	db01      	blt.n	80080ea <__sfputc_r+0x16>
 80080e6:	290a      	cmp	r1, #10
 80080e8:	d103      	bne.n	80080f2 <__sfputc_r+0x1e>
 80080ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ee:	f000 b9df 	b.w	80084b0 <__swbuf_r>
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	1c58      	adds	r0, r3, #1
 80080f6:	6010      	str	r0, [r2, #0]
 80080f8:	7019      	strb	r1, [r3, #0]
 80080fa:	4608      	mov	r0, r1
 80080fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008100:	4770      	bx	lr

08008102 <__sfputs_r>:
 8008102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008104:	4606      	mov	r6, r0
 8008106:	460f      	mov	r7, r1
 8008108:	4614      	mov	r4, r2
 800810a:	18d5      	adds	r5, r2, r3
 800810c:	42ac      	cmp	r4, r5
 800810e:	d101      	bne.n	8008114 <__sfputs_r+0x12>
 8008110:	2000      	movs	r0, #0
 8008112:	e007      	b.n	8008124 <__sfputs_r+0x22>
 8008114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008118:	463a      	mov	r2, r7
 800811a:	4630      	mov	r0, r6
 800811c:	f7ff ffda 	bl	80080d4 <__sfputc_r>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d1f3      	bne.n	800810c <__sfputs_r+0xa>
 8008124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008128 <_vfiprintf_r>:
 8008128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812c:	460d      	mov	r5, r1
 800812e:	b09d      	sub	sp, #116	@ 0x74
 8008130:	4614      	mov	r4, r2
 8008132:	4698      	mov	r8, r3
 8008134:	4606      	mov	r6, r0
 8008136:	b118      	cbz	r0, 8008140 <_vfiprintf_r+0x18>
 8008138:	6a03      	ldr	r3, [r0, #32]
 800813a:	b90b      	cbnz	r3, 8008140 <_vfiprintf_r+0x18>
 800813c:	f7fe fbe2 	bl	8006904 <__sinit>
 8008140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008142:	07d9      	lsls	r1, r3, #31
 8008144:	d405      	bmi.n	8008152 <_vfiprintf_r+0x2a>
 8008146:	89ab      	ldrh	r3, [r5, #12]
 8008148:	059a      	lsls	r2, r3, #22
 800814a:	d402      	bmi.n	8008152 <_vfiprintf_r+0x2a>
 800814c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800814e:	f7fe fce2 	bl	8006b16 <__retarget_lock_acquire_recursive>
 8008152:	89ab      	ldrh	r3, [r5, #12]
 8008154:	071b      	lsls	r3, r3, #28
 8008156:	d501      	bpl.n	800815c <_vfiprintf_r+0x34>
 8008158:	692b      	ldr	r3, [r5, #16]
 800815a:	b99b      	cbnz	r3, 8008184 <_vfiprintf_r+0x5c>
 800815c:	4629      	mov	r1, r5
 800815e:	4630      	mov	r0, r6
 8008160:	f000 f9e4 	bl	800852c <__swsetup_r>
 8008164:	b170      	cbz	r0, 8008184 <_vfiprintf_r+0x5c>
 8008166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008168:	07dc      	lsls	r4, r3, #31
 800816a:	d504      	bpl.n	8008176 <_vfiprintf_r+0x4e>
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	b01d      	add	sp, #116	@ 0x74
 8008172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008176:	89ab      	ldrh	r3, [r5, #12]
 8008178:	0598      	lsls	r0, r3, #22
 800817a:	d4f7      	bmi.n	800816c <_vfiprintf_r+0x44>
 800817c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800817e:	f7fe fccb 	bl	8006b18 <__retarget_lock_release_recursive>
 8008182:	e7f3      	b.n	800816c <_vfiprintf_r+0x44>
 8008184:	2300      	movs	r3, #0
 8008186:	9309      	str	r3, [sp, #36]	@ 0x24
 8008188:	2320      	movs	r3, #32
 800818a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800818e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008192:	2330      	movs	r3, #48	@ 0x30
 8008194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008344 <_vfiprintf_r+0x21c>
 8008198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800819c:	f04f 0901 	mov.w	r9, #1
 80081a0:	4623      	mov	r3, r4
 80081a2:	469a      	mov	sl, r3
 80081a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a8:	b10a      	cbz	r2, 80081ae <_vfiprintf_r+0x86>
 80081aa:	2a25      	cmp	r2, #37	@ 0x25
 80081ac:	d1f9      	bne.n	80081a2 <_vfiprintf_r+0x7a>
 80081ae:	ebba 0b04 	subs.w	fp, sl, r4
 80081b2:	d00b      	beq.n	80081cc <_vfiprintf_r+0xa4>
 80081b4:	465b      	mov	r3, fp
 80081b6:	4622      	mov	r2, r4
 80081b8:	4629      	mov	r1, r5
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7ff ffa1 	bl	8008102 <__sfputs_r>
 80081c0:	3001      	adds	r0, #1
 80081c2:	f000 80a7 	beq.w	8008314 <_vfiprintf_r+0x1ec>
 80081c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081c8:	445a      	add	r2, fp
 80081ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80081cc:	f89a 3000 	ldrb.w	r3, [sl]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 809f 	beq.w	8008314 <_vfiprintf_r+0x1ec>
 80081d6:	2300      	movs	r3, #0
 80081d8:	f04f 32ff 	mov.w	r2, #4294967295
 80081dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e0:	f10a 0a01 	add.w	sl, sl, #1
 80081e4:	9304      	str	r3, [sp, #16]
 80081e6:	9307      	str	r3, [sp, #28]
 80081e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80081ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80081ee:	4654      	mov	r4, sl
 80081f0:	2205      	movs	r2, #5
 80081f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f6:	4853      	ldr	r0, [pc, #332]	@ (8008344 <_vfiprintf_r+0x21c>)
 80081f8:	f7f8 f812 	bl	8000220 <memchr>
 80081fc:	9a04      	ldr	r2, [sp, #16]
 80081fe:	b9d8      	cbnz	r0, 8008238 <_vfiprintf_r+0x110>
 8008200:	06d1      	lsls	r1, r2, #27
 8008202:	bf44      	itt	mi
 8008204:	2320      	movmi	r3, #32
 8008206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800820a:	0713      	lsls	r3, r2, #28
 800820c:	bf44      	itt	mi
 800820e:	232b      	movmi	r3, #43	@ 0x2b
 8008210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008214:	f89a 3000 	ldrb.w	r3, [sl]
 8008218:	2b2a      	cmp	r3, #42	@ 0x2a
 800821a:	d015      	beq.n	8008248 <_vfiprintf_r+0x120>
 800821c:	9a07      	ldr	r2, [sp, #28]
 800821e:	4654      	mov	r4, sl
 8008220:	2000      	movs	r0, #0
 8008222:	f04f 0c0a 	mov.w	ip, #10
 8008226:	4621      	mov	r1, r4
 8008228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800822c:	3b30      	subs	r3, #48	@ 0x30
 800822e:	2b09      	cmp	r3, #9
 8008230:	d94b      	bls.n	80082ca <_vfiprintf_r+0x1a2>
 8008232:	b1b0      	cbz	r0, 8008262 <_vfiprintf_r+0x13a>
 8008234:	9207      	str	r2, [sp, #28]
 8008236:	e014      	b.n	8008262 <_vfiprintf_r+0x13a>
 8008238:	eba0 0308 	sub.w	r3, r0, r8
 800823c:	fa09 f303 	lsl.w	r3, r9, r3
 8008240:	4313      	orrs	r3, r2
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	46a2      	mov	sl, r4
 8008246:	e7d2      	b.n	80081ee <_vfiprintf_r+0xc6>
 8008248:	9b03      	ldr	r3, [sp, #12]
 800824a:	1d19      	adds	r1, r3, #4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	9103      	str	r1, [sp, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	bfbb      	ittet	lt
 8008254:	425b      	neglt	r3, r3
 8008256:	f042 0202 	orrlt.w	r2, r2, #2
 800825a:	9307      	strge	r3, [sp, #28]
 800825c:	9307      	strlt	r3, [sp, #28]
 800825e:	bfb8      	it	lt
 8008260:	9204      	strlt	r2, [sp, #16]
 8008262:	7823      	ldrb	r3, [r4, #0]
 8008264:	2b2e      	cmp	r3, #46	@ 0x2e
 8008266:	d10a      	bne.n	800827e <_vfiprintf_r+0x156>
 8008268:	7863      	ldrb	r3, [r4, #1]
 800826a:	2b2a      	cmp	r3, #42	@ 0x2a
 800826c:	d132      	bne.n	80082d4 <_vfiprintf_r+0x1ac>
 800826e:	9b03      	ldr	r3, [sp, #12]
 8008270:	1d1a      	adds	r2, r3, #4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	9203      	str	r2, [sp, #12]
 8008276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800827a:	3402      	adds	r4, #2
 800827c:	9305      	str	r3, [sp, #20]
 800827e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008354 <_vfiprintf_r+0x22c>
 8008282:	7821      	ldrb	r1, [r4, #0]
 8008284:	2203      	movs	r2, #3
 8008286:	4650      	mov	r0, sl
 8008288:	f7f7 ffca 	bl	8000220 <memchr>
 800828c:	b138      	cbz	r0, 800829e <_vfiprintf_r+0x176>
 800828e:	9b04      	ldr	r3, [sp, #16]
 8008290:	eba0 000a 	sub.w	r0, r0, sl
 8008294:	2240      	movs	r2, #64	@ 0x40
 8008296:	4082      	lsls	r2, r0
 8008298:	4313      	orrs	r3, r2
 800829a:	3401      	adds	r4, #1
 800829c:	9304      	str	r3, [sp, #16]
 800829e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082a2:	4829      	ldr	r0, [pc, #164]	@ (8008348 <_vfiprintf_r+0x220>)
 80082a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082a8:	2206      	movs	r2, #6
 80082aa:	f7f7 ffb9 	bl	8000220 <memchr>
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d03f      	beq.n	8008332 <_vfiprintf_r+0x20a>
 80082b2:	4b26      	ldr	r3, [pc, #152]	@ (800834c <_vfiprintf_r+0x224>)
 80082b4:	bb1b      	cbnz	r3, 80082fe <_vfiprintf_r+0x1d6>
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	3307      	adds	r3, #7
 80082ba:	f023 0307 	bic.w	r3, r3, #7
 80082be:	3308      	adds	r3, #8
 80082c0:	9303      	str	r3, [sp, #12]
 80082c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c4:	443b      	add	r3, r7
 80082c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c8:	e76a      	b.n	80081a0 <_vfiprintf_r+0x78>
 80082ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ce:	460c      	mov	r4, r1
 80082d0:	2001      	movs	r0, #1
 80082d2:	e7a8      	b.n	8008226 <_vfiprintf_r+0xfe>
 80082d4:	2300      	movs	r3, #0
 80082d6:	3401      	adds	r4, #1
 80082d8:	9305      	str	r3, [sp, #20]
 80082da:	4619      	mov	r1, r3
 80082dc:	f04f 0c0a 	mov.w	ip, #10
 80082e0:	4620      	mov	r0, r4
 80082e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082e6:	3a30      	subs	r2, #48	@ 0x30
 80082e8:	2a09      	cmp	r2, #9
 80082ea:	d903      	bls.n	80082f4 <_vfiprintf_r+0x1cc>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0c6      	beq.n	800827e <_vfiprintf_r+0x156>
 80082f0:	9105      	str	r1, [sp, #20]
 80082f2:	e7c4      	b.n	800827e <_vfiprintf_r+0x156>
 80082f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80082f8:	4604      	mov	r4, r0
 80082fa:	2301      	movs	r3, #1
 80082fc:	e7f0      	b.n	80082e0 <_vfiprintf_r+0x1b8>
 80082fe:	ab03      	add	r3, sp, #12
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	462a      	mov	r2, r5
 8008304:	4b12      	ldr	r3, [pc, #72]	@ (8008350 <_vfiprintf_r+0x228>)
 8008306:	a904      	add	r1, sp, #16
 8008308:	4630      	mov	r0, r6
 800830a:	f7fd feb7 	bl	800607c <_printf_float>
 800830e:	4607      	mov	r7, r0
 8008310:	1c78      	adds	r0, r7, #1
 8008312:	d1d6      	bne.n	80082c2 <_vfiprintf_r+0x19a>
 8008314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008316:	07d9      	lsls	r1, r3, #31
 8008318:	d405      	bmi.n	8008326 <_vfiprintf_r+0x1fe>
 800831a:	89ab      	ldrh	r3, [r5, #12]
 800831c:	059a      	lsls	r2, r3, #22
 800831e:	d402      	bmi.n	8008326 <_vfiprintf_r+0x1fe>
 8008320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008322:	f7fe fbf9 	bl	8006b18 <__retarget_lock_release_recursive>
 8008326:	89ab      	ldrh	r3, [r5, #12]
 8008328:	065b      	lsls	r3, r3, #25
 800832a:	f53f af1f 	bmi.w	800816c <_vfiprintf_r+0x44>
 800832e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008330:	e71e      	b.n	8008170 <_vfiprintf_r+0x48>
 8008332:	ab03      	add	r3, sp, #12
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	462a      	mov	r2, r5
 8008338:	4b05      	ldr	r3, [pc, #20]	@ (8008350 <_vfiprintf_r+0x228>)
 800833a:	a904      	add	r1, sp, #16
 800833c:	4630      	mov	r0, r6
 800833e:	f7fe f935 	bl	80065ac <_printf_i>
 8008342:	e7e4      	b.n	800830e <_vfiprintf_r+0x1e6>
 8008344:	08008c88 	.word	0x08008c88
 8008348:	08008c92 	.word	0x08008c92
 800834c:	0800607d 	.word	0x0800607d
 8008350:	08008103 	.word	0x08008103
 8008354:	08008c8e 	.word	0x08008c8e

08008358 <__sflush_r>:
 8008358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008360:	0716      	lsls	r6, r2, #28
 8008362:	4605      	mov	r5, r0
 8008364:	460c      	mov	r4, r1
 8008366:	d454      	bmi.n	8008412 <__sflush_r+0xba>
 8008368:	684b      	ldr	r3, [r1, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	dc02      	bgt.n	8008374 <__sflush_r+0x1c>
 800836e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	dd48      	ble.n	8008406 <__sflush_r+0xae>
 8008374:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008376:	2e00      	cmp	r6, #0
 8008378:	d045      	beq.n	8008406 <__sflush_r+0xae>
 800837a:	2300      	movs	r3, #0
 800837c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008380:	682f      	ldr	r7, [r5, #0]
 8008382:	6a21      	ldr	r1, [r4, #32]
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	d030      	beq.n	80083ea <__sflush_r+0x92>
 8008388:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	0759      	lsls	r1, r3, #29
 800838e:	d505      	bpl.n	800839c <__sflush_r+0x44>
 8008390:	6863      	ldr	r3, [r4, #4]
 8008392:	1ad2      	subs	r2, r2, r3
 8008394:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008396:	b10b      	cbz	r3, 800839c <__sflush_r+0x44>
 8008398:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800839a:	1ad2      	subs	r2, r2, r3
 800839c:	2300      	movs	r3, #0
 800839e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083a0:	6a21      	ldr	r1, [r4, #32]
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b0      	blx	r6
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	d106      	bne.n	80083ba <__sflush_r+0x62>
 80083ac:	6829      	ldr	r1, [r5, #0]
 80083ae:	291d      	cmp	r1, #29
 80083b0:	d82b      	bhi.n	800840a <__sflush_r+0xb2>
 80083b2:	4a2a      	ldr	r2, [pc, #168]	@ (800845c <__sflush_r+0x104>)
 80083b4:	410a      	asrs	r2, r1
 80083b6:	07d6      	lsls	r6, r2, #31
 80083b8:	d427      	bmi.n	800840a <__sflush_r+0xb2>
 80083ba:	2200      	movs	r2, #0
 80083bc:	6062      	str	r2, [r4, #4]
 80083be:	04d9      	lsls	r1, r3, #19
 80083c0:	6922      	ldr	r2, [r4, #16]
 80083c2:	6022      	str	r2, [r4, #0]
 80083c4:	d504      	bpl.n	80083d0 <__sflush_r+0x78>
 80083c6:	1c42      	adds	r2, r0, #1
 80083c8:	d101      	bne.n	80083ce <__sflush_r+0x76>
 80083ca:	682b      	ldr	r3, [r5, #0]
 80083cc:	b903      	cbnz	r3, 80083d0 <__sflush_r+0x78>
 80083ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80083d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083d2:	602f      	str	r7, [r5, #0]
 80083d4:	b1b9      	cbz	r1, 8008406 <__sflush_r+0xae>
 80083d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083da:	4299      	cmp	r1, r3
 80083dc:	d002      	beq.n	80083e4 <__sflush_r+0x8c>
 80083de:	4628      	mov	r0, r5
 80083e0:	f7ff f9f6 	bl	80077d0 <_free_r>
 80083e4:	2300      	movs	r3, #0
 80083e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80083e8:	e00d      	b.n	8008406 <__sflush_r+0xae>
 80083ea:	2301      	movs	r3, #1
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b0      	blx	r6
 80083f0:	4602      	mov	r2, r0
 80083f2:	1c50      	adds	r0, r2, #1
 80083f4:	d1c9      	bne.n	800838a <__sflush_r+0x32>
 80083f6:	682b      	ldr	r3, [r5, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0c6      	beq.n	800838a <__sflush_r+0x32>
 80083fc:	2b1d      	cmp	r3, #29
 80083fe:	d001      	beq.n	8008404 <__sflush_r+0xac>
 8008400:	2b16      	cmp	r3, #22
 8008402:	d11e      	bne.n	8008442 <__sflush_r+0xea>
 8008404:	602f      	str	r7, [r5, #0]
 8008406:	2000      	movs	r0, #0
 8008408:	e022      	b.n	8008450 <__sflush_r+0xf8>
 800840a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840e:	b21b      	sxth	r3, r3
 8008410:	e01b      	b.n	800844a <__sflush_r+0xf2>
 8008412:	690f      	ldr	r7, [r1, #16]
 8008414:	2f00      	cmp	r7, #0
 8008416:	d0f6      	beq.n	8008406 <__sflush_r+0xae>
 8008418:	0793      	lsls	r3, r2, #30
 800841a:	680e      	ldr	r6, [r1, #0]
 800841c:	bf08      	it	eq
 800841e:	694b      	ldreq	r3, [r1, #20]
 8008420:	600f      	str	r7, [r1, #0]
 8008422:	bf18      	it	ne
 8008424:	2300      	movne	r3, #0
 8008426:	eba6 0807 	sub.w	r8, r6, r7
 800842a:	608b      	str	r3, [r1, #8]
 800842c:	f1b8 0f00 	cmp.w	r8, #0
 8008430:	dde9      	ble.n	8008406 <__sflush_r+0xae>
 8008432:	6a21      	ldr	r1, [r4, #32]
 8008434:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008436:	4643      	mov	r3, r8
 8008438:	463a      	mov	r2, r7
 800843a:	4628      	mov	r0, r5
 800843c:	47b0      	blx	r6
 800843e:	2800      	cmp	r0, #0
 8008440:	dc08      	bgt.n	8008454 <__sflush_r+0xfc>
 8008442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800844a:	81a3      	strh	r3, [r4, #12]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008454:	4407      	add	r7, r0
 8008456:	eba8 0800 	sub.w	r8, r8, r0
 800845a:	e7e7      	b.n	800842c <__sflush_r+0xd4>
 800845c:	dfbffffe 	.word	0xdfbffffe

08008460 <_fflush_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	690b      	ldr	r3, [r1, #16]
 8008464:	4605      	mov	r5, r0
 8008466:	460c      	mov	r4, r1
 8008468:	b913      	cbnz	r3, 8008470 <_fflush_r+0x10>
 800846a:	2500      	movs	r5, #0
 800846c:	4628      	mov	r0, r5
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	b118      	cbz	r0, 800847a <_fflush_r+0x1a>
 8008472:	6a03      	ldr	r3, [r0, #32]
 8008474:	b90b      	cbnz	r3, 800847a <_fflush_r+0x1a>
 8008476:	f7fe fa45 	bl	8006904 <__sinit>
 800847a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f3      	beq.n	800846a <_fflush_r+0xa>
 8008482:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008484:	07d0      	lsls	r0, r2, #31
 8008486:	d404      	bmi.n	8008492 <_fflush_r+0x32>
 8008488:	0599      	lsls	r1, r3, #22
 800848a:	d402      	bmi.n	8008492 <_fflush_r+0x32>
 800848c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800848e:	f7fe fb42 	bl	8006b16 <__retarget_lock_acquire_recursive>
 8008492:	4628      	mov	r0, r5
 8008494:	4621      	mov	r1, r4
 8008496:	f7ff ff5f 	bl	8008358 <__sflush_r>
 800849a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800849c:	07da      	lsls	r2, r3, #31
 800849e:	4605      	mov	r5, r0
 80084a0:	d4e4      	bmi.n	800846c <_fflush_r+0xc>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	059b      	lsls	r3, r3, #22
 80084a6:	d4e1      	bmi.n	800846c <_fflush_r+0xc>
 80084a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084aa:	f7fe fb35 	bl	8006b18 <__retarget_lock_release_recursive>
 80084ae:	e7dd      	b.n	800846c <_fflush_r+0xc>

080084b0 <__swbuf_r>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	460e      	mov	r6, r1
 80084b4:	4614      	mov	r4, r2
 80084b6:	4605      	mov	r5, r0
 80084b8:	b118      	cbz	r0, 80084c2 <__swbuf_r+0x12>
 80084ba:	6a03      	ldr	r3, [r0, #32]
 80084bc:	b90b      	cbnz	r3, 80084c2 <__swbuf_r+0x12>
 80084be:	f7fe fa21 	bl	8006904 <__sinit>
 80084c2:	69a3      	ldr	r3, [r4, #24]
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	071a      	lsls	r2, r3, #28
 80084ca:	d501      	bpl.n	80084d0 <__swbuf_r+0x20>
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	b943      	cbnz	r3, 80084e2 <__swbuf_r+0x32>
 80084d0:	4621      	mov	r1, r4
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 f82a 	bl	800852c <__swsetup_r>
 80084d8:	b118      	cbz	r0, 80084e2 <__swbuf_r+0x32>
 80084da:	f04f 37ff 	mov.w	r7, #4294967295
 80084de:	4638      	mov	r0, r7
 80084e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	6922      	ldr	r2, [r4, #16]
 80084e6:	1a98      	subs	r0, r3, r2
 80084e8:	6963      	ldr	r3, [r4, #20]
 80084ea:	b2f6      	uxtb	r6, r6
 80084ec:	4283      	cmp	r3, r0
 80084ee:	4637      	mov	r7, r6
 80084f0:	dc05      	bgt.n	80084fe <__swbuf_r+0x4e>
 80084f2:	4621      	mov	r1, r4
 80084f4:	4628      	mov	r0, r5
 80084f6:	f7ff ffb3 	bl	8008460 <_fflush_r>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d1ed      	bne.n	80084da <__swbuf_r+0x2a>
 80084fe:	68a3      	ldr	r3, [r4, #8]
 8008500:	3b01      	subs	r3, #1
 8008502:	60a3      	str	r3, [r4, #8]
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	6022      	str	r2, [r4, #0]
 800850a:	701e      	strb	r6, [r3, #0]
 800850c:	6962      	ldr	r2, [r4, #20]
 800850e:	1c43      	adds	r3, r0, #1
 8008510:	429a      	cmp	r2, r3
 8008512:	d004      	beq.n	800851e <__swbuf_r+0x6e>
 8008514:	89a3      	ldrh	r3, [r4, #12]
 8008516:	07db      	lsls	r3, r3, #31
 8008518:	d5e1      	bpl.n	80084de <__swbuf_r+0x2e>
 800851a:	2e0a      	cmp	r6, #10
 800851c:	d1df      	bne.n	80084de <__swbuf_r+0x2e>
 800851e:	4621      	mov	r1, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f7ff ff9d 	bl	8008460 <_fflush_r>
 8008526:	2800      	cmp	r0, #0
 8008528:	d0d9      	beq.n	80084de <__swbuf_r+0x2e>
 800852a:	e7d6      	b.n	80084da <__swbuf_r+0x2a>

0800852c <__swsetup_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4b29      	ldr	r3, [pc, #164]	@ (80085d4 <__swsetup_r+0xa8>)
 8008530:	4605      	mov	r5, r0
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	460c      	mov	r4, r1
 8008536:	b118      	cbz	r0, 8008540 <__swsetup_r+0x14>
 8008538:	6a03      	ldr	r3, [r0, #32]
 800853a:	b90b      	cbnz	r3, 8008540 <__swsetup_r+0x14>
 800853c:	f7fe f9e2 	bl	8006904 <__sinit>
 8008540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008544:	0719      	lsls	r1, r3, #28
 8008546:	d422      	bmi.n	800858e <__swsetup_r+0x62>
 8008548:	06da      	lsls	r2, r3, #27
 800854a:	d407      	bmi.n	800855c <__swsetup_r+0x30>
 800854c:	2209      	movs	r2, #9
 800854e:	602a      	str	r2, [r5, #0]
 8008550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008554:	81a3      	strh	r3, [r4, #12]
 8008556:	f04f 30ff 	mov.w	r0, #4294967295
 800855a:	e033      	b.n	80085c4 <__swsetup_r+0x98>
 800855c:	0758      	lsls	r0, r3, #29
 800855e:	d512      	bpl.n	8008586 <__swsetup_r+0x5a>
 8008560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008562:	b141      	cbz	r1, 8008576 <__swsetup_r+0x4a>
 8008564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008568:	4299      	cmp	r1, r3
 800856a:	d002      	beq.n	8008572 <__swsetup_r+0x46>
 800856c:	4628      	mov	r0, r5
 800856e:	f7ff f92f 	bl	80077d0 <_free_r>
 8008572:	2300      	movs	r3, #0
 8008574:	6363      	str	r3, [r4, #52]	@ 0x34
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800857c:	81a3      	strh	r3, [r4, #12]
 800857e:	2300      	movs	r3, #0
 8008580:	6063      	str	r3, [r4, #4]
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	f043 0308 	orr.w	r3, r3, #8
 800858c:	81a3      	strh	r3, [r4, #12]
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	b94b      	cbnz	r3, 80085a6 <__swsetup_r+0x7a>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859c:	d003      	beq.n	80085a6 <__swsetup_r+0x7a>
 800859e:	4621      	mov	r1, r4
 80085a0:	4628      	mov	r0, r5
 80085a2:	f000 f8b3 	bl	800870c <__smakebuf_r>
 80085a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085aa:	f013 0201 	ands.w	r2, r3, #1
 80085ae:	d00a      	beq.n	80085c6 <__swsetup_r+0x9a>
 80085b0:	2200      	movs	r2, #0
 80085b2:	60a2      	str	r2, [r4, #8]
 80085b4:	6962      	ldr	r2, [r4, #20]
 80085b6:	4252      	negs	r2, r2
 80085b8:	61a2      	str	r2, [r4, #24]
 80085ba:	6922      	ldr	r2, [r4, #16]
 80085bc:	b942      	cbnz	r2, 80085d0 <__swsetup_r+0xa4>
 80085be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085c2:	d1c5      	bne.n	8008550 <__swsetup_r+0x24>
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	0799      	lsls	r1, r3, #30
 80085c8:	bf58      	it	pl
 80085ca:	6962      	ldrpl	r2, [r4, #20]
 80085cc:	60a2      	str	r2, [r4, #8]
 80085ce:	e7f4      	b.n	80085ba <__swsetup_r+0x8e>
 80085d0:	2000      	movs	r0, #0
 80085d2:	e7f7      	b.n	80085c4 <__swsetup_r+0x98>
 80085d4:	2000002c 	.word	0x2000002c

080085d8 <_sbrk_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d06      	ldr	r5, [pc, #24]	@ (80085f4 <_sbrk_r+0x1c>)
 80085dc:	2300      	movs	r3, #0
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	602b      	str	r3, [r5, #0]
 80085e4:	f7f9 f942 	bl	800186c <_sbrk>
 80085e8:	1c43      	adds	r3, r0, #1
 80085ea:	d102      	bne.n	80085f2 <_sbrk_r+0x1a>
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	b103      	cbz	r3, 80085f2 <_sbrk_r+0x1a>
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
 80085f4:	200004b0 	.word	0x200004b0

080085f8 <__assert_func>:
 80085f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085fa:	4614      	mov	r4, r2
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b09      	ldr	r3, [pc, #36]	@ (8008624 <__assert_func+0x2c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4605      	mov	r5, r0
 8008604:	68d8      	ldr	r0, [r3, #12]
 8008606:	b954      	cbnz	r4, 800861e <__assert_func+0x26>
 8008608:	4b07      	ldr	r3, [pc, #28]	@ (8008628 <__assert_func+0x30>)
 800860a:	461c      	mov	r4, r3
 800860c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008610:	9100      	str	r1, [sp, #0]
 8008612:	462b      	mov	r3, r5
 8008614:	4905      	ldr	r1, [pc, #20]	@ (800862c <__assert_func+0x34>)
 8008616:	f000 f841 	bl	800869c <fiprintf>
 800861a:	f000 f8d5 	bl	80087c8 <abort>
 800861e:	4b04      	ldr	r3, [pc, #16]	@ (8008630 <__assert_func+0x38>)
 8008620:	e7f4      	b.n	800860c <__assert_func+0x14>
 8008622:	bf00      	nop
 8008624:	2000002c 	.word	0x2000002c
 8008628:	08008cde 	.word	0x08008cde
 800862c:	08008cb0 	.word	0x08008cb0
 8008630:	08008ca3 	.word	0x08008ca3

08008634 <_calloc_r>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	fba1 5402 	umull	r5, r4, r1, r2
 800863a:	b93c      	cbnz	r4, 800864c <_calloc_r+0x18>
 800863c:	4629      	mov	r1, r5
 800863e:	f7ff f93b 	bl	80078b8 <_malloc_r>
 8008642:	4606      	mov	r6, r0
 8008644:	b928      	cbnz	r0, 8008652 <_calloc_r+0x1e>
 8008646:	2600      	movs	r6, #0
 8008648:	4630      	mov	r0, r6
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	220c      	movs	r2, #12
 800864e:	6002      	str	r2, [r0, #0]
 8008650:	e7f9      	b.n	8008646 <_calloc_r+0x12>
 8008652:	462a      	mov	r2, r5
 8008654:	4621      	mov	r1, r4
 8008656:	f7fe f9e0 	bl	8006a1a <memset>
 800865a:	e7f5      	b.n	8008648 <_calloc_r+0x14>

0800865c <__ascii_mbtowc>:
 800865c:	b082      	sub	sp, #8
 800865e:	b901      	cbnz	r1, 8008662 <__ascii_mbtowc+0x6>
 8008660:	a901      	add	r1, sp, #4
 8008662:	b142      	cbz	r2, 8008676 <__ascii_mbtowc+0x1a>
 8008664:	b14b      	cbz	r3, 800867a <__ascii_mbtowc+0x1e>
 8008666:	7813      	ldrb	r3, [r2, #0]
 8008668:	600b      	str	r3, [r1, #0]
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	1e10      	subs	r0, r2, #0
 800866e:	bf18      	it	ne
 8008670:	2001      	movne	r0, #1
 8008672:	b002      	add	sp, #8
 8008674:	4770      	bx	lr
 8008676:	4610      	mov	r0, r2
 8008678:	e7fb      	b.n	8008672 <__ascii_mbtowc+0x16>
 800867a:	f06f 0001 	mvn.w	r0, #1
 800867e:	e7f8      	b.n	8008672 <__ascii_mbtowc+0x16>

08008680 <__ascii_wctomb>:
 8008680:	4603      	mov	r3, r0
 8008682:	4608      	mov	r0, r1
 8008684:	b141      	cbz	r1, 8008698 <__ascii_wctomb+0x18>
 8008686:	2aff      	cmp	r2, #255	@ 0xff
 8008688:	d904      	bls.n	8008694 <__ascii_wctomb+0x14>
 800868a:	228a      	movs	r2, #138	@ 0x8a
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	f04f 30ff 	mov.w	r0, #4294967295
 8008692:	4770      	bx	lr
 8008694:	700a      	strb	r2, [r1, #0]
 8008696:	2001      	movs	r0, #1
 8008698:	4770      	bx	lr
	...

0800869c <fiprintf>:
 800869c:	b40e      	push	{r1, r2, r3}
 800869e:	b503      	push	{r0, r1, lr}
 80086a0:	4601      	mov	r1, r0
 80086a2:	ab03      	add	r3, sp, #12
 80086a4:	4805      	ldr	r0, [pc, #20]	@ (80086bc <fiprintf+0x20>)
 80086a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086aa:	6800      	ldr	r0, [r0, #0]
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	f7ff fd3b 	bl	8008128 <_vfiprintf_r>
 80086b2:	b002      	add	sp, #8
 80086b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086b8:	b003      	add	sp, #12
 80086ba:	4770      	bx	lr
 80086bc:	2000002c 	.word	0x2000002c

080086c0 <__swhatbuf_r>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	460c      	mov	r4, r1
 80086c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c8:	2900      	cmp	r1, #0
 80086ca:	b096      	sub	sp, #88	@ 0x58
 80086cc:	4615      	mov	r5, r2
 80086ce:	461e      	mov	r6, r3
 80086d0:	da0d      	bge.n	80086ee <__swhatbuf_r+0x2e>
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086d8:	f04f 0100 	mov.w	r1, #0
 80086dc:	bf14      	ite	ne
 80086de:	2340      	movne	r3, #64	@ 0x40
 80086e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086e4:	2000      	movs	r0, #0
 80086e6:	6031      	str	r1, [r6, #0]
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	b016      	add	sp, #88	@ 0x58
 80086ec:	bd70      	pop	{r4, r5, r6, pc}
 80086ee:	466a      	mov	r2, sp
 80086f0:	f000 f848 	bl	8008784 <_fstat_r>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	dbec      	blt.n	80086d2 <__swhatbuf_r+0x12>
 80086f8:	9901      	ldr	r1, [sp, #4]
 80086fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80086fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008702:	4259      	negs	r1, r3
 8008704:	4159      	adcs	r1, r3
 8008706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800870a:	e7eb      	b.n	80086e4 <__swhatbuf_r+0x24>

0800870c <__smakebuf_r>:
 800870c:	898b      	ldrh	r3, [r1, #12]
 800870e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008710:	079d      	lsls	r5, r3, #30
 8008712:	4606      	mov	r6, r0
 8008714:	460c      	mov	r4, r1
 8008716:	d507      	bpl.n	8008728 <__smakebuf_r+0x1c>
 8008718:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	2301      	movs	r3, #1
 8008722:	6163      	str	r3, [r4, #20]
 8008724:	b003      	add	sp, #12
 8008726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008728:	ab01      	add	r3, sp, #4
 800872a:	466a      	mov	r2, sp
 800872c:	f7ff ffc8 	bl	80086c0 <__swhatbuf_r>
 8008730:	9f00      	ldr	r7, [sp, #0]
 8008732:	4605      	mov	r5, r0
 8008734:	4639      	mov	r1, r7
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff f8be 	bl	80078b8 <_malloc_r>
 800873c:	b948      	cbnz	r0, 8008752 <__smakebuf_r+0x46>
 800873e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008742:	059a      	lsls	r2, r3, #22
 8008744:	d4ee      	bmi.n	8008724 <__smakebuf_r+0x18>
 8008746:	f023 0303 	bic.w	r3, r3, #3
 800874a:	f043 0302 	orr.w	r3, r3, #2
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	e7e2      	b.n	8008718 <__smakebuf_r+0xc>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	6020      	str	r0, [r4, #0]
 8008756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008762:	b15b      	cbz	r3, 800877c <__smakebuf_r+0x70>
 8008764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008768:	4630      	mov	r0, r6
 800876a:	f000 f81d 	bl	80087a8 <_isatty_r>
 800876e:	b128      	cbz	r0, 800877c <__smakebuf_r+0x70>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	f023 0303 	bic.w	r3, r3, #3
 8008776:	f043 0301 	orr.w	r3, r3, #1
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	431d      	orrs	r5, r3
 8008780:	81a5      	strh	r5, [r4, #12]
 8008782:	e7cf      	b.n	8008724 <__smakebuf_r+0x18>

08008784 <_fstat_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d07      	ldr	r5, [pc, #28]	@ (80087a4 <_fstat_r+0x20>)
 8008788:	2300      	movs	r3, #0
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	4611      	mov	r1, r2
 8008790:	602b      	str	r3, [r5, #0]
 8008792:	f7f9 f843 	bl	800181c <_fstat>
 8008796:	1c43      	adds	r3, r0, #1
 8008798:	d102      	bne.n	80087a0 <_fstat_r+0x1c>
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	b103      	cbz	r3, 80087a0 <_fstat_r+0x1c>
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	bd38      	pop	{r3, r4, r5, pc}
 80087a2:	bf00      	nop
 80087a4:	200004b0 	.word	0x200004b0

080087a8 <_isatty_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d06      	ldr	r5, [pc, #24]	@ (80087c4 <_isatty_r+0x1c>)
 80087ac:	2300      	movs	r3, #0
 80087ae:	4604      	mov	r4, r0
 80087b0:	4608      	mov	r0, r1
 80087b2:	602b      	str	r3, [r5, #0]
 80087b4:	f7f9 f842 	bl	800183c <_isatty>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_isatty_r+0x1a>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_isatty_r+0x1a>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	200004b0 	.word	0x200004b0

080087c8 <abort>:
 80087c8:	b508      	push	{r3, lr}
 80087ca:	2006      	movs	r0, #6
 80087cc:	f000 f82c 	bl	8008828 <raise>
 80087d0:	2001      	movs	r0, #1
 80087d2:	f7f8 ffd3 	bl	800177c <_exit>

080087d6 <_raise_r>:
 80087d6:	291f      	cmp	r1, #31
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4605      	mov	r5, r0
 80087dc:	460c      	mov	r4, r1
 80087de:	d904      	bls.n	80087ea <_raise_r+0x14>
 80087e0:	2316      	movs	r3, #22
 80087e2:	6003      	str	r3, [r0, #0]
 80087e4:	f04f 30ff 	mov.w	r0, #4294967295
 80087e8:	bd38      	pop	{r3, r4, r5, pc}
 80087ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80087ec:	b112      	cbz	r2, 80087f4 <_raise_r+0x1e>
 80087ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087f2:	b94b      	cbnz	r3, 8008808 <_raise_r+0x32>
 80087f4:	4628      	mov	r0, r5
 80087f6:	f000 f831 	bl	800885c <_getpid_r>
 80087fa:	4622      	mov	r2, r4
 80087fc:	4601      	mov	r1, r0
 80087fe:	4628      	mov	r0, r5
 8008800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008804:	f000 b818 	b.w	8008838 <_kill_r>
 8008808:	2b01      	cmp	r3, #1
 800880a:	d00a      	beq.n	8008822 <_raise_r+0x4c>
 800880c:	1c59      	adds	r1, r3, #1
 800880e:	d103      	bne.n	8008818 <_raise_r+0x42>
 8008810:	2316      	movs	r3, #22
 8008812:	6003      	str	r3, [r0, #0]
 8008814:	2001      	movs	r0, #1
 8008816:	e7e7      	b.n	80087e8 <_raise_r+0x12>
 8008818:	2100      	movs	r1, #0
 800881a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800881e:	4620      	mov	r0, r4
 8008820:	4798      	blx	r3
 8008822:	2000      	movs	r0, #0
 8008824:	e7e0      	b.n	80087e8 <_raise_r+0x12>
	...

08008828 <raise>:
 8008828:	4b02      	ldr	r3, [pc, #8]	@ (8008834 <raise+0xc>)
 800882a:	4601      	mov	r1, r0
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	f7ff bfd2 	b.w	80087d6 <_raise_r>
 8008832:	bf00      	nop
 8008834:	2000002c 	.word	0x2000002c

08008838 <_kill_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d07      	ldr	r5, [pc, #28]	@ (8008858 <_kill_r+0x20>)
 800883c:	2300      	movs	r3, #0
 800883e:	4604      	mov	r4, r0
 8008840:	4608      	mov	r0, r1
 8008842:	4611      	mov	r1, r2
 8008844:	602b      	str	r3, [r5, #0]
 8008846:	f7f8 ff89 	bl	800175c <_kill>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	d102      	bne.n	8008854 <_kill_r+0x1c>
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	b103      	cbz	r3, 8008854 <_kill_r+0x1c>
 8008852:	6023      	str	r3, [r4, #0]
 8008854:	bd38      	pop	{r3, r4, r5, pc}
 8008856:	bf00      	nop
 8008858:	200004b0 	.word	0x200004b0

0800885c <_getpid_r>:
 800885c:	f7f8 bf76 	b.w	800174c <_getpid>

08008860 <_init>:
 8008860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008862:	bf00      	nop
 8008864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008866:	bc08      	pop	{r3}
 8008868:	469e      	mov	lr, r3
 800886a:	4770      	bx	lr

0800886c <_fini>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	bf00      	nop
 8008870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008872:	bc08      	pop	{r3}
 8008874:	469e      	mov	lr, r3
 8008876:	4770      	bx	lr
